(() => {
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
        for (var prop in b || (b = {}))
            if (__hasOwnProp.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        if (__getOwnPropSymbols)
            for (var prop of __getOwnPropSymbols(b)) {
                if (__propIsEnum.call(b, prop))
                    __defNormalProp(a, prop, b[prop]);
            }
        return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
    var __commonJS = (cb, mod) => function __require() {
        return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __reExport = (target, module, desc) => {
        if (module && typeof module === "object" || typeof module === "function") {
            for (let key of __getOwnPropNames(module))
                if (!__hasOwnProp.call(target, key) && key !== "default")
                    __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
        }
        return target;
    };
    var __toModule = (module) => {
        return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
    };

    // vendor/topbar.js
    var require_topbar = __commonJS({
        "vendor/topbar.js" (exports, module) {
            (function(window2, document2) {
                "use strict";
                (function() {
                    var lastTime = 0;
                    var vendors = ["ms", "moz", "webkit", "o"];
                    for (var x = 0; x < vendors.length && !window2.requestAnimationFrame; ++x) {
                        window2.requestAnimationFrame = window2[vendors[x] + "RequestAnimationFrame"];
                        window2.cancelAnimationFrame = window2[vendors[x] + "CancelAnimationFrame"] || window2[vendors[x] + "CancelRequestAnimationFrame"];
                    }
                    if (!window2.requestAnimationFrame)
                        window2.requestAnimationFrame = function(callback, element) {
                            var currTime = new Date().getTime();
                            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                            var id = window2.setTimeout(function() {
                                callback(currTime + timeToCall);
                            }, timeToCall);
                            lastTime = currTime + timeToCall;
                            return id;
                        };
                    if (!window2.cancelAnimationFrame)
                        window2.cancelAnimationFrame = function(id) {
                            clearTimeout(id);
                        };
                })();
                var canvas, progressTimerId, fadeTimerId, currentProgress, showing, addEvent = function(elem, type, handler3) {
                        if (elem.addEventListener)
                            elem.addEventListener(type, handler3, false);
                        else if (elem.attachEvent)
                            elem.attachEvent("on" + type, handler3);
                        else
                            elem["on" + type] = handler3;
                    },
                    options = {
                        autoRun: true,
                        barThickness: 3,
                        barColors: {
                            0: "rgba(26,  188, 156, .9)",
                            ".25": "rgba(52,  152, 219, .9)",
                            ".50": "rgba(241, 196, 15,  .9)",
                            ".75": "rgba(230, 126, 34,  .9)",
                            "1.0": "rgba(211, 84,  0,   .9)"
                        },
                        shadowBlur: 10,
                        shadowColor: "rgba(0,   0,   0,   .6)",
                        className: null
                    },
                    repaint = function() {
                        canvas.width = window2.innerWidth;
                        canvas.height = options.barThickness * 5;
                        var ctx = canvas.getContext("2d");
                        ctx.shadowBlur = options.shadowBlur;
                        ctx.shadowColor = options.shadowColor;
                        var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
                        for (var stop2 in options.barColors)
                            lineGradient.addColorStop(stop2, options.barColors[stop2]);
                        ctx.lineWidth = options.barThickness;
                        ctx.beginPath();
                        ctx.moveTo(0, options.barThickness / 2);
                        ctx.lineTo(Math.ceil(currentProgress * canvas.width), options.barThickness / 2);
                        ctx.strokeStyle = lineGradient;
                        ctx.stroke();
                    },
                    createCanvas = function() {
                        canvas = document2.createElement("canvas");
                        var style = canvas.style;
                        style.position = "fixed";
                        style.top = style.left = style.right = style.margin = style.padding = 0;
                        style.zIndex = 100001;
                        style.display = "none";
                        if (options.className)
                            canvas.classList.add(options.className);
                        document2.body.appendChild(canvas);
                        addEvent(window2, "resize", repaint);
                    },
                    topbar2 = {
                        config: function(opts) {
                            for (var key in opts)
                                if (options.hasOwnProperty(key))
                                    options[key] = opts[key];
                        },
                        show: function() {
                            if (showing)
                                return;
                            showing = true;
                            if (fadeTimerId !== null)
                                window2.cancelAnimationFrame(fadeTimerId);
                            if (!canvas)
                                createCanvas();
                            canvas.style.opacity = 1;
                            canvas.style.display = "block";
                            topbar2.progress(0);
                            if (options.autoRun) {
                                (function loop2() {
                                    progressTimerId = window2.requestAnimationFrame(loop2);
                                    topbar2.progress("+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2));
                                })();
                            }
                        },
                        progress: function(to) {
                            if (typeof to === "undefined")
                                return currentProgress;
                            if (typeof to === "string") {
                                to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
                            }
                            currentProgress = to > 1 ? 1 : to;
                            repaint();
                            return currentProgress;
                        },
                        hide: function() {
                            if (!showing)
                                return;
                            showing = false;
                            if (progressTimerId != null) {
                                window2.cancelAnimationFrame(progressTimerId);
                                progressTimerId = null;
                            }
                            (function loop2() {
                                if (topbar2.progress("+.1") >= 1) {
                                    canvas.style.opacity -= 0.05;
                                    if (canvas.style.opacity <= 0.05) {
                                        canvas.style.display = "none";
                                        fadeTimerId = null;
                                        return;
                                    }
                                }
                                fadeTimerId = window2.requestAnimationFrame(loop2);
                            })();
                        }
                    };
                if (typeof module === "object" && typeof module.exports === "object") {
                    module.exports = topbar2;
                } else if (typeof define === "function" && define.amd) {
                    define(function() {
                        return topbar2;
                    });
                } else {
                    this.topbar = topbar2;
                }
            }).call(exports, window, document);
        }
    });

    // node_modules/embla-carousel/embla-carousel.umd.js
    var require_embla_carousel_umd = __commonJS({
        "node_modules/embla-carousel/embla-carousel.umd.js" (exports, module) {
            ! function(n, t) {
                typeof exports == "object" && typeof module != "undefined" ? module.exports = t() : typeof define == "function" && define.amd ? define(t) : (n = typeof globalThis != "undefined" ? globalThis : n || self).EmblaCarousel = t();
            }(exports, function() {
                "use strict";

                function n(n2) {
                    return typeof n2 == "number";
                }

                function t(n2) {
                    return Object.prototype.toString.call(n2) === "[object Object]";
                }

                function e(n2) {
                    return t(n2) || function(n3) {
                        return Array.isArray(n3);
                    }(n2);
                }

                function r(n2) {
                    return Math.abs(n2);
                }

                function o(n2) {
                    return n2 ? n2 / r(n2) : 0;
                }

                function i(n2, t2) {
                    return r(n2 - t2);
                }

                function u(n2) {
                    return f(n2).map(Number);
                }

                function c(n2) {
                    return n2[a(n2)];
                }

                function a(n2) {
                    return Math.max(0, n2.length - 1);
                }

                function f(n2) {
                    return Object.keys(n2);
                }

                function s(n2, e2) {
                    return [n2, e2].reduce(function(n3, e3) {
                        return f(e3).forEach(function(r2) {
                            var o2 = n3[r2],
                                i2 = e3[r2],
                                u2 = t(o2) && t(i2);
                            n3[r2] = u2 ? s(o2, i2) : i2;
                        }), n3;
                    }, {});
                }

                function d(n2, t2) {
                    var r2 = f(n2),
                        o2 = f(t2);
                    return r2.length === o2.length && r2.every(function(r3) {
                        var o3 = n2[r3],
                            i2 = t2[r3];
                        return typeof o3 == "function" ? "".concat(o3) === "".concat(i2) : e(o3) && e(i2) ? d(o3, i2) : o3 === i2;
                    });
                }

                function l(t2, e2) {
                    var r2 = {
                        start: function() {
                            return 0;
                        },
                        center: function(n2) {
                            return o2(n2) / 2;
                        },
                        end: o2
                    };

                    function o2(n2) {
                        return e2 - n2;
                    }
                    return {
                        measure: function(o3) {
                            return n(t2) ? e2 * Number(t2) : r2[t2](o3);
                        }
                    };
                }

                function p(n2, t2) {
                    var e2 = r(n2 - t2);

                    function o2(t3) {
                        return t3 < n2;
                    }

                    function i2(n3) {
                        return n3 > t2;
                    }

                    function u2(n3) {
                        return o2(n3) || i2(n3);
                    }
                    return {
                        length: e2,
                        max: t2,
                        min: n2,
                        constrain: function(e3) {
                            return u2(e3) ? o2(e3) ? n2 : t2 : e3;
                        },
                        reachedAny: u2,
                        reachedMax: i2,
                        reachedMin: o2,
                        removeOffset: function(n3) {
                            return e2 ? n3 - e2 * Math.ceil((n3 - t2) / e2) : n3;
                        }
                    };
                }

                function v(n2, t2, e2) {
                    var o2 = p(0, n2),
                        i2 = o2.min,
                        u2 = o2.constrain,
                        c2 = n2 + 1,
                        a2 = f2(t2);

                    function f2(n3) {
                        return e2 ? r((c2 + n3) % c2) : u2(n3);
                    }

                    function s2() {
                        return a2;
                    }

                    function d2(n3) {
                        return a2 = f2(n3), l2;
                    }
                    var l2 = {
                        add: function(n3) {
                            return d2(s2() + n3);
                        },
                        clone: function() {
                            return v(n2, s2(), e2);
                        },
                        get: s2,
                        set: d2,
                        min: i2,
                        max: n2
                    };
                    return l2;
                }

                function m() {
                    var n2 = [];
                    var t2 = {
                        add: function(e2, r2, o2, i2) {
                            return i2 === void 0 && (i2 = false), e2.addEventListener(r2, o2, i2), n2.push(function() {
                                return e2.removeEventListener(r2, o2, i2);
                            }), t2;
                        },
                        removeAll: function() {
                            return n2 = n2.filter(function(n3) {
                                return n3();
                            }), t2;
                        }
                    };
                    return t2;
                }

                function g(t2) {
                    var e2 = t2;

                    function r2(n2) {
                        return e2 /= n2, i2;
                    }

                    function o2(t3) {
                        return n(t3) ? t3 : t3.get();
                    }
                    var i2 = {
                        add: function(n2) {
                            return e2 += o2(n2), i2;
                        },
                        divide: r2,
                        get: function() {
                            return e2;
                        },
                        multiply: function(n2) {
                            return e2 *= n2, i2;
                        },
                        normalize: function() {
                            return e2 !== 0 && r2(e2), i2;
                        },
                        set: function(n2) {
                            return e2 = o2(n2), i2;
                        },
                        subtract: function(n2) {
                            return e2 -= o2(n2), i2;
                        }
                    };
                    return i2;
                }

                function x(n2, t2, e2, u2, c2, a2, f2, s2, d2, l2, p2, v2, x2, h2, y2, S2) {
                    var b2 = n2.cross,
                        w2 = ["INPUT", "SELECT", "TEXTAREA"],
                        E2 = g(0),
                        A2 = m(),
                        M2 = m(),
                        T2 = x2.measure(20),
                        O2 = { mouse: 300, touch: 400 },
                        B2 = { mouse: 500, touch: 600 },
                        P2 = y2 ? 5 : 16,
                        k2 = 0,
                        I2 = 0,
                        z = false,
                        D = false,
                        L = false,
                        N = false;

                    function C(n3) {
                        if (!(N = n3.type === "mousedown") || n3.button === 0) {
                            var t3, r2, o2 = i(u2.get(), a2.get()) >= 2,
                                f3 = N || !o2,
                                s3 = (t3 = n3.target, r2 = t3.nodeName || "", !(w2.indexOf(r2) > -1)),
                                l3 = o2 || N && s3;
                            z = true, c2.pointerDown(n3), E2.set(u2), u2.set(a2), d2.useBaseMass().useSpeed(80),
                                function() {
                                    var n4 = N ? document : e2;
                                    M2.add(n4, "touchmove", V).add(n4, "touchend", H).add(n4, "mousemove", V).add(n4, "mouseup", H);
                                }(), k2 = c2.readPoint(n3), I2 = c2.readPoint(n3, b2), v2.emit("pointerDown"), f3 && (L = false), l3 && n3.preventDefault();
                        }
                    }

                    function V(n3) {
                        if (!D && !N) {
                            if (!n3.cancelable)
                                return H(n3);
                            var e3 = c2.readPoint(n3),
                                r2 = c2.readPoint(n3, b2),
                                o2 = i(e3, k2),
                                a3 = i(r2, I2);
                            if (!(D = o2 > a3) && !L)
                                return H(n3);
                        }
                        var s3 = c2.pointerMove(n3);
                        !L && s3 && (L = true), f2.start(), u2.add(t2.apply(s3)), n3.preventDefault();
                    }

                    function H(n3) {
                        var e3 = l2.byDistance(0, false).index !== p2.get(),
                            a3 = c2.pointerUp(n3) * (y2 ? B2 : O2)[N ? "mouse" : "touch"],
                            f3 = function(n4, t3) {
                                var e4 = p2.clone().add(-1 * o(n4)),
                                    i2 = e4.get() === p2.min || e4.get() === p2.max,
                                    u3 = l2.byDistance(n4, !y2).distance;
                                return y2 || r(n4) < T2 ? u3 : !h2 && i2 ? 0.4 * u3 : S2 && t3 ? 0.5 * u3 : l2.byIndex(e4.get(), 0).distance;
                            }(t2.apply(a3), e3),
                            m2 = function(n4, t3) {
                                if (n4 === 0 || t3 === 0)
                                    return 0;
                                if (r(n4) <= r(t3))
                                    return 0;
                                var e4 = i(r(n4), r(t3));
                                return r(e4 / n4);
                            }(a3, f3),
                            g2 = i(u2.get(), E2.get()) >= 0.5,
                            x3 = e3 && m2 > 0.75,
                            b3 = r(a3) < T2,
                            w3 = x3 ? 10 : P2,
                            A3 = x3 ? 1 + 2.5 * m2 : 1;
                        g2 && !N && (L = true), D = false, z = false, M2.removeAll(), d2.useSpeed(b3 ? 9 : w3).useMass(A3), s2.distance(f3, !y2), N = false, v2.emit("pointerUp");
                    }

                    function R(n3) {
                        L && n3.preventDefault();
                    }
                    return {
                        addActivationEvents: function() {
                            var n3 = e2;
                            A2.add(n3, "touchmove", function() {}).add(n3, "touchend", function() {}).add(n3, "touchstart", C).add(n3, "mousedown", C).add(n3, "touchcancel", H).add(n3, "contextmenu", H).add(n3, "click", R);
                        },
                        clickAllowed: function() {
                            return !L;
                        },
                        pointerDown: function() {
                            return z;
                        },
                        removeAllEvents: function() {
                            A2.removeAll(), M2.removeAll();
                        }
                    };
                }

                function h(n2, t2, e2) {
                    var r2, i2, u2 = (r2 = 2, i2 = Math.pow(10, r2), function(n3) {
                            return Math.round(n3 * i2) / i2;
                        }),
                        c2 = g(0),
                        a2 = g(0),
                        f2 = g(0),
                        s2 = 0,
                        d2 = t2,
                        l2 = e2;

                    function p2(n3) {
                        return d2 = n3, m2;
                    }

                    function v2(n3) {
                        return l2 = n3, m2;
                    }
                    var m2 = {
                        direction: function() {
                            return s2;
                        },
                        seek: function(t3) {
                            f2.set(t3).subtract(n2);
                            var e3, r3, i3, u3, p3 = (e3 = f2.get(), (i3 = 0) + (e3 - (r3 = 0)) / (100 - r3) * (d2 - i3));
                            return s2 = o(f2.get()), f2.normalize().multiply(p3).subtract(c2), (u3 = f2).divide(l2), a2.add(u3), m2;
                        },
                        settle: function(t3) {
                            var e3 = t3.get() - n2.get(),
                                r3 = !u2(e3);
                            return r3 && n2.set(t3), r3;
                        },
                        update: function() {
                            c2.add(a2), n2.add(c2), a2.multiply(0);
                        },
                        useBaseMass: function() {
                            return v2(e2);
                        },
                        useBaseSpeed: function() {
                            return p2(t2);
                        },
                        useMass: v2,
                        useSpeed: p2
                    };
                    return m2;
                }

                function y(n2, t2, e2, o2, i2) {
                    var u2 = i2.measure(10),
                        c2 = i2.measure(50),
                        a2 = false;
                    return {
                        constrain: function(i3) {
                            if (!a2 && n2.reachedAny(e2.get()) && n2.reachedAny(t2.get())) {
                                var f2 = n2.reachedMin(t2.get()) ? "min" : "max",
                                    s2 = r(n2[f2] - t2.get()),
                                    d2 = e2.get() - t2.get(),
                                    l2 = Math.min(s2 / c2, 0.85);
                                e2.subtract(d2 * l2), !i3 && r(d2) < u2 && (e2.set(n2.constrain(e2.get())), o2.useSpeed(10).useMass(3));
                            }
                        },
                        toggleActive: function(n3) {
                            a2 = !n3;
                        }
                    };
                }

                function S(n2, t2, e2, r2) {
                    var o2 = p(-t2 + n2, e2[0]),
                        i2 = e2.map(o2.constrain);
                    return {
                        snapsContained: function() {
                            if (t2 <= n2)
                                return [o2.max];
                            if (r2 === "keepSnaps")
                                return i2;
                            var e3 = function() {
                                    var n3 = i2[0],
                                        t3 = c(i2),
                                        e4 = i2.lastIndexOf(n3),
                                        r3 = i2.indexOf(t3) + 1;
                                    return p(e4, r3);
                                }(),
                                u2 = e3.min,
                                a2 = e3.max;
                            return i2.slice(u2, a2);
                        }()
                    };
                }

                function b(n2, t2, e2, r2) {
                    var o2 = p(t2.min + 0.1, t2.max + 0.1),
                        i2 = o2.reachedMin,
                        u2 = o2.reachedMax;
                    return {
                        loop: function(t3) {
                            if (function(n3) {
                                    return n3 === 1 ? u2(e2.get()) : n3 === -1 && i2(e2.get());
                                }(t3)) {
                                var o3 = n2 * (-1 * t3);
                                r2.forEach(function(n3) {
                                    return n3.add(o3);
                                });
                            }
                        }
                    };
                }

                function w(n2) {
                    var t2 = n2.max,
                        e2 = n2.length;
                    return {
                        get: function(n3) {
                            return (n3 - t2) / -e2;
                        }
                    };
                }

                function E(n2, t2, e2, i2, u2) {
                    var c2 = i2.reachedAny,
                        a2 = i2.removeOffset,
                        f2 = i2.constrain;

                    function s2(n3) {
                        return n3.concat().sort(function(n4, t3) {
                            return r(n4) - r(t3);
                        })[0];
                    }

                    function d2(t3, r2) {
                        var i3 = [t3, t3 + e2, t3 - e2];
                        return n2 ? s2(r2 ? i3.filter(function(n3) {
                            return o(n3) === r2;
                        }) : i3) : i3[0];
                    }
                    return {
                        byDistance: function(e3, o2) {
                            var i3 = u2.get() + e3,
                                s3 = function(e4) {
                                    var o3 = n2 ? a2(e4) : f2(e4);
                                    return {
                                        index: t2.map(function(n3) {
                                            return n3 - o3;
                                        }).map(function(n3) {
                                            return d2(n3, 0);
                                        }).map(function(n3, t3) {
                                            return { diff: n3, index: t3 };
                                        }).sort(function(n3, t3) {
                                            return r(n3.diff) - r(t3.diff);
                                        })[0].index,
                                        distance: o3
                                    };
                                }(i3),
                                l2 = s3.index,
                                p2 = s3.distance,
                                v2 = !n2 && c2(i3);
                            return !o2 || v2 ? { index: l2, distance: e3 } : { index: l2, distance: e3 + d2(t2[l2] - p2, 0) };
                        },
                        byIndex: function(n3, e3) {
                            return { index: n3, distance: d2(t2[n3] - u2.get(), e3) };
                        },
                        shortcut: d2
                    };
                }

                function A(n2, t2, e2) {
                    var r2 = n2.scroll === "x" ? function(n3) {
                            return "translate3d(".concat(n3, "px,0px,0px)");
                        } : function(n3) {
                            return "translate3d(0px,".concat(n3, "px,0px)");
                        },
                        o2 = e2.style,
                        i2 = false;
                    return {
                        clear: function() {
                            i2 || (o2.transform = "", e2.getAttribute("style") || e2.removeAttribute("style"));
                        },
                        to: function(n3) {
                            i2 || (o2.transform = r2(t2.apply(n3.get())));
                        },
                        toggleActive: function(n3) {
                            i2 = !n3;
                        }
                    };
                }

                function M(n2, t2, e2, r2, o2, i2, c2, a2, f2) {
                    var s2, d2 = u(o2),
                        l2 = u(o2).reverse(),
                        p2 = (s2 = i2[0] - 1, x2(m2(l2, s2), "end")).concat(function() {
                            var n3 = e2 - i2[0] - 1;
                            return x2(m2(d2, n3), "start");
                        }());

                    function v2(n3, t3) {
                        return n3.reduce(function(n4, t4) {
                            return n4 - o2[t4];
                        }, t3);
                    }

                    function m2(n3, t3) {
                        return n3.reduce(function(n4, e3) {
                            return v2(n4, t3) > 0 ? n4.concat([e3]) : n4;
                        }, []);
                    }

                    function x2(e3, o3) {
                        var i3 = o3 === "start",
                            u2 = i3 ? -r2 : r2,
                            s3 = c2.findSlideBounds([u2]);
                        return e3.map(function(e4) {
                            var o4 = i3 ? 0 : -r2,
                                u3 = i3 ? r2 : 0,
                                c3 = s3.filter(function(n3) {
                                    return n3.index === e4;
                                })[0][i3 ? "end" : "start"],
                                d3 = g(-1),
                                l3 = g(-1),
                                p3 = A(n2, t2, f2[e4]);
                            return {
                                index: e4,
                                location: l3,
                                translate: p3,
                                target: function() {
                                    return d3.set(a2.get() > c3 ? o4 : u3);
                                }
                            };
                        });
                    }
                    return {
                        canLoop: function() {
                            return p2.every(function(n3) {
                                var t3 = n3.index;
                                return v2(d2.filter(function(n4) {
                                    return n4 !== t3;
                                }), e2) <= 0.1;
                            });
                        },
                        clear: function() {
                            p2.forEach(function(n3) {
                                return n3.translate.clear();
                            });
                        },
                        loop: function() {
                            p2.forEach(function(n3) {
                                var t3 = n3.target,
                                    e3 = n3.translate,
                                    r3 = n3.location,
                                    o3 = t3();
                                o3.get() !== r3.get() && (o3.get() === 0 ? e3.clear() : e3.to(o3), r3.set(o3));
                            });
                        },
                        loopPoints: p2
                    };
                }

                function T(n2, t2, e2, r2, o2, i2, u2) {
                    var c2 = o2.removeOffset,
                        a2 = o2.constrain,
                        f2 = i2 ? [0, t2, -t2] : [0],
                        s2 = d2(f2, u2);

                    function d2(t3, o3) {
                        var i3 = t3 || f2,
                            u3 = function(n3) {
                                var t4 = n3 || 0;
                                return e2.map(function(n4) {
                                    return p(0.5, n4 - 0.5).constrain(n4 * t4);
                                });
                            }(o3);
                        return i3.reduce(function(t4, o4) {
                            var i4 = r2.map(function(t5, r3) {
                                return { start: t5 - e2[r3] + u3[r3] + o4, end: t5 + n2 - u3[r3] + o4, index: r3 };
                            });
                            return t4.concat(i4);
                        }, []);
                    }
                    return {
                        check: function(n3, t3) {
                            var e3 = i2 ? c2(n3) : a2(n3);
                            return (t3 || s2).reduce(function(n4, t4) {
                                var r3 = t4.index,
                                    o3 = t4.start,
                                    i3 = t4.end;
                                return !(n4.indexOf(r3) !== -1) && (o3 < e3 && i3 > e3) ? n4.concat([r3]) : n4;
                            }, []);
                        },
                        findSlideBounds: d2
                    };
                }

                function O(t2, e2, r2) {
                    var o2 = n(r2);
                    return {
                        groupSlides: function(n2) {
                            return o2 ? function(n3, t3) {
                                return u(n3).filter(function(n4) {
                                    return n4 % t3 == 0;
                                }).map(function(e3) {
                                    return n3.slice(e3, e3 + t3);
                                });
                            }(n2, r2) : function(n3) {
                                return u(n3).reduce(function(n4, r3) {
                                    var o3 = e2.slice(c(n4), r3 + 1).reduce(function(n5, t3) {
                                        return n5 + t3;
                                    }, 0);
                                    return !r3 || o3 > t2 ? n4.concat(r3) : n4;
                                }, []).map(function(t3, e3, r3) {
                                    return n3.slice(t3, r3[e3 + 1]);
                                });
                            }(n2);
                        }
                    };
                }

                function B(n2, t2, e2, o2, i2) {
                    var f2 = o2.align,
                        s2 = o2.axis,
                        d2 = o2.direction,
                        B2 = o2.startIndex,
                        P2 = o2.inViewThreshold,
                        k2 = o2.loop,
                        I2 = o2.speed,
                        z = o2.dragFree,
                        D = o2.slidesToScroll,
                        L = o2.skipSnaps,
                        N = o2.containScroll,
                        C = t2.getBoundingClientRect(),
                        V = e2.map(function(n3) {
                            return n3.getBoundingClientRect();
                        }),
                        H = function(n3) {
                            var t3 = n3 === "rtl" ? -1 : 1;
                            return {
                                apply: function(n4) {
                                    return n4 * t3;
                                }
                            };
                        }(d2),
                        R = function(n3, t3) {
                            var e3 = n3 === "y" ? "y" : "x";
                            return {
                                scroll: e3,
                                cross: n3 === "y" ? "x" : "y",
                                startEdge: e3 === "y" ? "top" : t3 === "rtl" ? "right" : "left",
                                endEdge: e3 === "y" ? "bottom" : t3 === "rtl" ? "left" : "right",
                                measureSize: function(n4) {
                                    var t4 = n4.width,
                                        r2 = n4.height;
                                    return e3 === "x" ? t4 : r2;
                                }
                            };
                        }(s2, d2),
                        j = R.measureSize(C),
                        F = function(n3) {
                            return {
                                measure: function(t3) {
                                    return n3 * (t3 / 100);
                                }
                            };
                        }(j),
                        q = l(f2, j),
                        U = !k2 && N !== "",
                        G = function(n3, t3, e3, o3, i3) {
                            var u2 = n3.measureSize,
                                f3 = n3.startEdge,
                                s3 = n3.endEdge,
                                d3 = function() {
                                    if (!i3)
                                        return 0;
                                    var n4 = e3[0];
                                    return r(t3[f3] - n4[f3]);
                                }(),
                                l2 = function() {
                                    if (!i3)
                                        return 0;
                                    var n4 = window.getComputedStyle(c(o3));
                                    return parseFloat(n4.getPropertyValue("margin-".concat(s3)));
                                }(),
                                p2 = e3.map(u2),
                                v2 = e3.map(function(n4, t4, e4) {
                                    var r2 = !t4,
                                        o4 = t4 === a(e4);
                                    return r2 ? p2[t4] + d3 : o4 ? p2[t4] + l2 : e4[t4 + 1][f3] - n4[f3];
                                }).map(r);
                            return { slideSizes: p2, slideSizesWithGaps: v2 };
                        }(R, C, V, e2, k2 || N !== ""),
                        J = G.slideSizes,
                        W = G.slideSizesWithGaps,
                        X = O(j, W, D),
                        Y = function(n3, t3, e3, o3, i3, u2, f3) {
                            var s3, d3 = n3.startEdge,
                                l2 = n3.endEdge,
                                p2 = u2.groupSlides,
                                v2 = p2(o3).map(function(n4) {
                                    return c(n4)[l2] - n4[0][d3];
                                }).map(r).map(t3.measure),
                                m2 = o3.map(function(n4) {
                                    return e3[d3] - n4[d3];
                                }).map(function(n4) {
                                    return -r(n4);
                                }),
                                g2 = (s3 = c(m2) - c(i3), p2(m2).map(function(n4) {
                                    return n4[0];
                                }).map(function(n4, t4, e4) {
                                    var r2 = !t4,
                                        o4 = t4 === a(e4);
                                    return f3 && r2 ? 0 : f3 && o4 ? s3 : n4 + v2[t4];
                                }));
                            return { snaps: m2, snapsAligned: g2 };
                        }(R, q, C, V, W, X, U),
                        K = Y.snaps,
                        Q = Y.snapsAligned,
                        Z = -c(K) + c(W),
                        $ = S(j, Z, Q, N).snapsContained,
                        _ = U ? $ : Q,
                        nn = function(n3, t3, e3) {
                            var r2, o3;
                            return { limit: (r2 = t3[0], o3 = c(t3), p(e3 ? r2 - n3 : o3, r2)) };
                        }(Z, _, k2).limit,
                        tn = v(a(_), B2, k2),
                        en = tn.clone(),
                        rn = u(e2),
                        on2 = function(n3) {
                            var t3 = 0;

                            function e3(n4, e4) {
                                return function() {
                                    n4 === !!t3 && e4();
                                };
                            }

                            function r2() {
                                t3 = window.requestAnimationFrame(n3);
                            }
                            return {
                                proceed: e3(true, r2),
                                start: e3(false, r2),
                                stop: e3(true, function() {
                                    window.cancelAnimationFrame(t3), t3 = 0;
                                })
                            };
                        }(function() {
                            k2 || vn.scrollBounds.constrain(vn.dragHandler.pointerDown()), vn.scrollBody.seek(an).update();
                            var n3 = vn.scrollBody.settle(an);
                            n3 && !vn.dragHandler.pointerDown() && (vn.animation.stop(), i2.emit("settle")), n3 || i2.emit("scroll"), k2 && (vn.scrollLooper.loop(vn.scrollBody.direction()), vn.slideLooper.loop()), vn.translate.to(cn), vn.animation.proceed();
                        }),
                        un = _[tn.get()],
                        cn = g(un),
                        an = g(un),
                        fn = h(cn, I2, 1),
                        sn = E(k2, _, Z, nn, an),
                        dn = function(n3, t3, e3, r2, o3, i3) {
                            function u2(r3) {
                                var u3 = r3.distance,
                                    c2 = r3.index !== t3.get();
                                u3 && (n3.start(), o3.add(u3)), c2 && (e3.set(t3.get()), t3.set(r3.index), i3.emit("select"));
                            }
                            return {
                                distance: function(n4, t4) {
                                    u2(r2.byDistance(n4, t4));
                                },
                                index: function(n4, e4) {
                                    var o4 = t3.clone().set(n4);
                                    u2(r2.byIndex(o4.get(), e4));
                                }
                            };
                        }(on2, tn, en, sn, an, i2),
                        ln = T(j, Z, J, K, nn, k2, P2),
                        pn = x(R, H, n2, an, function(n3) {
                            var t3, e3;

                            function o3(n4) {
                                return typeof TouchEvent != "undefined" && n4 instanceof TouchEvent;
                            }

                            function i3(n4) {
                                return n4.timeStamp;
                            }

                            function u2(t4, e4) {
                                var r2 = e4 || n3.scroll,
                                    i4 = "client".concat(r2 === "x" ? "X" : "Y");
                                return (o3(t4) ? t4.touches[0] : t4)[i4];
                            }
                            return {
                                isTouchEvent: o3,
                                pointerDown: function(n4) {
                                    return t3 = n4, e3 = n4, u2(n4);
                                },
                                pointerMove: function(n4) {
                                    var r2 = u2(n4) - u2(e3),
                                        o4 = i3(n4) - i3(t3) > 170;
                                    return e3 = n4, o4 && (t3 = n4), r2;
                                },
                                pointerUp: function(n4) {
                                    if (!t3 || !e3)
                                        return 0;
                                    var o4 = u2(e3) - u2(t3),
                                        c2 = i3(n4) - i3(t3),
                                        a2 = i3(n4) - i3(e3) > 170,
                                        f3 = o4 / c2;
                                    return c2 && !a2 && r(f3) > 0.1 ? f3 : 0;
                                },
                                readPoint: u2
                            };
                        }(R), cn, on2, dn, fn, sn, tn, i2, F, k2, z, L),
                        vn = { containerRect: C, slideRects: V, animation: on2, axis: R, direction: H, dragHandler: pn, eventStore: m(), percentOfView: F, index: tn, indexPrevious: en, limit: nn, location: cn, options: o2, scrollBody: fn, scrollBounds: y(nn, cn, an, fn, F), scrollLooper: b(Z, nn, cn, [cn, an]), scrollProgress: w(nn), scrollSnaps: _, scrollTarget: sn, scrollTo: dn, slideLooper: M(R, H, j, Z, W, _, ln, cn, e2), slidesToScroll: X, slidesInView: ln, slideIndexes: rn, target: an, translate: A(R, H, t2) };
                    return vn;
                }
                var P = { align: "center", axis: "x", containScroll: "", direction: "ltr", slidesToScroll: 1, breakpoints: {}, dragFree: false, draggable: true, inViewThreshold: 0, loop: false, skipSnaps: false, speed: 10, startIndex: 0, active: true };

                function k() {
                    function n2(n3, t2) {
                        return s(n3, t2 || {});
                    }
                    return {
                        merge: n2,
                        areEqual: function(n3, t2) {
                            return JSON.stringify(f(n3.breakpoints || {})) === JSON.stringify(f(t2.breakpoints || {})) && d(n3, t2);
                        },
                        atMedia: function(t2) {
                            var e2 = t2.breakpoints || {},
                                r2 = f(e2).filter(function(n3) {
                                    return window.matchMedia(n3).matches;
                                }).map(function(n3) {
                                    return e2[n3];
                                }).reduce(function(t3, e3) {
                                    return n2(t3, e3);
                                }, {});
                            return n2(t2, r2);
                        }
                    };
                }

                function I(n2, t2, e2) {
                    var r2, o2, i2, u2, c2, a2 = m(),
                        f2 = k(),
                        s2 = function() {
                            var n3 = k(),
                                t3 = n3.atMedia,
                                e3 = n3.areEqual,
                                r3 = [],
                                o3 = [];

                            function i3(n4) {
                                var r4 = t3(n4.options);
                                return function() {
                                    return !e3(r4, t3(n4.options));
                                };
                            }
                            var u3 = {
                                init: function(n4, e4) {
                                    return o3 = n4.map(i3), (r3 = n4.filter(function(n5) {
                                        return t3(n5.options).active;
                                    })).forEach(function(n5) {
                                        return n5.init(e4);
                                    }), n4.reduce(function(n5, t4) {
                                        var e5;
                                        return Object.assign(n5, ((e5 = {})[t4.name] = t4, e5));
                                    }, {});
                                },
                                destroy: function() {
                                    r3 = r3.filter(function(n4) {
                                        return n4.destroy();
                                    });
                                },
                                haveChanged: function() {
                                    return o3.some(function(n4) {
                                        return n4();
                                    });
                                }
                            };
                            return u3;
                        }(),
                        d2 = function() {
                            var n3 = {};

                            function t3(t4) {
                                return n3[t4] || [];
                            }
                            var e3 = {
                                emit: function(n4) {
                                    return t3(n4).forEach(function(t4) {
                                        return t4(n4);
                                    }), e3;
                                },
                                off: function(r3, o3) {
                                    return n3[r3] = t3(r3).filter(function(n4) {
                                        return n4 !== o3;
                                    }), e3;
                                },
                                on: function(r3, o3) {
                                    return n3[r3] = t3(r3).concat([o3]), e3;
                                }
                            };
                            return e3;
                        }(),
                        l2 = d2.on,
                        p2 = d2.off,
                        v2 = w2,
                        g2 = false,
                        x2 = f2.merge(P, I.globalOptions),
                        h2 = f2.merge(x2),
                        y2 = [],
                        S2 = 0;

                    function b2(t3, e3) {
                        if (!g2) {
                            var a3, l3;
                            if (a3 = "container" in n2 && n2.container, l3 = "slides" in n2 && n2.slides, i2 = "root" in n2 ? n2.root : n2, u2 = a3 || i2.children[0], c2 = l3 || [].slice.call(u2.children), x2 = f2.merge(x2, t3), h2 = f2.atMedia(x2), r2 = B(i2, u2, c2, h2, d2), S2 = r2.axis.measureSize(i2.getBoundingClientRect()), !h2.active)
                                return E2();
                            if (r2.translate.to(r2.location), y2 = e3 || y2, o2 = s2.init(y2, O2), h2.loop) {
                                if (!r2.slideLooper.canLoop())
                                    return E2(), b2({ loop: false }, e3);
                                r2.slideLooper.loop();
                            }
                            h2.draggable && u2.offsetParent && c2.length && r2.dragHandler.addActivationEvents();
                        }
                    }

                    function w2(n3, t3) {
                        var e3 = T2();
                        E2(), b2(f2.merge({ startIndex: e3 }, n3), t3), d2.emit("reInit");
                    }

                    function E2() {
                        r2.dragHandler.removeAllEvents(), r2.animation.stop(), r2.eventStore.removeAll(), r2.translate.clear(), r2.slideLooper.clear(), s2.destroy();
                    }

                    function A2(n3) {
                        var t3 = r2[n3 ? "target" : "location"].get(),
                            e3 = h2.loop ? "removeOffset" : "constrain";
                        return r2.slidesInView.check(r2.limit[e3](t3));
                    }

                    function M2(n3, t3, e3) {
                        h2.active && !g2 && (r2.scrollBody.useBaseMass().useSpeed(t3 ? 100 : h2.speed), r2.scrollTo.index(n3, e3 || 0));
                    }

                    function T2() {
                        return r2.index.get();
                    }
                    var O2 = {
                        canScrollNext: function() {
                            return r2.index.clone().add(1).get() !== T2();
                        },
                        canScrollPrev: function() {
                            return r2.index.clone().add(-1).get() !== T2();
                        },
                        clickAllowed: function() {
                            return r2.dragHandler.clickAllowed();
                        },
                        containerNode: function() {
                            return u2;
                        },
                        internalEngine: function() {
                            return r2;
                        },
                        destroy: function() {
                            g2 || (g2 = true, a2.removeAll(), E2(), d2.emit("destroy"));
                        },
                        off: p2,
                        on: l2,
                        plugins: function() {
                            return o2;
                        },
                        previousScrollSnap: function() {
                            return r2.indexPrevious.get();
                        },
                        reInit: v2,
                        rootNode: function() {
                            return i2;
                        },
                        scrollNext: function(n3) {
                            M2(r2.index.clone().add(1).get(), n3 === true, -1);
                        },
                        scrollPrev: function(n3) {
                            M2(r2.index.clone().add(-1).get(), n3 === true, 1);
                        },
                        scrollProgress: function() {
                            return r2.scrollProgress.get(r2.location.get());
                        },
                        scrollSnapList: function() {
                            return r2.scrollSnaps.map(r2.scrollProgress.get);
                        },
                        scrollTo: M2,
                        selectedScrollSnap: T2,
                        slideNodes: function() {
                            return c2;
                        },
                        slidesInView: A2,
                        slidesNotInView: function(n3) {
                            var t3 = A2(n3);
                            return r2.slideIndexes.filter(function(n4) {
                                return t3.indexOf(n4) === -1;
                            });
                        }
                    };
                    return b2(t2, e2), a2.add(window, "resize", function() {
                        var n3 = f2.atMedia(x2),
                            t3 = !f2.areEqual(n3, h2),
                            e3 = r2.axis.measureSize(i2.getBoundingClientRect()),
                            o3 = S2 !== e3,
                            u3 = s2.haveChanged();
                        (o3 || t3 || u3) && w2(), d2.emit("resize");
                    }), setTimeout(function() {
                        return d2.emit("init");
                    }, 0), O2;
                }
                return I.globalOptions = void 0, I.optionsHandler = k, I;
            });
        }
    });

    // ../deps/phoenix_html/priv/static/phoenix_html.js
    "use strict";
    (function() {
        var PolyfillEvent = eventConstructor();

        function eventConstructor() {
            if (typeof window.CustomEvent === "function")
                return window.CustomEvent;

            function CustomEvent2(event, params) {
                params = params || { bubbles: false, cancelable: false, detail: void 0 };
                var evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
                return evt;
            }
            CustomEvent2.prototype = window.Event.prototype;
            return CustomEvent2;
        }

        function buildHiddenInput(name, value) {
            var input = document.createElement("input");
            input.type = "hidden";
            input.name = name;
            input.value = value;
            return input;
        }

        function handleClick(element, targetModifierKey) {
            var to = element.getAttribute("data-to"),
                method = buildHiddenInput("_method", element.getAttribute("data-method")),
                csrf = buildHiddenInput("_csrf_token", element.getAttribute("data-csrf")),
                form = document.createElement("form"),
                target = element.getAttribute("target");
            form.method = element.getAttribute("data-method") === "get" ? "get" : "post";
            form.action = to;
            form.style.display = "hidden";
            if (target)
                form.target = target;
            else if (targetModifierKey)
                form.target = "_blank";
            form.appendChild(csrf);
            form.appendChild(method);
            document.body.appendChild(form);
            form.submit();
        }
        window.addEventListener("click", function(e) {
            var element = e.target;
            if (e.defaultPrevented)
                return;
            while (element && element.getAttribute) {
                var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
                    "bubbles": true,
                    "cancelable": true
                });
                if (!element.dispatchEvent(phoenixLinkEvent)) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    return false;
                }
                if (element.getAttribute("data-method")) {
                    handleClick(element, e.metaKey || e.shiftKey);
                    e.preventDefault();
                    return false;
                } else {
                    element = element.parentNode;
                }
            }
        }, false);
        window.addEventListener("phoenix.link.click", function(e) {
            var message = e.target.getAttribute("data-confirm");
            if (message && !window.confirm(message)) {
                e.preventDefault();
            }
        }, false);
    })();

    // ../deps/phoenix/priv/static/phoenix.mjs
    var closure = (value) => {
        if (typeof value === "function") {
            return value;
        } else {
            let closure22 = function() {
                return value;
            };
            return closure22;
        }
    };
    var globalSelf = typeof self !== "undefined" ? self : null;
    var phxWindow = typeof window !== "undefined" ? window : null;
    var global = globalSelf || phxWindow || global;
    var DEFAULT_VSN = "2.0.0";
    var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
    var DEFAULT_TIMEOUT = 1e4;
    var WS_CLOSE_NORMAL = 1e3;
    var CHANNEL_STATES = {
        closed: "closed",
        errored: "errored",
        joined: "joined",
        joining: "joining",
        leaving: "leaving"
    };
    var CHANNEL_EVENTS = {
        close: "phx_close",
        error: "phx_error",
        join: "phx_join",
        reply: "phx_reply",
        leave: "phx_leave"
    };
    var TRANSPORTS = {
        longpoll: "longpoll",
        websocket: "websocket"
    };
    var XHR_STATES = {
        complete: 4
    };
    var Push = class {
        constructor(channel, event, payload, timeout) {
            this.channel = channel;
            this.event = event;
            this.payload = payload || function() {
                return {};
            };
            this.receivedResp = null;
            this.timeout = timeout;
            this.timeoutTimer = null;
            this.recHooks = [];
            this.sent = false;
        }
        resend(timeout) {
            this.timeout = timeout;
            this.reset();
            this.send();
        }
        send() {
            if (this.hasReceived("timeout")) {
                return;
            }
            this.startTimeout();
            this.sent = true;
            this.channel.socket.push({
                topic: this.channel.topic,
                event: this.event,
                payload: this.payload(),
                ref: this.ref,
                join_ref: this.channel.joinRef()
            });
        }
        receive(status, callback) {
            if (this.hasReceived(status)) {
                callback(this.receivedResp.response);
            }
            this.recHooks.push({ status, callback });
            return this;
        }
        reset() {
            this.cancelRefEvent();
            this.ref = null;
            this.refEvent = null;
            this.receivedResp = null;
            this.sent = false;
        }
        matchReceive({ status, response, _ref }) {
            this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
        }
        cancelRefEvent() {
            if (!this.refEvent) {
                return;
            }
            this.channel.off(this.refEvent);
        }
        cancelTimeout() {
            clearTimeout(this.timeoutTimer);
            this.timeoutTimer = null;
        }
        startTimeout() {
            if (this.timeoutTimer) {
                this.cancelTimeout();
            }
            this.ref = this.channel.socket.makeRef();
            this.refEvent = this.channel.replyEventName(this.ref);
            this.channel.on(this.refEvent, (payload) => {
                this.cancelRefEvent();
                this.cancelTimeout();
                this.receivedResp = payload;
                this.matchReceive(payload);
            });
            this.timeoutTimer = setTimeout(() => {
                this.trigger("timeout", {});
            }, this.timeout);
        }
        hasReceived(status) {
            return this.receivedResp && this.receivedResp.status === status;
        }
        trigger(status, response) {
            this.channel.trigger(this.refEvent, { status, response });
        }
    };
    var Timer = class {
        constructor(callback, timerCalc) {
            this.callback = callback;
            this.timerCalc = timerCalc;
            this.timer = null;
            this.tries = 0;
        }
        reset() {
            this.tries = 0;
            clearTimeout(this.timer);
        }
        scheduleTimeout() {
            clearTimeout(this.timer);
            this.timer = setTimeout(() => {
                this.tries = this.tries + 1;
                this.callback();
            }, this.timerCalc(this.tries + 1));
        }
    };
    var Channel = class {
        constructor(topic, params, socket) {
            this.state = CHANNEL_STATES.closed;
            this.topic = topic;
            this.params = closure(params || {});
            this.socket = socket;
            this.bindings = [];
            this.bindingRef = 0;
            this.timeout = this.socket.timeout;
            this.joinedOnce = false;
            this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
            this.pushBuffer = [];
            this.stateChangeRefs = [];
            this.rejoinTimer = new Timer(() => {
                if (this.socket.isConnected()) {
                    this.rejoin();
                }
            }, this.socket.rejoinAfterMs);
            this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
            this.stateChangeRefs.push(this.socket.onOpen(() => {
                this.rejoinTimer.reset();
                if (this.isErrored()) {
                    this.rejoin();
                }
            }));
            this.joinPush.receive("ok", () => {
                this.state = CHANNEL_STATES.joined;
                this.rejoinTimer.reset();
                this.pushBuffer.forEach((pushEvent) => pushEvent.send());
                this.pushBuffer = [];
            });
            this.joinPush.receive("error", () => {
                this.state = CHANNEL_STATES.errored;
                if (this.socket.isConnected()) {
                    this.rejoinTimer.scheduleTimeout();
                }
            });
            this.onClose(() => {
                this.rejoinTimer.reset();
                if (this.socket.hasLogger())
                    this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
                this.state = CHANNEL_STATES.closed;
                this.socket.remove(this);
            });
            this.onError((reason) => {
                if (this.socket.hasLogger())
                    this.socket.log("channel", `error ${this.topic}`, reason);
                if (this.isJoining()) {
                    this.joinPush.reset();
                }
                this.state = CHANNEL_STATES.errored;
                if (this.socket.isConnected()) {
                    this.rejoinTimer.scheduleTimeout();
                }
            });
            this.joinPush.receive("timeout", () => {
                if (this.socket.hasLogger())
                    this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
                let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
                leavePush.send();
                this.state = CHANNEL_STATES.errored;
                this.joinPush.reset();
                if (this.socket.isConnected()) {
                    this.rejoinTimer.scheduleTimeout();
                }
            });
            this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
                this.trigger(this.replyEventName(ref), payload);
            });
        }
        join(timeout = this.timeout) {
            if (this.joinedOnce) {
                throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
            } else {
                this.timeout = timeout;
                this.joinedOnce = true;
                this.rejoin();
                return this.joinPush;
            }
        }
        onClose(callback) {
            this.on(CHANNEL_EVENTS.close, callback);
        }
        onError(callback) {
            return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
        }
        on(event, callback) {
            let ref = this.bindingRef++;
            this.bindings.push({ event, ref, callback });
            return ref;
        }
        off(event, ref) {
            this.bindings = this.bindings.filter((bind3) => {
                return !(bind3.event === event && (typeof ref === "undefined" || ref === bind3.ref));
            });
        }
        canPush() {
            return this.socket.isConnected() && this.isJoined();
        }
        push(event, payload, timeout = this.timeout) {
            payload = payload || {};
            if (!this.joinedOnce) {
                throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
            }
            let pushEvent = new Push(this, event, function() {
                return payload;
            }, timeout);
            if (this.canPush()) {
                pushEvent.send();
            } else {
                pushEvent.startTimeout();
                this.pushBuffer.push(pushEvent);
            }
            return pushEvent;
        }
        leave(timeout = this.timeout) {
            this.rejoinTimer.reset();
            this.joinPush.cancelTimeout();
            this.state = CHANNEL_STATES.leaving;
            let onClose = () => {
                if (this.socket.hasLogger())
                    this.socket.log("channel", `leave ${this.topic}`);
                this.trigger(CHANNEL_EVENTS.close, "leave");
            };
            let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
            leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
            leavePush.send();
            if (!this.canPush()) {
                leavePush.trigger("ok", {});
            }
            return leavePush;
        }
        onMessage(_event, payload, _ref) {
            return payload;
        }
        isMember(topic, event, payload, joinRef) {
            if (this.topic !== topic) {
                return false;
            }
            if (joinRef && joinRef !== this.joinRef()) {
                if (this.socket.hasLogger())
                    this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
                return false;
            } else {
                return true;
            }
        }
        joinRef() {
            return this.joinPush.ref;
        }
        rejoin(timeout = this.timeout) {
            if (this.isLeaving()) {
                return;
            }
            this.socket.leaveOpenTopic(this.topic);
            this.state = CHANNEL_STATES.joining;
            this.joinPush.resend(timeout);
        }
        trigger(event, payload, ref, joinRef) {
            let handledPayload = this.onMessage(event, payload, ref, joinRef);
            if (payload && !handledPayload) {
                throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
            }
            let eventBindings = this.bindings.filter((bind3) => bind3.event === event);
            for (let i = 0; i < eventBindings.length; i++) {
                let bind3 = eventBindings[i];
                bind3.callback(handledPayload, ref, joinRef || this.joinRef());
            }
        }
        replyEventName(ref) {
            return `chan_reply_${ref}`;
        }
        isClosed() {
            return this.state === CHANNEL_STATES.closed;
        }
        isErrored() {
            return this.state === CHANNEL_STATES.errored;
        }
        isJoined() {
            return this.state === CHANNEL_STATES.joined;
        }
        isJoining() {
            return this.state === CHANNEL_STATES.joining;
        }
        isLeaving() {
            return this.state === CHANNEL_STATES.leaving;
        }
    };
    var Ajax = class {
        static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
            if (global.XDomainRequest) {
                let req = new global.XDomainRequest();
                this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
            } else {
                let req = new global.XMLHttpRequest();
                this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
            }
        }
        static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
            req.timeout = timeout;
            req.open(method, endPoint);
            req.onload = () => {
                let response = this.parseJSON(req.responseText);
                callback && callback(response);
            };
            if (ontimeout) {
                req.ontimeout = ontimeout;
            }
            req.onprogress = () => {};
            req.send(body);
        }
        static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
            req.open(method, endPoint, true);
            req.timeout = timeout;
            req.setRequestHeader("Content-Type", accept);
            req.onerror = () => {
                callback && callback(null);
            };
            req.onreadystatechange = () => {
                if (req.readyState === XHR_STATES.complete && callback) {
                    let response = this.parseJSON(req.responseText);
                    callback(response);
                }
            };
            if (ontimeout) {
                req.ontimeout = ontimeout;
            }
            req.send(body);
        }
        static parseJSON(resp) {
            if (!resp || resp === "") {
                return null;
            }
            try {
                return JSON.parse(resp);
            } catch (e) {
                console && console.log("failed to parse JSON response", resp);
                return null;
            }
        }
        static serialize(obj, parentKey) {
            let queryStr = [];
            for (var key in obj) {
                if (!Object.prototype.hasOwnProperty.call(obj, key)) {
                    continue;
                }
                let paramKey = parentKey ? `${parentKey}[${key}]` : key;
                let paramVal = obj[key];
                if (typeof paramVal === "object") {
                    queryStr.push(this.serialize(paramVal, paramKey));
                } else {
                    queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
                }
            }
            return queryStr.join("&");
        }
        static appendParams(url, params) {
            if (Object.keys(params).length === 0) {
                return url;
            }
            let prefix2 = url.match(/\?/) ? "&" : "?";
            return `${url}${prefix2}${this.serialize(params)}`;
        }
    };
    var LongPoll = class {
        constructor(endPoint) {
            this.endPoint = null;
            this.token = null;
            this.skipHeartbeat = true;
            this.onopen = function() {};
            this.onerror = function() {};
            this.onmessage = function() {};
            this.onclose = function() {};
            this.pollEndpoint = this.normalizeEndpoint(endPoint);
            this.readyState = SOCKET_STATES.connecting;
            this.poll();
        }
        normalizeEndpoint(endPoint) {
            return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
        }
        endpointURL() {
            return Ajax.appendParams(this.pollEndpoint, { token: this.token });
        }
        closeAndRetry(code, reason, wasClean) {
            this.close(code, reason, wasClean);
            this.readyState = SOCKET_STATES.connecting;
        }
        ontimeout() {
            this.onerror("timeout");
            this.closeAndRetry(1005, "timeout", false);
        }
        poll() {
            if (!(this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting)) {
                return;
            }
            Ajax.request("GET", this.endpointURL(), "application/json", null, this.timeout, this.ontimeout.bind(this), (resp) => {
                if (resp) {
                    var { status, token, messages } = resp;
                    this.token = token;
                } else {
                    status = 0;
                }
                switch (status) {
                    case 200:
                        messages.forEach((msg) => {
                            setTimeout(() => {
                                this.onmessage({ data: msg });
                            }, 0);
                        });
                        this.poll();
                        break;
                    case 204:
                        this.poll();
                        break;
                    case 410:
                        this.readyState = SOCKET_STATES.open;
                        this.onopen({});
                        this.poll();
                        break;
                    case 403:
                        this.onerror(403);
                        this.close(1008, "forbidden", false);
                        break;
                    case 0:
                    case 500:
                        this.onerror(500);
                        this.closeAndRetry(1011, "internal server error", 500);
                        break;
                    default:
                        throw new Error(`unhandled poll status ${status}`);
                }
            });
        }
        send(body) {
            Ajax.request("POST", this.endpointURL(), "application/json", body, this.timeout, this.onerror.bind(this, "timeout"), (resp) => {
                if (!resp || resp.status !== 200) {
                    this.onerror(resp && resp.status);
                    this.closeAndRetry(1011, "internal server error", false);
                }
            });
        }
        close(code, reason, wasClean) {
            this.readyState = SOCKET_STATES.closed;
            let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
            if (typeof CloseEvent !== "undefined") {
                this.onclose(new CloseEvent("close", opts));
            } else {
                this.onclose(opts);
            }
        }
    };
    var serializer_default = {
        HEADER_LENGTH: 1,
        META_LENGTH: 4,
        KINDS: { push: 0, reply: 1, broadcast: 2 },
        encode(msg, callback) {
            if (msg.payload.constructor === ArrayBuffer) {
                return callback(this.binaryEncode(msg));
            } else {
                let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
                return callback(JSON.stringify(payload));
            }
        },
        decode(rawPayload, callback) {
            if (rawPayload.constructor === ArrayBuffer) {
                return callback(this.binaryDecode(rawPayload));
            } else {
                let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
                return callback({ join_ref, ref, topic, event, payload });
            }
        },
        binaryEncode(message) {
            let { join_ref, ref, event, topic, payload } = message;
            let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
            let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
            let view = new DataView(header);
            let offset = 0;
            view.setUint8(offset++, this.KINDS.push);
            view.setUint8(offset++, join_ref.length);
            view.setUint8(offset++, ref.length);
            view.setUint8(offset++, topic.length);
            view.setUint8(offset++, event.length);
            Array.from(join_ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
            Array.from(ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
            Array.from(topic, (char) => view.setUint8(offset++, char.charCodeAt(0)));
            Array.from(event, (char) => view.setUint8(offset++, char.charCodeAt(0)));
            var combined = new Uint8Array(header.byteLength + payload.byteLength);
            combined.set(new Uint8Array(header), 0);
            combined.set(new Uint8Array(payload), header.byteLength);
            return combined.buffer;
        },
        binaryDecode(buffer) {
            let view = new DataView(buffer);
            let kind = view.getUint8(0);
            let decoder = new TextDecoder();
            switch (kind) {
                case this.KINDS.push:
                    return this.decodePush(buffer, view, decoder);
                case this.KINDS.reply:
                    return this.decodeReply(buffer, view, decoder);
                case this.KINDS.broadcast:
                    return this.decodeBroadcast(buffer, view, decoder);
            }
        },
        decodePush(buffer, view, decoder) {
            let joinRefSize = view.getUint8(1);
            let topicSize = view.getUint8(2);
            let eventSize = view.getUint8(3);
            let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;
            let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
            offset = offset + joinRefSize;
            let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
            offset = offset + topicSize;
            let event = decoder.decode(buffer.slice(offset, offset + eventSize));
            offset = offset + eventSize;
            let data2 = buffer.slice(offset, buffer.byteLength);
            return { join_ref: joinRef, ref: null, topic, event, payload: data2 };
        },
        decodeReply(buffer, view, decoder) {
            let joinRefSize = view.getUint8(1);
            let refSize = view.getUint8(2);
            let topicSize = view.getUint8(3);
            let eventSize = view.getUint8(4);
            let offset = this.HEADER_LENGTH + this.META_LENGTH;
            let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
            offset = offset + joinRefSize;
            let ref = decoder.decode(buffer.slice(offset, offset + refSize));
            offset = offset + refSize;
            let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
            offset = offset + topicSize;
            let event = decoder.decode(buffer.slice(offset, offset + eventSize));
            offset = offset + eventSize;
            let data2 = buffer.slice(offset, buffer.byteLength);
            let payload = { status: event, response: data2 };
            return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
        },
        decodeBroadcast(buffer, view, decoder) {
            let topicSize = view.getUint8(1);
            let eventSize = view.getUint8(2);
            let offset = this.HEADER_LENGTH + 2;
            let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
            offset = offset + topicSize;
            let event = decoder.decode(buffer.slice(offset, offset + eventSize));
            offset = offset + eventSize;
            let data2 = buffer.slice(offset, buffer.byteLength);
            return { join_ref: null, ref: null, topic, event, payload: data2 };
        }
    };
    var Socket = class {
        constructor(endPoint, opts = {}) {
            this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
            this.channels = [];
            this.sendBuffer = [];
            this.ref = 0;
            this.timeout = opts.timeout || DEFAULT_TIMEOUT;
            this.transport = opts.transport || global.WebSocket || LongPoll;
            this.establishedConnections = 0;
            this.defaultEncoder = serializer_default.encode.bind(serializer_default);
            this.defaultDecoder = serializer_default.decode.bind(serializer_default);
            this.closeWasClean = false;
            this.binaryType = opts.binaryType || "arraybuffer";
            this.connectClock = 1;
            if (this.transport !== LongPoll) {
                this.encode = opts.encode || this.defaultEncoder;
                this.decode = opts.decode || this.defaultDecoder;
            } else {
                this.encode = this.defaultEncoder;
                this.decode = this.defaultDecoder;
            }
            let awaitingConnectionOnPageShow = null;
            if (phxWindow && phxWindow.addEventListener) {
                phxWindow.addEventListener("pagehide", (_e) => {
                    if (this.conn) {
                        this.disconnect();
                        awaitingConnectionOnPageShow = this.connectClock;
                    }
                });
                phxWindow.addEventListener("pageshow", (_e) => {
                    if (awaitingConnectionOnPageShow === this.connectClock) {
                        awaitingConnectionOnPageShow = null;
                        this.connect();
                    }
                });
            }
            this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
            this.rejoinAfterMs = (tries) => {
                if (opts.rejoinAfterMs) {
                    return opts.rejoinAfterMs(tries);
                } else {
                    return [1e3, 2e3, 5e3][tries - 1] || 1e4;
                }
            };
            this.reconnectAfterMs = (tries) => {
                if (opts.reconnectAfterMs) {
                    return opts.reconnectAfterMs(tries);
                } else {
                    return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
                }
            };
            this.logger = opts.logger || null;
            this.longpollerTimeout = opts.longpollerTimeout || 2e4;
            this.params = closure(opts.params || {});
            this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
            this.vsn = opts.vsn || DEFAULT_VSN;
            this.heartbeatTimer = null;
            this.pendingHeartbeatRef = null;
            this.reconnectTimer = new Timer(() => {
                this.teardown(() => this.connect());
            }, this.reconnectAfterMs);
        }
        replaceTransport(newTransport) {
            this.disconnect();
            this.transport = newTransport;
        }
        protocol() {
            return location.protocol.match(/^https/) ? "wss" : "ws";
        }
        endPointURL() {
            let uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params()), { vsn: this.vsn });
            if (uri.charAt(0) !== "/") {
                return uri;
            }
            if (uri.charAt(1) === "/") {
                return `${this.protocol()}:${uri}`;
            }
            return `${this.protocol()}://${location.host}${uri}`;
        }
        disconnect(callback, code, reason) {
            this.connectClock++;
            this.closeWasClean = true;
            this.reconnectTimer.reset();
            this.teardown(callback, code, reason);
        }
        connect(params) {
            this.connectClock++;
            if (params) {
                console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
                this.params = closure(params);
            }
            if (this.conn) {
                return;
            }
            this.closeWasClean = false;
            this.conn = new this.transport(this.endPointURL());
            this.conn.binaryType = this.binaryType;
            this.conn.timeout = this.longpollerTimeout;
            this.conn.onopen = () => this.onConnOpen();
            this.conn.onerror = (error2) => this.onConnError(error2);
            this.conn.onmessage = (event) => this.onConnMessage(event);
            this.conn.onclose = (event) => this.onConnClose(event);
        }
        log(kind, msg, data2) {
            this.logger(kind, msg, data2);
        }
        hasLogger() {
            return this.logger !== null;
        }
        onOpen(callback) {
            let ref = this.makeRef();
            this.stateChangeCallbacks.open.push([ref, callback]);
            return ref;
        }
        onClose(callback) {
            let ref = this.makeRef();
            this.stateChangeCallbacks.close.push([ref, callback]);
            return ref;
        }
        onError(callback) {
            let ref = this.makeRef();
            this.stateChangeCallbacks.error.push([ref, callback]);
            return ref;
        }
        onMessage(callback) {
            let ref = this.makeRef();
            this.stateChangeCallbacks.message.push([ref, callback]);
            return ref;
        }
        onConnOpen() {
            if (this.hasLogger())
                this.log("transport", `connected to ${this.endPointURL()}`);
            this.closeWasClean = false;
            this.establishedConnections++;
            this.flushSendBuffer();
            this.reconnectTimer.reset();
            this.resetHeartbeat();
            this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
        }
        heartbeatTimeout() {
            if (this.pendingHeartbeatRef) {
                this.pendingHeartbeatRef = null;
                if (this.hasLogger()) {
                    this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
                }
                this.abnormalClose("heartbeat timeout");
            }
        }
        resetHeartbeat() {
            if (this.conn && this.conn.skipHeartbeat) {
                return;
            }
            this.pendingHeartbeatRef = null;
            clearTimeout(this.heartbeatTimer);
            setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        teardown(callback, code, reason) {
            if (!this.conn) {
                return callback && callback();
            }
            this.waitForBufferDone(() => {
                if (this.conn) {
                    if (code) {
                        this.conn.close(code, reason || "");
                    } else {
                        this.conn.close();
                    }
                }
                this.waitForSocketClosed(() => {
                    if (this.conn) {
                        this.conn.onclose = function() {};
                        this.conn = null;
                    }
                    callback && callback();
                });
            });
        }
        waitForBufferDone(callback, tries = 1) {
            if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
                callback();
                return;
            }
            setTimeout(() => {
                this.waitForBufferDone(callback, tries + 1);
            }, 150 * tries);
        }
        waitForSocketClosed(callback, tries = 1) {
            if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
                callback();
                return;
            }
            setTimeout(() => {
                this.waitForSocketClosed(callback, tries + 1);
            }, 150 * tries);
        }
        onConnClose(event) {
            let closeCode = event && event.code;
            if (this.hasLogger())
                this.log("transport", "close", event);
            this.triggerChanError();
            clearTimeout(this.heartbeatTimer);
            if (!this.closeWasClean && closeCode !== 1e3) {
                this.reconnectTimer.scheduleTimeout();
            }
            this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
        }
        onConnError(error2) {
            if (this.hasLogger())
                this.log("transport", error2);
            let transportBefore = this.transport;
            let establishedBefore = this.establishedConnections;
            this.stateChangeCallbacks.error.forEach(([, callback]) => {
                callback(error2, transportBefore, establishedBefore);
            });
            if (transportBefore === this.transport || establishedBefore > 0) {
                this.triggerChanError();
            }
        }
        triggerChanError() {
            this.channels.forEach((channel) => {
                if (!(channel.isErrored() || channel.isLeaving() || channel.isClosed())) {
                    channel.trigger(CHANNEL_EVENTS.error);
                }
            });
        }
        connectionState() {
            switch (this.conn && this.conn.readyState) {
                case SOCKET_STATES.connecting:
                    return "connecting";
                case SOCKET_STATES.open:
                    return "open";
                case SOCKET_STATES.closing:
                    return "closing";
                default:
                    return "closed";
            }
        }
        isConnected() {
            return this.connectionState() === "open";
        }
        remove(channel) {
            this.off(channel.stateChangeRefs);
            this.channels = this.channels.filter((c) => c.joinRef() !== channel.joinRef());
        }
        off(refs) {
            for (let key in this.stateChangeCallbacks) {
                this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {
                    return refs.indexOf(ref) === -1;
                });
            }
        }
        channel(topic, chanParams = {}) {
            let chan = new Channel(topic, chanParams, this);
            this.channels.push(chan);
            return chan;
        }
        push(data2) {
            if (this.hasLogger()) {
                let { topic, event, payload, ref, join_ref } = data2;
                this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
            }
            if (this.isConnected()) {
                this.encode(data2, (result) => this.conn.send(result));
            } else {
                this.sendBuffer.push(() => this.encode(data2, (result) => this.conn.send(result)));
            }
        }
        makeRef() {
            let newRef = this.ref + 1;
            if (newRef === this.ref) {
                this.ref = 0;
            } else {
                this.ref = newRef;
            }
            return this.ref.toString();
        }
        sendHeartbeat() {
            if (this.pendingHeartbeatRef && !this.isConnected()) {
                return;
            }
            this.pendingHeartbeatRef = this.makeRef();
            this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
            this.heartbeatTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
        }
        abnormalClose(reason) {
            this.closeWasClean = false;
            if (this.isConnected()) {
                this.conn.close(WS_CLOSE_NORMAL, reason);
            }
        }
        flushSendBuffer() {
            if (this.isConnected() && this.sendBuffer.length > 0) {
                this.sendBuffer.forEach((callback) => callback());
                this.sendBuffer = [];
            }
        }
        onConnMessage(rawMessage) {
            this.decode(rawMessage.data, (msg) => {
                let { topic, event, payload, ref, join_ref } = msg;
                if (ref && ref === this.pendingHeartbeatRef) {
                    clearTimeout(this.heartbeatTimer);
                    this.pendingHeartbeatRef = null;
                    setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
                }
                if (this.hasLogger())
                    this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
                for (let i = 0; i < this.channels.length; i++) {
                    const channel = this.channels[i];
                    if (!channel.isMember(topic, event, payload, join_ref)) {
                        continue;
                    }
                    channel.trigger(event, payload, ref, join_ref);
                }
                for (let i = 0; i < this.stateChangeCallbacks.message.length; i++) {
                    let [, callback] = this.stateChangeCallbacks.message[i];
                    callback(msg);
                }
            });
        }
        leaveOpenTopic(topic) {
            let dupChannel = this.channels.find((c) => c.topic === topic && (c.isJoined() || c.isJoining()));
            if (dupChannel) {
                if (this.hasLogger())
                    this.log("transport", `leaving duplicate topic "${topic}"`);
                dupChannel.leave();
            }
        }
    };

    // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
    var CONSECUTIVE_RELOADS = "consecutive-reloads";
    var MAX_RELOADS = 10;
    var RELOAD_JITTER_MIN = 1e3;
    var RELOAD_JITTER_MAX = 3e3;
    var FAILSAFE_JITTER = 3e4;
    var PHX_EVENT_CLASSES = [
        "phx-click-loading",
        "phx-change-loading",
        "phx-submit-loading",
        "phx-keydown-loading",
        "phx-keyup-loading",
        "phx-blur-loading",
        "phx-focus-loading"
    ];
    var PHX_COMPONENT = "data-phx-component";
    var PHX_LIVE_LINK = "data-phx-link";
    var PHX_TRACK_STATIC = "track-static";
    var PHX_LINK_STATE = "data-phx-link-state";
    var PHX_REF = "data-phx-ref";
    var PHX_REF_SRC = "data-phx-ref-src";
    var PHX_TRACK_UPLOADS = "track-uploads";
    var PHX_UPLOAD_REF = "data-phx-upload-ref";
    var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
    var PHX_DONE_REFS = "data-phx-done-refs";
    var PHX_DROP_TARGET = "drop-target";
    var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
    var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
    var PHX_SKIP = "data-phx-skip";
    var PHX_PRUNE = "data-phx-prune";
    var PHX_PAGE_LOADING = "page-loading";
    var PHX_CONNECTED_CLASS = "phx-connected";
    var PHX_DISCONNECTED_CLASS = "phx-loading";
    var PHX_NO_FEEDBACK_CLASS = "phx-no-feedback";
    var PHX_ERROR_CLASS = "phx-error";
    var PHX_PARENT_ID = "data-phx-parent-id";
    var PHX_MAIN = "data-phx-main";
    var PHX_ROOT_ID = "data-phx-root-id";
    var PHX_TRIGGER_ACTION = "trigger-action";
    var PHX_FEEDBACK_FOR = "feedback-for";
    var PHX_HAS_FOCUSED = "phx-has-focused";
    var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
    var CHECKABLE_INPUTS = ["checkbox", "radio"];
    var PHX_HAS_SUBMITTED = "phx-has-submitted";
    var PHX_SESSION = "data-phx-session";
    var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
    var PHX_STICKY = "data-phx-sticky";
    var PHX_STATIC = "data-phx-static";
    var PHX_READONLY = "data-phx-readonly";
    var PHX_DISABLED = "data-phx-disabled";
    var PHX_DISABLE_WITH = "disable-with";
    var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
    var PHX_HOOK = "hook";
    var PHX_DEBOUNCE = "debounce";
    var PHX_THROTTLE = "throttle";
    var PHX_UPDATE = "update";
    var PHX_KEY = "key";
    var PHX_PRIVATE = "phxPrivate";
    var PHX_AUTO_RECOVER = "auto-recover";
    var PHX_LV_DEBUG = "phx:live-socket:debug";
    var PHX_LV_PROFILE = "phx:live-socket:profiling";
    var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
    var PHX_PROGRESS = "progress";
    var LOADER_TIMEOUT = 1;
    var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
    var BINDING_PREFIX = "phx-";
    var PUSH_TIMEOUT = 3e4;
    var DEBOUNCE_TRIGGER = "debounce-trigger";
    var THROTTLED = "throttled";
    var DEBOUNCE_PREV_KEY = "debounce-prev-key";
    var DEFAULTS = {
        debounce: 300,
        throttle: 300
    };
    var DYNAMICS = "d";
    var STATIC = "s";
    var COMPONENTS = "c";
    var EVENTS = "e";
    var REPLY = "r";
    var TITLE = "t";
    var TEMPLATES = "p";
    var EntryUploader = class {
        constructor(entry, chunkSize, liveSocket2) {
            this.liveSocket = liveSocket2;
            this.entry = entry;
            this.offset = 0;
            this.chunkSize = chunkSize;
            this.chunkTimer = null;
            this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
        }
        error(reason) {
            clearTimeout(this.chunkTimer);
            this.uploadChannel.leave();
            this.entry.error(reason);
        }
        upload() {
            this.uploadChannel.onError((reason) => this.error(reason));
            this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
        }
        isDone() {
            return this.offset >= this.entry.file.size;
        }
        readNextChunk() {
            let reader = new window.FileReader();
            let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
            reader.onload = (e) => {
                if (e.target.error === null) {
                    this.offset += e.target.result.byteLength;
                    this.pushChunk(e.target.result);
                } else {
                    return logError("Read error: " + e.target.error);
                }
            };
            reader.readAsArrayBuffer(blob);
        }
        pushChunk(chunk) {
            if (!this.uploadChannel.isJoined()) {
                return;
            }
            this.uploadChannel.push("chunk", chunk).receive("ok", () => {
                this.entry.progress(this.offset / this.entry.file.size * 100);
                if (!this.isDone()) {
                    this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
                }
            });
        }
    };
    var logError = (msg, obj) => console.error && console.error(msg, obj);
    var isCid = (cid) => {
        let type = typeof cid;
        return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
    };

    function detectDuplicateIds() {
        let ids = /* @__PURE__ */ new Set();
        let elems = document.querySelectorAll("*[id]");
        for (let i = 0, len = elems.length; i < len; i++) {
            if (ids.has(elems[i].id)) {
                console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);
            } else {
                ids.add(elems[i].id);
            }
        }
    }
    var debug = (view, kind, msg, obj) => {
        if (view.liveSocket.isDebugEnabled()) {
            console.log(`${view.id} ${kind}: ${msg} - `, obj);
        }
    };
    var closure2 = (val) => typeof val === "function" ? val : function() {
        return val;
    };
    var clone = (obj) => {
        return JSON.parse(JSON.stringify(obj));
    };
    var closestPhxBinding = (el, binding, borderEl) => {
        do {
            if (el.matches(`[${binding}]`)) {
                return el;
            }
            el = el.parentElement || el.parentNode;
        } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
        return null;
    };
    var isObject = (obj) => {
        return obj !== null && typeof obj === "object" && !(obj instanceof Array);
    };
    var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
    var isEmpty = (obj) => {
        for (let x in obj) {
            return false;
        }
        return true;
    };
    var maybe = (el, callback) => el && callback(el);
    var channelUploader = function(entries, onError, resp, liveSocket2) {
        entries.forEach((entry) => {
            let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
            entryUploader.upload();
        });
    };
    var Browser = {
        canPushState() {
            return typeof history.pushState !== "undefined";
        },
        dropLocal(localStorage2, namespace, subkey) {
            return localStorage2.removeItem(this.localKey(namespace, subkey));
        },
        updateLocal(localStorage2, namespace, subkey, initial, func) {
            let current = this.getLocal(localStorage2, namespace, subkey);
            let key = this.localKey(namespace, subkey);
            let newVal = current === null ? initial : func(current);
            localStorage2.setItem(key, JSON.stringify(newVal));
            return newVal;
        },
        getLocal(localStorage2, namespace, subkey) {
            return JSON.parse(localStorage2.getItem(this.localKey(namespace, subkey)));
        },
        updateCurrentState(callback) {
            if (!this.canPushState()) {
                return;
            }
            history.replaceState(callback(history.state || {}), "", window.location.href);
        },
        pushState(kind, meta, to) {
            if (this.canPushState()) {
                if (to !== window.location.href) {
                    if (meta.type == "redirect" && meta.scroll) {
                        let currentState = history.state || {};
                        currentState.scroll = meta.scroll;
                        history.replaceState(currentState, "", window.location.href);
                    }
                    delete meta.scroll;
                    history[kind + "State"](meta, "", to || null);
                    let hashEl = this.getHashTargetEl(window.location.hash);
                    if (hashEl) {
                        hashEl.scrollIntoView();
                    } else if (meta.type === "redirect") {
                        window.scroll(0, 0);
                    }
                }
            } else {
                this.redirect(to);
            }
        },
        setCookie(name, value) {
            document.cookie = `${name}=${value}`;
        },
        getCookie(name) {
            return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), "$1");
        },
        redirect(toURL, flash) {
            if (flash) {
                Browser.setCookie("__phoenix_flash__", flash + "; max-age=60000; path=/");
            }
            window.location = toURL;
        },
        localKey(namespace, subkey) {
            return `${namespace}-${subkey}`;
        },
        getHashTargetEl(maybeHash) {
            let hash = maybeHash.toString().substring(1);
            if (hash === "") {
                return;
            }
            return document.getElementById(hash) || document.querySelector(`a[name="${hash}"]`);
        }
    };
    var browser_default = Browser;
    var DOM = {
        byId(id) {
            return document.getElementById(id) || logError(`no id found for ${id}`);
        },
        removeClass(el, className) {
            el.classList.remove(className);
            if (el.classList.length === 0) {
                el.removeAttribute("class");
            }
        },
        all(node, query, callback) {
            if (!node) {
                return [];
            }
            let array = Array.from(node.querySelectorAll(query));
            return callback ? array.forEach(callback) : array;
        },
        childNodeLength(html) {
            let template = document.createElement("template");
            template.innerHTML = html;
            return template.content.childElementCount;
        },
        isUploadInput(el) {
            return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
        },
        findUploadInputs(node) {
            return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`);
        },
        findComponentNodeList(node, cid) {
            return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
        },
        isPhxDestroyed(node) {
            return node.id && DOM.private(node, "destroyed") ? true : false;
        },
        markPhxChildDestroyed(el) {
            if (this.isPhxChild(el)) {
                el.setAttribute(PHX_SESSION, "");
            }
            this.putPrivate(el, "destroyed", true);
        },
        findPhxChildrenInFragment(html, parentId) {
            let template = document.createElement("template");
            template.innerHTML = html;
            return this.findPhxChildren(template.content, parentId);
        },
        isIgnored(el, phxUpdate) {
            return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
        },
        isPhxUpdate(el, phxUpdate, updateTypes) {
            return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
        },
        findPhxSticky(el) {
            return this.all(el, `[${PHX_STICKY}]`);
        },
        findPhxChildren(el, parentId) {
            return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
        },
        findParentCIDs(node, cids) {
            let initial = new Set(cids);
            return cids.reduce((acc, cid) => {
                let selector = `[${PHX_COMPONENT}="${cid}"] [${PHX_COMPONENT}]`;
                this.filterWithinSameLiveView(this.all(node, selector), node).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => acc.delete(childCID));
                return acc;
            }, initial);
        },
        filterWithinSameLiveView(nodes, parent) {
            if (parent.querySelector(PHX_VIEW_SELECTOR)) {
                return nodes.filter((el) => this.withinSameLiveView(el, parent));
            } else {
                return nodes;
            }
        },
        withinSameLiveView(node, parent) {
            while (node = node.parentNode) {
                if (node.isSameNode(parent)) {
                    return true;
                }
                if (node.getAttribute(PHX_SESSION) !== null) {
                    return false;
                }
            }
        },
        private(el, key) {
            return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];
        },
        deletePrivate(el, key) {
            el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];
        },
        putPrivate(el, key, value) {
            if (!el[PHX_PRIVATE]) {
                el[PHX_PRIVATE] = {};
            }
            el[PHX_PRIVATE][key] = value;
        },
        updatePrivate(el, key, defaultVal, updateFunc) {
            let existing = this.private(el, key);
            if (existing === void 0) {
                this.putPrivate(el, key, updateFunc(defaultVal));
            } else {
                this.putPrivate(el, key, updateFunc(existing));
            }
        },
        copyPrivates(target, source) {
            if (source[PHX_PRIVATE]) {
                target[PHX_PRIVATE] = source[PHX_PRIVATE];
            }
        },
        putTitle(str) {
            let titleEl = document.querySelector("title");
            let { prefix: prefix2, suffix } = titleEl.dataset;
            document.title = `${prefix2 || ""}${str}${suffix || ""}`;
        },
        debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, callback) {
            let debounce2 = el.getAttribute(phxDebounce);
            let throttle2 = el.getAttribute(phxThrottle);
            if (debounce2 === "") {
                debounce2 = defaultDebounce;
            }
            if (throttle2 === "") {
                throttle2 = defaultThrottle;
            }
            let value = debounce2 || throttle2;
            switch (value) {
                case null:
                    return callback();
                case "blur":
                    if (this.once(el, "debounce-blur")) {
                        el.addEventListener("blur", () => callback());
                    }
                    return;
                default:
                    let timeout = parseInt(value);
                    let trigger2 = () => throttle2 ? this.deletePrivate(el, THROTTLED) : callback();
                    let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger2);
                    if (isNaN(timeout)) {
                        return logError(`invalid throttle/debounce value: ${value}`);
                    }
                    if (throttle2) {
                        let newKeyDown = false;
                        if (event.type === "keydown") {
                            let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
                            this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
                            newKeyDown = prevKey !== event.key;
                        }
                        if (!newKeyDown && this.private(el, THROTTLED)) {
                            return false;
                        } else {
                            callback();
                            this.putPrivate(el, THROTTLED, true);
                            setTimeout(() => this.triggerCycle(el, DEBOUNCE_TRIGGER), timeout);
                        }
                    } else {
                        setTimeout(() => this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle), timeout);
                    }
                    let form = el.form;
                    if (form && this.once(form, "bind-debounce")) {
                        form.addEventListener("submit", () => {
                            Array.from(new FormData(form).entries(), ([name]) => {
                                let input = form.querySelector(`[name="${name}"]`);
                                this.incCycle(input, DEBOUNCE_TRIGGER);
                                this.deletePrivate(input, THROTTLED);
                            });
                        });
                    }
                    if (this.once(el, "bind-debounce")) {
                        el.addEventListener("blur", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));
                    }
            }
        },
        triggerCycle(el, key, currentCycle) {
            let [cycle, trigger2] = this.private(el, key);
            if (!currentCycle) {
                currentCycle = cycle;
            }
            if (currentCycle === cycle) {
                this.incCycle(el, key);
                trigger2();
            }
        },
        once(el, key) {
            if (this.private(el, key) === true) {
                return false;
            }
            this.putPrivate(el, key, true);
            return true;
        },
        incCycle(el, key, trigger2 = function() {}) {
            let [currentCycle] = this.private(el, key) || [0, trigger2];
            currentCycle++;
            this.putPrivate(el, key, [currentCycle, trigger2]);
            return currentCycle;
        },
        discardError(container, el, phxFeedbackFor) {
            let field = el.getAttribute && el.getAttribute(phxFeedbackFor);
            let input = field && container.querySelector(`[id="${field}"], [name="${field}"]`);
            if (!input) {
                return;
            }
            if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input.form, PHX_HAS_SUBMITTED))) {
                el.classList.add(PHX_NO_FEEDBACK_CLASS);
            }
        },
        showError(inputEl, phxFeedbackFor) {
            if (inputEl.id || inputEl.name) {
                this.all(inputEl.form, `[${phxFeedbackFor}="${inputEl.id}"], [${phxFeedbackFor}="${inputEl.name}"]`, (el) => {
                    this.removeClass(el, PHX_NO_FEEDBACK_CLASS);
                });
            }
        },
        isPhxChild(node) {
            return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
        },
        isPhxSticky(node) {
            return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
        },
        firstPhxChild(el) {
            return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
        },
        dispatchEvent(target, name, opts = {}) {
            let bubbles = opts.bubbles === void 0 ? true : !!opts.bubbles;
            let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
            let event = name === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name, eventOpts);
            target.dispatchEvent(event);
        },
        cloneNode(node, html) {
            if (typeof html === "undefined") {
                return node.cloneNode(true);
            } else {
                let cloned = node.cloneNode(false);
                cloned.innerHTML = html;
                return cloned;
            }
        },
        mergeAttrs(target, source, opts = {}) {
            let exclude = opts.exclude || [];
            let isIgnored = opts.isIgnored;
            let sourceAttrs = source.attributes;
            for (let i = sourceAttrs.length - 1; i >= 0; i--) {
                let name = sourceAttrs[i].name;
                if (exclude.indexOf(name) < 0) {
                    target.setAttribute(name, source.getAttribute(name));
                }
            }
            let targetAttrs = target.attributes;
            for (let i = targetAttrs.length - 1; i >= 0; i--) {
                let name = targetAttrs[i].name;
                if (isIgnored) {
                    if (name.startsWith("data-") && !source.hasAttribute(name)) {
                        target.removeAttribute(name);
                    }
                } else {
                    if (!source.hasAttribute(name)) {
                        target.removeAttribute(name);
                    }
                }
            }
        },
        mergeFocusedInput(target, source) {
            if (!(target instanceof HTMLSelectElement)) {
                DOM.mergeAttrs(target, source, { exclude: ["value"] });
            }
            if (source.readOnly) {
                target.setAttribute("readonly", true);
            } else {
                target.removeAttribute("readonly");
            }
        },
        hasSelectionRange(el) {
            return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
        },
        restoreFocus(focused, selectionStart, selectionEnd) {
            if (!DOM.isTextualInput(focused)) {
                return;
            }
            let wasFocused = focused.matches(":focus");
            if (focused.readOnly) {
                focused.blur();
            }
            if (!wasFocused) {
                focused.focus();
            }
            if (this.hasSelectionRange(focused)) {
                focused.setSelectionRange(selectionStart, selectionEnd);
            }
        },
        isFormInput(el) {
            return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
        },
        syncAttrsToProps(el) {
            if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
                el.checked = el.getAttribute("checked") !== null;
            }
        },
        isTextualInput(el) {
            return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
        },
        isNowTriggerFormExternal(el, phxTriggerExternal) {
            return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
        },
        syncPendingRef(fromEl, toEl, disableWith) {
            let ref = fromEl.getAttribute(PHX_REF);
            if (ref === null) {
                return true;
            }
            let refSrc = fromEl.getAttribute(PHX_REF_SRC);
            if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {
                if (DOM.isUploadInput(fromEl)) {
                    DOM.mergeAttrs(fromEl, toEl, { isIgnored: true });
                }
                DOM.putPrivate(fromEl, PHX_REF, toEl);
                return false;
            } else {
                PHX_EVENT_CLASSES.forEach((className) => {
                    fromEl.classList.contains(className) && toEl.classList.add(className);
                });
                toEl.setAttribute(PHX_REF, ref);
                toEl.setAttribute(PHX_REF_SRC, refSrc);
                return true;
            }
        },
        cleanChildNodes(container, phxUpdate) {
            if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
                let toRemove = [];
                container.childNodes.forEach((childNode) => {
                    if (!childNode.id) {
                        let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
                        if (!isEmptyTextNode) {
                            logError(`only HTML element tags with an id are allowed inside containers with phx-update.
  
  removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"
  
  `);
                        }
                        toRemove.push(childNode);
                    }
                });
                toRemove.forEach((childNode) => childNode.remove());
            }
        },
        replaceRootContainer(container, tagName, attrs) {
            let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
            if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
                Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));
                Object.keys(attrs).filter((name) => !retainedAttrs.has(name.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));
                return container;
            } else {
                let newContainer = document.createElement(tagName);
                Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));
                retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));
                newContainer.innerHTML = container.innerHTML;
                container.replaceWith(newContainer);
                return newContainer;
            }
        },
        getSticky(el, name, defaultVal) {
            let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name === existingName);
            if (op) {
                let [_name, _op, stashedResult] = op;
                return stashedResult;
            } else {
                return typeof defaultVal === "function" ? defaultVal() : defaultVal;
            }
        },
        deleteSticky(el, name) {
            this.updatePrivate(el, "sticky", [], (ops) => {
                return ops.filter(([existingName, _]) => existingName !== name);
            });
        },
        putSticky(el, name, op) {
            let stashedResult = op(el);
            this.updatePrivate(el, "sticky", [], (ops) => {
                let existingIndex = ops.findIndex(([existingName]) => name === existingName);
                if (existingIndex >= 0) {
                    ops[existingIndex] = [name, op, stashedResult];
                } else {
                    ops.push([name, op, stashedResult]);
                }
                return ops;
            });
        },
        applyStickyOperations(el) {
            let ops = DOM.private(el, "sticky");
            if (!ops) {
                return;
            }
            ops.forEach(([name, op, _stashed]) => this.putSticky(el, name, op));
        }
    };
    var dom_default = DOM;
    var UploadEntry = class {
        static isActive(fileEl, file) {
            let isNew = file._phxRef === void 0;
            let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
            let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
            return file.size > 0 && (isNew || isActive);
        }
        static isPreflighted(fileEl, file) {
            let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
            let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
            return isPreflighted && this.isActive(fileEl, file);
        }
        constructor(fileEl, file, view) {
            this.ref = LiveUploader.genFileRef(file);
            this.fileEl = fileEl;
            this.file = file;
            this.view = view;
            this.meta = null;
            this._isCancelled = false;
            this._isDone = false;
            this._progress = 0;
            this._lastProgressSent = -1;
            this._onDone = function() {};
            this._onElUpdated = this.onElUpdated.bind(this);
            this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        }
        metadata() {
            return this.meta;
        }
        progress(progress) {
            this._progress = Math.floor(progress);
            if (this._progress > this._lastProgressSent) {
                if (this._progress >= 100) {
                    this._progress = 100;
                    this._lastProgressSent = 100;
                    this._isDone = true;
                    this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
                        LiveUploader.untrackFile(this.fileEl, this.file);
                        this._onDone();
                    });
                } else {
                    this._lastProgressSent = this._progress;
                    this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
                }
            }
        }
        cancel() {
            this._isCancelled = true;
            this._isDone = true;
            this._onDone();
        }
        isDone() {
            return this._isDone;
        }
        error(reason = "failed") {
            this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
            LiveUploader.clearFiles(this.fileEl);
        }
        onDone(callback) {
            this._onDone = () => {
                this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
                callback();
            };
        }
        onElUpdated() {
            let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
            if (activeRefs.indexOf(this.ref) === -1) {
                this.cancel();
            }
        }
        toPreflightPayload() {
            return {
                last_modified: this.file.lastModified,
                name: this.file.name,
                size: this.file.size,
                type: this.file.type,
                ref: this.ref
            };
        }
        uploader(uploaders) {
            if (this.meta.uploader) {
                let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
                return { name: this.meta.uploader, callback };
            } else {
                return { name: "channel", callback: channelUploader };
            }
        }
        zipPostFlight(resp) {
            this.meta = resp.entries[this.ref];
            if (!this.meta) {
                logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
            }
        }
    };
    var liveUploaderFileRef = 0;
    var LiveUploader = class {
        static genFileRef(file) {
            let ref = file._phxRef;
            if (ref !== void 0) {
                return ref;
            } else {
                file._phxRef = (liveUploaderFileRef++).toString();
                return file._phxRef;
            }
        }
        static getEntryDataURL(inputEl, ref, callback) {
            let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);
            callback(URL.createObjectURL(file));
        }
        static hasUploadsInProgress(formEl) {
            let active = 0;
            dom_default.findUploadInputs(formEl).forEach((input) => {
                if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
                    active++;
                }
            });
            return active > 0;
        }
        static serializeUploads(inputEl) {
            let files = this.activeFiles(inputEl);
            let fileData = {};
            files.forEach((file) => {
                let entry = { path: inputEl.name };
                let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
                fileData[uploadRef] = fileData[uploadRef] || [];
                entry.ref = this.genFileRef(file);
                entry.name = file.name || entry.ref;
                entry.type = file.type;
                entry.size = file.size;
                fileData[uploadRef].push(entry);
            });
            return fileData;
        }
        static clearFiles(inputEl) {
            inputEl.value = null;
            inputEl.removeAttribute(PHX_UPLOAD_REF);
            dom_default.putPrivate(inputEl, "files", []);
        }
        static untrackFile(inputEl, file) {
            dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f) => !Object.is(f, file)));
        }
        static trackFiles(inputEl, files) {
            if (inputEl.getAttribute("multiple") !== null) {
                let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f) => Object.is(f, file)));
                dom_default.putPrivate(inputEl, "files", this.activeFiles(inputEl).concat(newFiles));
                inputEl.value = null;
            } else {
                dom_default.putPrivate(inputEl, "files", files);
            }
        }
        static activeFileInputs(formEl) {
            let fileInputs = dom_default.findUploadInputs(formEl);
            return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
        }
        static activeFiles(input) {
            return (dom_default.private(input, "files") || []).filter((f) => UploadEntry.isActive(input, f));
        }
        static inputsAwaitingPreflight(formEl) {
            let fileInputs = dom_default.findUploadInputs(formEl);
            return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
        }
        static filesAwaitingPreflight(input) {
            return this.activeFiles(input).filter((f) => !UploadEntry.isPreflighted(input, f));
        }
        constructor(inputEl, view, onComplete) {
            this.view = view;
            this.onComplete = onComplete;
            this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view));
            this.numEntriesInProgress = this._entries.length;
        }
        entries() {
            return this._entries;
        }
        initAdapterUpload(resp, onError, liveSocket2) {
            this._entries = this._entries.map((entry) => {
                entry.zipPostFlight(resp);
                entry.onDone(() => {
                    this.numEntriesInProgress--;
                    if (this.numEntriesInProgress === 0) {
                        this.onComplete();
                    }
                });
                return entry;
            });
            let groupedEntries = this._entries.reduce((acc, entry) => {
                let { name, callback } = entry.uploader(liveSocket2.uploaders);
                acc[name] = acc[name] || { callback, entries: [] };
                acc[name].entries.push(entry);
                return acc;
            }, {});
            for (let name in groupedEntries) {
                let { callback, entries } = groupedEntries[name];
                callback(entries, onError, resp, liveSocket2);
            }
        }
    };
    var Hooks = {
        LiveFileUpload: {
            activeRefs() {
                return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
            },
            preflightedRefs() {
                return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
            },
            mounted() {
                this.preflightedWas = this.preflightedRefs();
            },
            updated() {
                let newPreflights = this.preflightedRefs();
                if (this.preflightedWas !== newPreflights) {
                    this.preflightedWas = newPreflights;
                    if (newPreflights === "") {
                        this.__view.cancelSubmit(this.el.form);
                    }
                }
                if (this.activeRefs() === "") {
                    this.el.value = null;
                }
                this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
            }
        },
        LiveImgPreview: {
            mounted() {
                this.ref = this.el.getAttribute("data-phx-entry-ref");
                this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
                LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
                    this.url = url;
                    this.el.src = url;
                });
            },
            destroyed() {
                URL.revokeObjectURL(this.url);
            }
        }
    };
    var hooks_default = Hooks;
    var DOMPostMorphRestorer = class {
        constructor(containerBefore, containerAfter, updateType) {
            let idsBefore = /* @__PURE__ */ new Set();
            let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
            let elementsToModify = [];
            Array.from(containerBefore.children).forEach((child) => {
                if (child.id) {
                    idsBefore.add(child.id);
                    if (idsAfter.has(child.id)) {
                        let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
                        elementsToModify.push({ elementId: child.id, previousElementId });
                    }
                }
            });
            this.containerId = containerAfter.id;
            this.updateType = updateType;
            this.elementsToModify = elementsToModify;
            this.elementIdsToAdd = [...idsAfter].filter((id) => !idsBefore.has(id));
        }
        perform() {
            let container = dom_default.byId(this.containerId);
            this.elementsToModify.forEach((elementToModify) => {
                if (elementToModify.previousElementId) {
                    maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
                        maybe(document.getElementById(elementToModify.elementId), (elem) => {
                            let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
                            if (!isInRightPlace) {
                                previousElem.insertAdjacentElement("afterend", elem);
                            }
                        });
                    });
                } else {
                    maybe(document.getElementById(elementToModify.elementId), (elem) => {
                        let isInRightPlace = elem.previousElementSibling == null;
                        if (!isInRightPlace) {
                            container.insertAdjacentElement("afterbegin", elem);
                        }
                    });
                }
            });
            if (this.updateType == "prepend") {
                this.elementIdsToAdd.reverse().forEach((elemId) => {
                    maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
                });
            }
        }
    };
    var DOCUMENT_FRAGMENT_NODE = 11;

    function morphAttrs(fromNode, toNode) {
        var toNodeAttrs = toNode.attributes;
        var attr;
        var attrName;
        var attrNamespaceURI;
        var attrValue;
        var fromValue;
        if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
            return;
        }
        for (var i = toNodeAttrs.length - 1; i >= 0; i--) {
            attr = toNodeAttrs[i];
            attrName = attr.name;
            attrNamespaceURI = attr.namespaceURI;
            attrValue = attr.value;
            if (attrNamespaceURI) {
                attrName = attr.localName || attrName;
                fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
                if (fromValue !== attrValue) {
                    if (attr.prefix === "xmlns") {
                        attrName = attr.name;
                    }
                    fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
                }
            } else {
                fromValue = fromNode.getAttribute(attrName);
                if (fromValue !== attrValue) {
                    fromNode.setAttribute(attrName, attrValue);
                }
            }
        }
        var fromNodeAttrs = fromNode.attributes;
        for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {
            attr = fromNodeAttrs[d];
            attrName = attr.name;
            attrNamespaceURI = attr.namespaceURI;
            if (attrNamespaceURI) {
                attrName = attr.localName || attrName;
                if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
                    fromNode.removeAttributeNS(attrNamespaceURI, attrName);
                }
            } else {
                if (!toNode.hasAttribute(attrName)) {
                    fromNode.removeAttribute(attrName);
                }
            }
        }
    }
    var range;
    var NS_XHTML = "http://www.w3.org/1999/xhtml";
    var doc = typeof document === "undefined" ? void 0 : document;
    var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
    var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();

    function createFragmentFromTemplate(str) {
        var template = doc.createElement("template");
        template.innerHTML = str;
        return template.content.childNodes[0];
    }

    function createFragmentFromRange(str) {
        if (!range) {
            range = doc.createRange();
            range.selectNode(doc.body);
        }
        var fragment = range.createContextualFragment(str);
        return fragment.childNodes[0];
    }

    function createFragmentFromWrap(str) {
        var fragment = doc.createElement("body");
        fragment.innerHTML = str;
        return fragment.childNodes[0];
    }

    function toElement(str) {
        str = str.trim();
        if (HAS_TEMPLATE_SUPPORT) {
            return createFragmentFromTemplate(str);
        } else if (HAS_RANGE_SUPPORT) {
            return createFragmentFromRange(str);
        }
        return createFragmentFromWrap(str);
    }

    function compareNodeNames(fromEl, toEl) {
        var fromNodeName = fromEl.nodeName;
        var toNodeName = toEl.nodeName;
        var fromCodeStart, toCodeStart;
        if (fromNodeName === toNodeName) {
            return true;
        }
        fromCodeStart = fromNodeName.charCodeAt(0);
        toCodeStart = toNodeName.charCodeAt(0);
        if (fromCodeStart <= 90 && toCodeStart >= 97) {
            return fromNodeName === toNodeName.toUpperCase();
        } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
            return toNodeName === fromNodeName.toUpperCase();
        } else {
            return false;
        }
    }

    function createElementNS(name, namespaceURI) {
        return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);
    }

    function moveChildren(fromEl, toEl) {
        var curChild = fromEl.firstChild;
        while (curChild) {
            var nextChild = curChild.nextSibling;
            toEl.appendChild(curChild);
            curChild = nextChild;
        }
        return toEl;
    }

    function syncBooleanAttrProp(fromEl, toEl, name) {
        if (fromEl[name] !== toEl[name]) {
            fromEl[name] = toEl[name];
            if (fromEl[name]) {
                fromEl.setAttribute(name, "");
            } else {
                fromEl.removeAttribute(name);
            }
        }
    }
    var specialElHandlers = {
        OPTION: function(fromEl, toEl) {
            var parentNode = fromEl.parentNode;
            if (parentNode) {
                var parentName = parentNode.nodeName.toUpperCase();
                if (parentName === "OPTGROUP") {
                    parentNode = parentNode.parentNode;
                    parentName = parentNode && parentNode.nodeName.toUpperCase();
                }
                if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
                    if (fromEl.hasAttribute("selected") && !toEl.selected) {
                        fromEl.setAttribute("selected", "selected");
                        fromEl.removeAttribute("selected");
                    }
                    parentNode.selectedIndex = -1;
                }
            }
            syncBooleanAttrProp(fromEl, toEl, "selected");
        },
        INPUT: function(fromEl, toEl) {
            syncBooleanAttrProp(fromEl, toEl, "checked");
            syncBooleanAttrProp(fromEl, toEl, "disabled");
            if (fromEl.value !== toEl.value) {
                fromEl.value = toEl.value;
            }
            if (!toEl.hasAttribute("value")) {
                fromEl.removeAttribute("value");
            }
        },
        TEXTAREA: function(fromEl, toEl) {
            var newValue = toEl.value;
            if (fromEl.value !== newValue) {
                fromEl.value = newValue;
            }
            var firstChild = fromEl.firstChild;
            if (firstChild) {
                var oldValue = firstChild.nodeValue;
                if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
                    return;
                }
                firstChild.nodeValue = newValue;
            }
        },
        SELECT: function(fromEl, toEl) {
            if (!toEl.hasAttribute("multiple")) {
                var selectedIndex = -1;
                var i = 0;
                var curChild = fromEl.firstChild;
                var optgroup;
                var nodeName;
                while (curChild) {
                    nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
                    if (nodeName === "OPTGROUP") {
                        optgroup = curChild;
                        curChild = optgroup.firstChild;
                    } else {
                        if (nodeName === "OPTION") {
                            if (curChild.hasAttribute("selected")) {
                                selectedIndex = i;
                                break;
                            }
                            i++;
                        }
                        curChild = curChild.nextSibling;
                        if (!curChild && optgroup) {
                            curChild = optgroup.nextSibling;
                            optgroup = null;
                        }
                    }
                }
                fromEl.selectedIndex = selectedIndex;
            }
        }
    };
    var ELEMENT_NODE = 1;
    var DOCUMENT_FRAGMENT_NODE$1 = 11;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;

    function noop() {}

    function defaultGetNodeKey(node) {
        if (node) {
            return node.getAttribute && node.getAttribute("id") || node.id;
        }
    }

    function morphdomFactory(morphAttrs2) {
        return function morphdom2(fromNode, toNode, options) {
            if (!options) {
                options = {};
            }
            if (typeof toNode === "string") {
                if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
                    var toNodeHtml = toNode;
                    toNode = doc.createElement("html");
                    toNode.innerHTML = toNodeHtml;
                } else {
                    toNode = toElement(toNode);
                }
            }
            var getNodeKey = options.getNodeKey || defaultGetNodeKey;
            var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
            var onNodeAdded = options.onNodeAdded || noop;
            var onBeforeElUpdated = options.onBeforeElUpdated || noop;
            var onElUpdated = options.onElUpdated || noop;
            var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
            var onNodeDiscarded = options.onNodeDiscarded || noop;
            var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
            var childrenOnly = options.childrenOnly === true;
            var fromNodesLookup = Object.create(null);
            var keyedRemovalList = [];

            function addKeyedRemoval(key) {
                keyedRemovalList.push(key);
            }

            function walkDiscardedChildNodes(node, skipKeyedNodes) {
                if (node.nodeType === ELEMENT_NODE) {
                    var curChild = node.firstChild;
                    while (curChild) {
                        var key = void 0;
                        if (skipKeyedNodes && (key = getNodeKey(curChild))) {
                            addKeyedRemoval(key);
                        } else {
                            onNodeDiscarded(curChild);
                            if (curChild.firstChild) {
                                walkDiscardedChildNodes(curChild, skipKeyedNodes);
                            }
                        }
                        curChild = curChild.nextSibling;
                    }
                }
            }

            function removeNode(node, parentNode, skipKeyedNodes) {
                if (onBeforeNodeDiscarded(node) === false) {
                    return;
                }
                if (parentNode) {
                    parentNode.removeChild(node);
                }
                onNodeDiscarded(node);
                walkDiscardedChildNodes(node, skipKeyedNodes);
            }

            function indexTree(node) {
                if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
                    var curChild = node.firstChild;
                    while (curChild) {
                        var key = getNodeKey(curChild);
                        if (key) {
                            fromNodesLookup[key] = curChild;
                        }
                        indexTree(curChild);
                        curChild = curChild.nextSibling;
                    }
                }
            }
            indexTree(fromNode);

            function handleNodeAdded(el) {
                onNodeAdded(el);
                var curChild = el.firstChild;
                while (curChild) {
                    var nextSibling = curChild.nextSibling;
                    var key = getNodeKey(curChild);
                    if (key) {
                        var unmatchedFromEl = fromNodesLookup[key];
                        if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
                            curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
                            morphEl(unmatchedFromEl, curChild);
                        } else {
                            handleNodeAdded(curChild);
                        }
                    } else {
                        handleNodeAdded(curChild);
                    }
                    curChild = nextSibling;
                }
            }

            function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
                while (curFromNodeChild) {
                    var fromNextSibling = curFromNodeChild.nextSibling;
                    if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
                        addKeyedRemoval(curFromNodeKey);
                    } else {
                        removeNode(curFromNodeChild, fromEl, true);
                    }
                    curFromNodeChild = fromNextSibling;
                }
            }

            function morphEl(fromEl, toEl, childrenOnly2) {
                var toElKey = getNodeKey(toEl);
                if (toElKey) {
                    delete fromNodesLookup[toElKey];
                }
                if (!childrenOnly2) {
                    if (onBeforeElUpdated(fromEl, toEl) === false) {
                        return;
                    }
                    morphAttrs2(fromEl, toEl);
                    onElUpdated(fromEl);
                    if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
                        return;
                    }
                }
                if (fromEl.nodeName !== "TEXTAREA") {
                    morphChildren(fromEl, toEl);
                } else {
                    specialElHandlers.TEXTAREA(fromEl, toEl);
                }
            }

            function morphChildren(fromEl, toEl) {
                var curToNodeChild = toEl.firstChild;
                var curFromNodeChild = fromEl.firstChild;
                var curToNodeKey;
                var curFromNodeKey;
                var fromNextSibling;
                var toNextSibling;
                var matchingFromEl;
                outer:
                    while (curToNodeChild) {
                        toNextSibling = curToNodeChild.nextSibling;
                        curToNodeKey = getNodeKey(curToNodeChild);
                        while (curFromNodeChild) {
                            fromNextSibling = curFromNodeChild.nextSibling;
                            if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                                curToNodeChild = toNextSibling;
                                curFromNodeChild = fromNextSibling;
                                continue outer;
                            }
                            curFromNodeKey = getNodeKey(curFromNodeChild);
                            var curFromNodeType = curFromNodeChild.nodeType;
                            var isCompatible = void 0;
                            if (curFromNodeType === curToNodeChild.nodeType) {
                                if (curFromNodeType === ELEMENT_NODE) {
                                    if (curToNodeKey) {
                                        if (curToNodeKey !== curFromNodeKey) {
                                            if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                                                if (fromNextSibling === matchingFromEl) {
                                                    isCompatible = false;
                                                } else {
                                                    fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                                                    if (curFromNodeKey) {
                                                        addKeyedRemoval(curFromNodeKey);
                                                    } else {
                                                        removeNode(curFromNodeChild, fromEl, true);
                                                    }
                                                    curFromNodeChild = matchingFromEl;
                                                }
                                            } else {
                                                isCompatible = false;
                                            }
                                        }
                                    } else if (curFromNodeKey) {
                                        isCompatible = false;
                                    }
                                    isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                                    if (isCompatible) {
                                        morphEl(curFromNodeChild, curToNodeChild);
                                    }
                                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                                    isCompatible = true;
                                    if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                                        curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                                    }
                                }
                            }
                            if (isCompatible) {
                                curToNodeChild = toNextSibling;
                                curFromNodeChild = fromNextSibling;
                                continue outer;
                            }
                            if (curFromNodeKey) {
                                addKeyedRemoval(curFromNodeKey);
                            } else {
                                removeNode(curFromNodeChild, fromEl, true);
                            }
                            curFromNodeChild = fromNextSibling;
                        }
                        if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
                            fromEl.appendChild(matchingFromEl);
                            morphEl(matchingFromEl, curToNodeChild);
                        } else {
                            var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
                            if (onBeforeNodeAddedResult !== false) {
                                if (onBeforeNodeAddedResult) {
                                    curToNodeChild = onBeforeNodeAddedResult;
                                }
                                if (curToNodeChild.actualize) {
                                    curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                                }
                                fromEl.appendChild(curToNodeChild);
                                handleNodeAdded(curToNodeChild);
                            }
                        }
                        curToNodeChild = toNextSibling;
                        curFromNodeChild = fromNextSibling;
                    }
                cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
                var specialElHandler = specialElHandlers[fromEl.nodeName];
                if (specialElHandler) {
                    specialElHandler(fromEl, toEl);
                }
            }
            var morphedNode = fromNode;
            var morphedNodeType = morphedNode.nodeType;
            var toNodeType = toNode.nodeType;
            if (!childrenOnly) {
                if (morphedNodeType === ELEMENT_NODE) {
                    if (toNodeType === ELEMENT_NODE) {
                        if (!compareNodeNames(fromNode, toNode)) {
                            onNodeDiscarded(fromNode);
                            morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
                        }
                    } else {
                        morphedNode = toNode;
                    }
                } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
                    if (toNodeType === morphedNodeType) {
                        if (morphedNode.nodeValue !== toNode.nodeValue) {
                            morphedNode.nodeValue = toNode.nodeValue;
                        }
                        return morphedNode;
                    } else {
                        morphedNode = toNode;
                    }
                }
            }
            if (morphedNode === toNode) {
                onNodeDiscarded(fromNode);
            } else {
                if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
                    return;
                }
                morphEl(morphedNode, toNode, childrenOnly);
                if (keyedRemovalList) {
                    for (var i = 0, len = keyedRemovalList.length; i < len; i++) {
                        var elToRemove = fromNodesLookup[keyedRemovalList[i]];
                        if (elToRemove) {
                            removeNode(elToRemove, elToRemove.parentNode, false);
                        }
                    }
                }
            }
            if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
                if (morphedNode.actualize) {
                    morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
                }
                fromNode.parentNode.replaceChild(morphedNode, fromNode);
            }
            return morphedNode;
        };
    }
    var morphdom = morphdomFactory(morphAttrs);
    var morphdom_esm_default = morphdom;
    var DOMPatch = class {
        static patchEl(fromEl, toEl, activeElement) {
            morphdom_esm_default(fromEl, toEl, {
                childrenOnly: false,
                onBeforeElUpdated: (fromEl2, toEl2) => {
                    if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {
                        dom_default.mergeFocusedInput(fromEl2, toEl2);
                        return false;
                    }
                }
            });
        }
        constructor(view, container, id, html, targetCID) {
            this.view = view;
            this.liveSocket = view.liveSocket;
            this.container = container;
            this.id = id;
            this.rootID = view.root.id;
            this.html = html;
            this.targetCID = targetCID;
            this.cidPatch = isCid(this.targetCID);
            this.callbacks = {
                beforeadded: [],
                beforeupdated: [],
                beforephxChildAdded: [],
                afteradded: [],
                afterupdated: [],
                afterdiscarded: [],
                afterphxChildAdded: [],
                aftertransitionsDiscarded: []
            };
        }
        before(kind, callback) {
            this.callbacks[`before${kind}`].push(callback);
        }
        after(kind, callback) {
            this.callbacks[`after${kind}`].push(callback);
        }
        trackBefore(kind, ...args) {
            this.callbacks[`before${kind}`].forEach((callback) => callback(...args));
        }
        trackAfter(kind, ...args) {
            this.callbacks[`after${kind}`].forEach((callback) => callback(...args));
        }
        markPrunableContentForRemoval() {
            dom_default.all(this.container, "[phx-update=append] > *, [phx-update=prepend] > *", (el) => {
                el.setAttribute(PHX_PRUNE, "");
            });
        }
        perform() {
            let { view, liveSocket: liveSocket2, container, html } = this;
            let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;
            if (this.isCIDPatch() && !targetContainer) {
                return;
            }
            let focused = liveSocket2.getActiveElement();
            let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
            let phxUpdate = liveSocket2.binding(PHX_UPDATE);
            let phxFeedbackFor = liveSocket2.binding(PHX_FEEDBACK_FOR);
            let disableWith = liveSocket2.binding(PHX_DISABLE_WITH);
            let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
            let phxRemove = liveSocket2.binding("remove");
            let added = [];
            let updates = [];
            let appendPrependUpdates = [];
            let pendingRemoves = [];
            let externalFormTriggered = null;
            let diffHTML = liveSocket2.time("premorph container prep", () => {
                return this.buildDiffHTML(container, html, phxUpdate, targetContainer);
            });
            this.trackBefore("added", container);
            this.trackBefore("updated", container, container);
            liveSocket2.time("morphdom", () => {
                morphdom_esm_default(targetContainer, diffHTML, {
                    childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,
                    getNodeKey: (node) => {
                        return dom_default.isPhxDestroyed(node) ? null : node.id;
                    },
                    onBeforeNodeAdded: (el) => {
                        this.trackBefore("added", el);
                        return el;
                    },
                    onNodeAdded: (el) => {
                        if (el instanceof HTMLImageElement && el.srcset) {
                            el.srcset = el.srcset;
                        } else if (el instanceof HTMLVideoElement && el.autoplay) {
                            el.play();
                        }
                        if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
                            externalFormTriggered = el;
                        }
                        dom_default.discardError(targetContainer, el, phxFeedbackFor);
                        if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
                            this.trackAfter("phxChildAdded", el);
                        }
                        added.push(el);
                    },
                    onNodeDiscarded: (el) => {
                        if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
                            liveSocket2.destroyViewByEl(el);
                        }
                        this.trackAfter("discarded", el);
                    },
                    onBeforeNodeDiscarded: (el) => {
                        if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
                            return true;
                        }
                        if (el.parentNode !== null && dom_default.isPhxUpdate(el.parentNode, phxUpdate, ["append", "prepend"]) && el.id) {
                            return false;
                        }
                        if (el.getAttribute && el.getAttribute(phxRemove)) {
                            pendingRemoves.push(el);
                            return false;
                        }
                        if (this.skipCIDSibling(el)) {
                            return false;
                        }
                        return true;
                    },
                    onElUpdated: (el) => {
                        if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
                            externalFormTriggered = el;
                        }
                        updates.push(el);
                    },
                    onBeforeElUpdated: (fromEl, toEl) => {
                        dom_default.cleanChildNodes(toEl, phxUpdate);
                        if (this.skipCIDSibling(toEl)) {
                            return false;
                        }
                        if (dom_default.isPhxSticky(fromEl)) {
                            return false;
                        }
                        if (dom_default.isIgnored(fromEl, phxUpdate)) {
                            this.trackBefore("updated", fromEl, toEl);
                            dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
                            updates.push(fromEl);
                            dom_default.applyStickyOperations(fromEl);
                            return false;
                        }
                        if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
                            return false;
                        }
                        if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {
                            if (dom_default.isUploadInput(fromEl)) {
                                this.trackBefore("updated", fromEl, toEl);
                                updates.push(fromEl);
                            }
                            dom_default.applyStickyOperations(fromEl);
                            return false;
                        }
                        if (dom_default.isPhxChild(toEl)) {
                            let prevSession = fromEl.getAttribute(PHX_SESSION);
                            dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
                            if (prevSession !== "") {
                                fromEl.setAttribute(PHX_SESSION, prevSession);
                            }
                            fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
                            dom_default.applyStickyOperations(fromEl);
                            return false;
                        }
                        dom_default.copyPrivates(toEl, fromEl);
                        dom_default.discardError(targetContainer, toEl, phxFeedbackFor);
                        let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
                        if (isFocusedFormEl) {
                            this.trackBefore("updated", fromEl, toEl);
                            dom_default.mergeFocusedInput(fromEl, toEl);
                            dom_default.syncAttrsToProps(fromEl);
                            updates.push(fromEl);
                            dom_default.applyStickyOperations(fromEl);
                            return false;
                        } else {
                            if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
                            }
                            dom_default.syncAttrsToProps(toEl);
                            dom_default.applyStickyOperations(toEl);
                            this.trackBefore("updated", fromEl, toEl);
                            return true;
                        }
                    }
                });
            });
            if (liveSocket2.isDebugEnabled()) {
                detectDuplicateIds();
            }
            if (appendPrependUpdates.length > 0) {
                liveSocket2.time("post-morph append/prepend restoration", () => {
                    appendPrependUpdates.forEach((update) => update.perform());
                });
            }
            liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
            dom_default.dispatchEvent(document, "phx:update");
            added.forEach((el) => this.trackAfter("added", el));
            updates.forEach((el) => this.trackAfter("updated", el));
            if (pendingRemoves.length > 0) {
                liveSocket2.transitionRemoves(pendingRemoves);
                liveSocket2.requestDOMUpdate(() => {
                    pendingRemoves.forEach((el) => {
                        let child = dom_default.firstPhxChild(el);
                        if (child) {
                            liveSocket2.destroyViewByEl(child);
                        }
                        el.remove();
                    });
                    this.trackAfter("transitionsDiscarded", pendingRemoves);
                });
            }
            if (externalFormTriggered) {
                liveSocket2.disconnect();
                externalFormTriggered.submit();
            }
            return true;
        }
        isCIDPatch() {
            return this.cidPatch;
        }
        skipCIDSibling(el) {
            return el.nodeType === Node.ELEMENT_NODE && el.getAttribute(PHX_SKIP) !== null;
        }
        targetCIDContainer(html) {
            if (!this.isCIDPatch()) {
                return;
            }
            let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
            if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {
                return first;
            } else {
                return first && first.parentNode;
            }
        }
        buildDiffHTML(container, html, phxUpdate, targetContainer) {
            let isCIDPatch = this.isCIDPatch();
            let isCIDWithSingleRoot = isCIDPatch && targetContainer.getAttribute(PHX_COMPONENT) === this.targetCID.toString();
            if (!isCIDPatch || isCIDWithSingleRoot) {
                return html;
            } else {
                let diffContainer = null;
                let template = document.createElement("template");
                diffContainer = dom_default.cloneNode(targetContainer);
                let [firstComponent, ...rest] = dom_default.findComponentNodeList(diffContainer, this.targetCID);
                template.innerHTML = html;
                rest.forEach((el) => el.remove());
                Array.from(diffContainer.childNodes).forEach((child) => {
                    if (child.id && child.nodeType === Node.ELEMENT_NODE && child.getAttribute(PHX_COMPONENT) !== this.targetCID.toString()) {
                        child.setAttribute(PHX_SKIP, "");
                        child.innerHTML = "";
                    }
                });
                Array.from(template.content.childNodes).forEach((el) => diffContainer.insertBefore(el, firstComponent));
                firstComponent.remove();
                return diffContainer.outerHTML;
            }
        }
    };
    var Rendered = class {
        static extract(diff) {
            let {
                [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
            delete diff[REPLY];
            delete diff[EVENTS];
            delete diff[TITLE];
            return { diff, title, reply: reply || null, events: events || [] };
        }
        constructor(viewId, rendered) {
            this.viewId = viewId;
            this.rendered = {};
            this.mergeDiff(rendered);
        }
        parentViewId() {
            return this.viewId;
        }
        toString(onlyCids) {
            return this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids);
        }
        recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids) {
            onlyCids = onlyCids ? new Set(onlyCids) : null;
            let output = { buffer: "", components, onlyCids };
            this.toOutputBuffer(rendered, null, output);
            return output.buffer;
        }
        componentCIDs(diff) {
            return Object.keys(diff[COMPONENTS] || {}).map((i) => parseInt(i));
        }
        isComponentOnlyDiff(diff) {
            if (!diff[COMPONENTS]) {
                return false;
            }
            return Object.keys(diff).length === 1;
        }
        getComponent(diff, cid) {
            return diff[COMPONENTS][cid];
        }
        mergeDiff(diff) {
            let newc = diff[COMPONENTS];
            let cache = {};
            delete diff[COMPONENTS];
            this.rendered = this.mutableMerge(this.rendered, diff);
            this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
            if (newc) {
                let oldc = this.rendered[COMPONENTS];
                for (let cid in newc) {
                    newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
                }
                for (let cid in newc) {
                    oldc[cid] = newc[cid];
                }
                diff[COMPONENTS] = newc;
            }
        }
        cachedFindComponent(cid, cdiff, oldc, newc, cache) {
            if (cache[cid]) {
                return cache[cid];
            } else {
                let ndiff, stat, scid = cdiff[STATIC];
                if (isCid(scid)) {
                    let tdiff;
                    if (scid > 0) {
                        tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
                    } else {
                        tdiff = oldc[-scid];
                    }
                    stat = tdiff[STATIC];
                    ndiff = this.cloneMerge(tdiff, cdiff);
                    ndiff[STATIC] = stat;
                } else {
                    ndiff = cdiff[STATIC] !== void 0 ? cdiff : this.cloneMerge(oldc[cid] || {}, cdiff);
                }
                cache[cid] = ndiff;
                return ndiff;
            }
        }
        mutableMerge(target, source) {
            if (source[STATIC] !== void 0) {
                return source;
            } else {
                this.doMutableMerge(target, source);
                return target;
            }
        }
        doMutableMerge(target, source) {
            for (let key in source) {
                let val = source[key];
                let targetVal = target[key];
                if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
                    this.doMutableMerge(targetVal, val);
                } else {
                    target[key] = val;
                }
            }
        }
        cloneMerge(target, source) {
            let merged = __spreadValues(__spreadValues({}, target), source);
            for (let key in merged) {
                let val = source[key];
                let targetVal = target[key];
                if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
                    merged[key] = this.cloneMerge(targetVal, val);
                }
            }
            return merged;
        }
        componentToString(cid) {
            return this.recursiveCIDToString(this.rendered[COMPONENTS], cid);
        }
        pruneCIDs(cids) {
            cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
        }
        get() {
            return this.rendered;
        }
        isNewFingerprint(diff = {}) {
            return !!diff[STATIC];
        }
        templateStatic(part, templates) {
            if (typeof part === "number") {
                return templates[part];
            } else {
                return part;
            }
        }
        toOutputBuffer(rendered, templates, output) {
            if (rendered[DYNAMICS]) {
                return this.comprehensionToBuffer(rendered, templates, output);
            }
            let {
                [STATIC]: statics } = rendered;
            statics = this.templateStatic(statics, templates);
            output.buffer += statics[0];
            for (let i = 1; i < statics.length; i++) {
                this.dynamicToBuffer(rendered[i - 1], templates, output);
                output.buffer += statics[i];
            }
        }
        comprehensionToBuffer(rendered, templates, output) {
            let {
                [DYNAMICS]: dynamics, [STATIC]: statics } = rendered;
            statics = this.templateStatic(statics, templates);
            let compTemplates = templates || rendered[TEMPLATES];
            for (let d = 0; d < dynamics.length; d++) {
                let dynamic = dynamics[d];
                output.buffer += statics[0];
                for (let i = 1; i < statics.length; i++) {
                    this.dynamicToBuffer(dynamic[i - 1], compTemplates, output);
                    output.buffer += statics[i];
                }
            }
        }
        dynamicToBuffer(rendered, templates, output) {
            if (typeof rendered === "number") {
                output.buffer += this.recursiveCIDToString(output.components, rendered, output.onlyCids);
            } else if (isObject(rendered)) {
                this.toOutputBuffer(rendered, templates, output);
            } else {
                output.buffer += rendered;
            }
        }
        recursiveCIDToString(components, cid, onlyCids) {
            let component = components[cid] || logError(`no component for CID ${cid}`, components);
            let template = document.createElement("template");
            template.innerHTML = this.recursiveToString(component, components, onlyCids);
            let container = template.content;
            let skip = onlyCids && !onlyCids.has(cid);
            let [hasChildNodes, hasChildComponents] = Array.from(container.childNodes).reduce(([hasNodes, hasComponents], child, i) => {
                if (child.nodeType === Node.ELEMENT_NODE) {
                    if (child.getAttribute(PHX_COMPONENT)) {
                        return [hasNodes, true];
                    }
                    child.setAttribute(PHX_COMPONENT, cid);
                    if (!child.id) {
                        child.id = `${this.parentViewId()}-${cid}-${i}`;
                    }
                    if (skip) {
                        child.setAttribute(PHX_SKIP, "");
                        child.innerHTML = "";
                    }
                    return [true, hasComponents];
                } else {
                    if (child.nodeValue.trim() !== "") {
                        logError(`only HTML element tags are allowed at the root of components.
  
  got: "${child.nodeValue.trim()}"
  
  within:
  `, template.innerHTML.trim());
                        child.replaceWith(this.createSpan(child.nodeValue, cid));
                        return [true, hasComponents];
                    } else {
                        child.remove();
                        return [hasNodes, hasComponents];
                    }
                }
            }, [false, false]);
            if (!hasChildNodes && !hasChildComponents) {
                logError("expected at least one HTML element tag inside a component, but the component is empty:\n", template.innerHTML.trim());
                return this.createSpan("", cid).outerHTML;
            } else if (!hasChildNodes && hasChildComponents) {
                logError("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.", template.innerHTML.trim());
                return template.innerHTML;
            } else {
                return template.innerHTML;
            }
        }
        createSpan(text, cid) {
            let span = document.createElement("span");
            span.innerText = text;
            span.setAttribute(PHX_COMPONENT, cid);
            return span;
        }
    };
    var viewHookID = 1;
    var ViewHook = class {
        static makeID() {
            return viewHookID++;
        }
        static elementID(el) {
            return el.phxHookId;
        }
        constructor(view, el, callbacks) {
            this.__view = view;
            this.liveSocket = view.liveSocket;
            this.__callbacks = callbacks;
            this.__listeners = /* @__PURE__ */ new Set();
            this.__isDisconnected = false;
            this.el = el;
            this.el.phxHookId = this.constructor.makeID();
            for (let key in this.__callbacks) {
                this[key] = this.__callbacks[key];
            }
        }
        __mounted() {
            this.mounted && this.mounted();
        }
        __updated() {
            this.updated && this.updated();
        }
        __beforeUpdate() {
            this.beforeUpdate && this.beforeUpdate();
        }
        __destroyed() {
            this.destroyed && this.destroyed();
        }
        __reconnected() {
            if (this.__isDisconnected) {
                this.__isDisconnected = false;
                this.reconnected && this.reconnected();
            }
        }
        __disconnected() {
            this.__isDisconnected = true;
            this.disconnected && this.disconnected();
        }
        pushEvent(event, payload = {}, onReply = function() {}) {
            return this.__view.pushHookEvent(null, event, payload, onReply);
        }
        pushEventTo(phxTarget, event, payload = {}, onReply = function() {}) {
            return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
                return view.pushHookEvent(targetCtx, event, payload, onReply);
            });
        }
        handleEvent(event, callback) {
            let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
            window.addEventListener(`phx:${event}`, callbackRef);
            this.__listeners.add(callbackRef);
            return callbackRef;
        }
        removeHandleEvent(callbackRef) {
            let event = callbackRef(null, true);
            window.removeEventListener(`phx:${event}`, callbackRef);
            this.__listeners.delete(callbackRef);
        }
        upload(name, files) {
            return this.__view.dispatchUploads(name, files);
        }
        uploadTo(phxTarget, name, files) {
            return this.__view.withinTargets(phxTarget, (view) => view.dispatchUploads(name, files));
        }
        __cleanup__() {
            this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
        }
    };
    var JS = {
        exec(eventType, phxEvent, view, sourceEl, defaults) {
            let [defaultKind, defaultArgs] = defaults || [null, {}];
            let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [
                [defaultKind, defaultArgs]
            ];
            commands.forEach(([kind, args]) => {
                if (kind === defaultKind && defaultArgs.data) {
                    args.data = Object.assign(args.data || {}, defaultArgs.data);
                }
                this.filterToEls(sourceEl, args).forEach((el) => {
                    this[`exec_${kind}`](eventType, phxEvent, view, sourceEl, el, args);
                });
            });
        },
        isVisible(el) {
            return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
        },
        exec_dispatch(eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
            detail = detail || {};
            detail.dispatcher = sourceEl;
            dom_default.dispatchEvent(el, event, { detail, bubbles });
        },
        exec_push(eventType, phxEvent, view, sourceEl, el, args) {
            if (!view.isConnected()) {
                return;
            }
            let { event, data: data2, target, page_loading, loading, value, dispatcher } = args;
            let pushOpts = { loading, value, target, page_loading: !!page_loading };
            let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
            let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
            view.withinTargets(phxTarget, (targetView, targetCtx) => {
                if (eventType === "change") {
                    let { newCid, _target, callback } = args;
                    _target = _target || (sourceEl instanceof HTMLInputElement ? sourceEl.name : void 0);
                    if (_target) {
                        pushOpts._target = _target;
                    }
                    targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
                } else if (eventType === "submit") {
                    targetView.submitForm(sourceEl, targetCtx, event || phxEvent, pushOpts);
                } else {
                    targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data2, pushOpts);
                }
            });
        },
        exec_add_class(eventType, phxEvent, view, sourceEl, el, { names, transition: transition2, time }) {
            this.addOrRemoveClasses(el, names, [], transition2, time, view);
        },
        exec_remove_class(eventType, phxEvent, view, sourceEl, el, { names, transition: transition2, time }) {
            this.addOrRemoveClasses(el, [], names, transition2, time, view);
        },
        exec_transition(eventType, phxEvent, view, sourceEl, el, { time, transition: transition2 }) {
            let [transition_start, running, transition_end] = transition2;
            let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(running), []);
            let onDone = () => this.addOrRemoveClasses(el, transition_end, transition_start.concat(running));
            view.transition(time, onStart, onDone);
        },
        exec_toggle(eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time }) {
            this.toggle(eventType, view, el, display, ins, outs, time);
        },
        exec_show(eventType, phxEvent, view, sourceEl, el, { display, transition: transition2, time }) {
            this.show(eventType, view, el, display, transition2, time);
        },
        exec_hide(eventType, phxEvent, view, sourceEl, el, { display, transition: transition2, time }) {
            this.hide(eventType, view, el, display, transition2, time);
        },
        exec_set_attr(eventType, phxEvent, view, sourceEl, el, { attr: [attr, val] }) {
            this.setOrRemoveAttrs(el, [
                [attr, val]
            ], []);
        },
        exec_remove_attr(eventType, phxEvent, view, sourceEl, el, { attr }) {
            this.setOrRemoveAttrs(el, [], [attr]);
        },
        show(eventType, view, el, display, transition2, time) {
            if (!this.isVisible(el)) {
                this.toggle(eventType, view, el, display, transition2, null, time);
            }
        },
        hide(eventType, view, el, display, transition2, time) {
            if (this.isVisible(el)) {
                this.toggle(eventType, view, el, display, null, transition2, time);
            }
        },
        toggle(eventType, view, el, display, ins, outs, time) {
            let [inClasses, inStartClasses, inEndClasses] = ins || [
                [],
                [],
                []
            ];
            let [outClasses, outStartClasses, outEndClasses] = outs || [
                [],
                [],
                []
            ];
            if (inClasses.length > 0 || outClasses.length > 0) {
                if (this.isVisible(el)) {
                    let onStart = () => {
                        this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
                        window.requestAnimationFrame(() => {
                            this.addOrRemoveClasses(el, outClasses, []);
                            window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
                        });
                    };
                    el.dispatchEvent(new Event("phx:hide-start"));
                    view.transition(time, onStart, () => {
                        this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
                        dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
                        el.dispatchEvent(new Event("phx:hide-end"));
                    });
                } else {
                    if (eventType === "remove") {
                        return;
                    }
                    let onStart = () => {
                        this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
                        dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = display || "block");
                        window.requestAnimationFrame(() => {
                            this.addOrRemoveClasses(el, inClasses, []);
                            window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
                        });
                    };
                    el.dispatchEvent(new Event("phx:show-start"));
                    view.transition(time, onStart, () => {
                        this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
                        el.dispatchEvent(new Event("phx:show-end"));
                    });
                }
            } else {
                if (this.isVisible(el)) {
                    window.requestAnimationFrame(() => {
                        el.dispatchEvent(new Event("phx:hide-start"));
                        dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
                        el.dispatchEvent(new Event("phx:hide-end"));
                    });
                } else {
                    window.requestAnimationFrame(() => {
                        el.dispatchEvent(new Event("phx:show-start"));
                        dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = display || "block");
                        el.dispatchEvent(new Event("phx:show-end"));
                    });
                }
            }
        },
        addOrRemoveClasses(el, adds, removes, transition2, time, view) {
            let [transition_run, transition_start, transition_end] = transition2 || [
                [],
                [],
                []
            ];
            if (transition_run.length > 0) {
                let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(transition_run), []);
                let onDone = () => this.addOrRemoveClasses(el, adds.concat(transition_end), removes.concat(transition_run).concat(transition_start));
                return view.transition(time, onStart, onDone);
            }
            window.requestAnimationFrame(() => {
                let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [
                    [],
                    []
                ]);
                let keepAdds = adds.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
                let keepRemoves = removes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
                let newAdds = prevAdds.filter((name) => removes.indexOf(name) < 0).concat(keepAdds);
                let newRemoves = prevRemoves.filter((name) => adds.indexOf(name) < 0).concat(keepRemoves);
                dom_default.putSticky(el, "classes", (currentEl) => {
                    currentEl.classList.remove(...newRemoves);
                    currentEl.classList.add(...newAdds);
                    return [newAdds, newRemoves];
                });
            });
        },
        setOrRemoveAttrs(el, sets, removes) {
            let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [
                [],
                []
            ]);
            let alteredAttrs = sets.map(([attr, _val]) => attr).concat(removes);
            let newSets = prevSets.filter(([attr, _val]) => !alteredAttrs.includes(attr)).concat(sets);
            let newRemoves = prevRemoves.filter((attr) => !alteredAttrs.includes(attr)).concat(removes);
            dom_default.putSticky(el, "attrs", (currentEl) => {
                newRemoves.forEach((attr) => currentEl.removeAttribute(attr));
                newSets.forEach(([attr, val]) => currentEl.setAttribute(attr, val));
                return [newSets, newRemoves];
            });
        },
        hasAllClasses(el, classes) {
            return classes.every((name) => el.classList.contains(name));
        },
        isToggledOut(el, outClasses) {
            return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
        },
        filterToEls(sourceEl, { to }) {
            return to ? dom_default.all(document, to) : [sourceEl];
        }
    };
    var js_default = JS;
    var serializeForm = (form, meta, onlyNames = []) => {
        let formData = new FormData(form);
        let toRemove = [];
        formData.forEach((val, key, _index) => {
            if (val instanceof File) {
                toRemove.push(key);
            }
        });
        toRemove.forEach((key) => formData.delete(key));
        let params = new URLSearchParams();
        for (let [key, val] of formData.entries()) {
            if (onlyNames.length === 0 || onlyNames.indexOf(key) >= 0) {
                params.append(key, val);
            }
        }
        for (let metaKey in meta) {
            params.append(metaKey, meta[metaKey]);
        }
        return params.toString();
    };
    var View = class {
        constructor(el, liveSocket2, parentView, flash) {
            this.liveSocket = liveSocket2;
            this.flash = flash;
            this.parent = parentView;
            this.root = parentView ? parentView.root : this;
            this.el = el;
            this.id = this.el.id;
            this.ref = 0;
            this.childJoins = 0;
            this.loaderTimer = null;
            this.pendingDiffs = [];
            this.pruningCIDs = [];
            this.redirect = false;
            this.href = null;
            this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
            this.joinPending = true;
            this.destroyed = false;
            this.joinCallback = function(onDone) {
                onDone && onDone();
            };
            this.stopCallback = function() {};
            this.pendingJoinOps = this.parent ? null : [];
            this.viewHooks = {};
            this.uploaders = {};
            this.formSubmits = [];
            this.children = this.parent ? null : {};
            this.root.children[this.id] = {};
            this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
                return {
                    redirect: this.redirect ? this.href : void 0,
                    url: this.redirect ? void 0 : this.href || void 0,
                    params: this.connectParams(),
                    session: this.getSession(),
                    static: this.getStatic(),
                    flash: this.flash
                };
            });
            this.showLoader(this.liveSocket.loaderTimeout);
            this.bindChannel();
        }
        setHref(href) {
            this.href = href;
        }
        setRedirect(href) {
            this.redirect = true;
            this.href = href;
        }
        isMain() {
            return this.el.getAttribute(PHX_MAIN) !== null;
        }
        connectParams() {
            let params = this.liveSocket.params(this.el);
            let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
            if (manifest.length > 0) {
                params["_track_static"] = manifest;
            }
            params["_mounts"] = this.joinCount;
            return params;
        }
        isConnected() {
            return this.channel.canPush();
        }
        getSession() {
            return this.el.getAttribute(PHX_SESSION);
        }
        getStatic() {
            let val = this.el.getAttribute(PHX_STATIC);
            return val === "" ? null : val;
        }
        destroy(callback = function() {}) {
            this.destroyAllChildren();
            this.destroyed = true;
            delete this.root.children[this.id];
            if (this.parent) {
                delete this.root.children[this.parent.id][this.id];
            }
            clearTimeout(this.loaderTimer);
            let onFinished = () => {
                callback();
                for (let id in this.viewHooks) {
                    this.destroyHook(this.viewHooks[id]);
                }
            };
            dom_default.markPhxChildDestroyed(this.el);
            this.log("destroyed", () => ["the child has been removed from the parent"]);
            this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
        }
        setContainerClasses(...classes) {
            this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
            this.el.classList.add(...classes);
        }
        showLoader(timeout) {
            clearTimeout(this.loaderTimer);
            if (timeout) {
                this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
            } else {
                for (let id in this.viewHooks) {
                    this.viewHooks[id].__disconnected();
                }
                this.setContainerClasses(PHX_DISCONNECTED_CLASS);
            }
        }
        hideLoader() {
            clearTimeout(this.loaderTimer);
            this.setContainerClasses(PHX_CONNECTED_CLASS);
        }
        triggerReconnected() {
            for (let id in this.viewHooks) {
                this.viewHooks[id].__reconnected();
            }
        }
        log(kind, msgCallback) {
            this.liveSocket.log(this, kind, msgCallback);
        }
        transition(time, onStart, onDone = function() {}) {
            this.liveSocket.transition(time, onStart, onDone);
        }
        withinTargets(phxTarget, callback) {
            if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
                return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
            }
            if (isCid(phxTarget)) {
                let targets = dom_default.findComponentNodeList(this.el, phxTarget);
                if (targets.length === 0) {
                    logError(`no component found matching phx-target of ${phxTarget}`);
                } else {
                    callback(this, parseInt(phxTarget));
                }
            } else {
                let targets = Array.from(document.querySelectorAll(phxTarget));
                if (targets.length === 0) {
                    logError(`nothing found matching the phx-target selector "${phxTarget}"`);
                }
                targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
            }
        }
        applyDiff(type, rawDiff, callback) {
            this.log(type, () => ["", clone(rawDiff)]);
            let { diff, reply, events, title } = Rendered.extract(rawDiff);
            if (title) {
                dom_default.putTitle(title);
            }
            callback({ diff, reply, events });
            return reply;
        }
        onJoin(resp) {
            let { rendered, container } = resp;
            if (container) {
                let [tag, attrs] = container;
                this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
            }
            this.childJoins = 0;
            this.joinPending = true;
            this.flash = null;
            browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
            this.applyDiff("mount", rendered, ({ diff, events }) => {
                this.rendered = new Rendered(this.id, diff);
                let html = this.renderContainer(null, "join");
                this.dropPendingRefs();
                let forms = this.formsForRecovery(html);
                this.joinCount++;
                if (forms.length > 0) {
                    forms.forEach(([form, newForm, newCid], i) => {
                        this.pushFormRecovery(form, newCid, (resp2) => {
                            if (i === forms.length - 1) {
                                this.onJoinComplete(resp2, html, events);
                            }
                        });
                    });
                } else {
                    this.onJoinComplete(resp, html, events);
                }
            });
        }
        dropPendingRefs() {
            dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}]`, (el) => {
                el.removeAttribute(PHX_REF);
                el.removeAttribute(PHX_REF_SRC);
            });
        }
        onJoinComplete({ live_patch }, html, events) {
            if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
                return this.applyJoinPatch(live_patch, html, events);
            }
            let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {
                let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
                let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
                if (phxStatic) {
                    toEl.setAttribute(PHX_STATIC, phxStatic);
                }
                return this.joinChild(toEl);
            });
            if (newChildren.length === 0) {
                if (this.parent) {
                    this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, events)]);
                    this.parent.ackJoin(this);
                } else {
                    this.onAllChildJoinsComplete();
                    this.applyJoinPatch(live_patch, html, events);
                }
            } else {
                this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, events)]);
            }
        }
        attachTrueDocEl() {
            this.el = dom_default.byId(this.id);
            this.el.setAttribute(PHX_ROOT_ID, this.root.id);
        }
        applyJoinPatch(live_patch, html, events) {
            this.attachTrueDocEl();
            let patch = new DOMPatch(this, this.el, this.id, html, null);
            patch.markPrunableContentForRemoval();
            this.performPatch(patch, false);
            this.joinNewChildren();
            dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
                let hook = this.addHook(hookEl);
                if (hook) {
                    hook.__mounted();
                }
            });
            this.joinPending = false;
            this.liveSocket.dispatchEvents(events);
            this.applyPendingUpdates();
            if (live_patch) {
                let { kind, to } = live_patch;
                this.liveSocket.historyPatch(to, kind);
            }
            this.hideLoader();
            if (this.joinCount > 1) {
                this.triggerReconnected();
            }
            this.stopCallback();
        }
        triggerBeforeUpdateHook(fromEl, toEl) {
            this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
            let hook = this.getHook(fromEl);
            let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
            if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
                hook.__beforeUpdate();
                return hook;
            }
        }
        performPatch(patch, pruneCids) {
            let removedEls = [];
            let phxChildrenAdded = false;
            let updatedHookIds = /* @__PURE__ */ new Set();
            patch.after("added", (el) => {
                this.liveSocket.triggerDOM("onNodeAdded", [el]);
                let newHook = this.addHook(el);
                if (newHook) {
                    newHook.__mounted();
                }
            });
            patch.after("phxChildAdded", (el) => {
                if (dom_default.isPhxSticky(el)) {
                    this.liveSocket.joinRootViews();
                } else {
                    phxChildrenAdded = true;
                }
            });
            patch.before("updated", (fromEl, toEl) => {
                let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
                if (hook) {
                    updatedHookIds.add(fromEl.id);
                }
            });
            patch.after("updated", (el) => {
                if (updatedHookIds.has(el.id)) {
                    this.getHook(el).__updated();
                }
            });
            patch.after("discarded", (el) => {
                if (el.nodeType === Node.ELEMENT_NODE) {
                    removedEls.push(el);
                }
            });
            patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
            patch.perform();
            this.afterElementsRemoved(removedEls, pruneCids);
            return phxChildrenAdded;
        }
        afterElementsRemoved(elements, pruneCids) {
            let destroyedCIDs = [];
            elements.forEach((parent) => {
                let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
                let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}]`);
                components.concat(parent).forEach((el) => {
                    let cid = this.componentID(el);
                    if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
                        destroyedCIDs.push(cid);
                    }
                });
                hooks.concat(parent).forEach((hookEl) => {
                    let hook = this.getHook(hookEl);
                    hook && this.destroyHook(hook);
                });
            });
            if (pruneCids) {
                this.maybePushComponentsDestroyed(destroyedCIDs);
            }
        }
        joinNewChildren() {
            dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
        }
        getChildById(id) {
            return this.root.children[this.id][id];
        }
        getDescendentByEl(el) {
            if (el.id === this.id) {
                return this;
            } else {
                return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];
            }
        }
        destroyDescendent(id) {
            for (let parentId in this.root.children) {
                for (let childId in this.root.children[parentId]) {
                    if (childId === id) {
                        return this.root.children[parentId][childId].destroy();
                    }
                }
            }
        }
        joinChild(el) {
            let child = this.getChildById(el.id);
            if (!child) {
                let view = new View(el, this.liveSocket, this);
                this.root.children[this.id][view.id] = view;
                view.join();
                this.childJoins++;
                return true;
            }
        }
        isJoinPending() {
            return this.joinPending;
        }
        ackJoin(_child) {
            this.childJoins--;
            if (this.childJoins === 0) {
                if (this.parent) {
                    this.parent.ackJoin(this);
                } else {
                    this.onAllChildJoinsComplete();
                }
            }
        }
        onAllChildJoinsComplete() {
            this.joinCallback(() => {
                this.pendingJoinOps.forEach(([view, op]) => {
                    if (!view.isDestroyed()) {
                        op();
                    }
                });
                this.pendingJoinOps = [];
            });
        }
        update(diff, events) {
            if (this.isJoinPending() || this.liveSocket.hasPendingLink() && !dom_default.isPhxSticky(this.el)) {
                return this.pendingDiffs.push({ diff, events });
            }
            this.rendered.mergeDiff(diff);
            let phxChildrenAdded = false;
            if (this.rendered.isComponentOnlyDiff(diff)) {
                this.liveSocket.time("component patch complete", () => {
                    let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));
                    parentCids.forEach((parentCID) => {
                        if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
                            phxChildrenAdded = true;
                        }
                    });
                });
            } else if (!isEmpty(diff)) {
                this.liveSocket.time("full patch complete", () => {
                    let html = this.renderContainer(diff, "update");
                    let patch = new DOMPatch(this, this.el, this.id, html, null);
                    phxChildrenAdded = this.performPatch(patch, true);
                });
            }
            this.liveSocket.dispatchEvents(events);
            if (phxChildrenAdded) {
                this.joinNewChildren();
            }
        }
        renderContainer(diff, kind) {
            return this.liveSocket.time(`toString diff (${kind})`, () => {
                let tag = this.el.tagName;
                let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;
                let html = this.rendered.toString(cids);
                return `<${tag}>${html}</${tag}>`;
            });
        }
        componentPatch(diff, cid) {
            if (isEmpty(diff))
                return false;
            let html = this.rendered.componentToString(cid);
            let patch = new DOMPatch(this, this.el, this.id, html, cid);
            let childrenAdded = this.performPatch(patch, true);
            return childrenAdded;
        }
        getHook(el) {
            return this.viewHooks[ViewHook.elementID(el)];
        }
        addHook(el) {
            if (ViewHook.elementID(el) || !el.getAttribute) {
                return;
            }
            let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
            if (hookName && !this.ownsElement(el)) {
                return;
            }
            let callbacks = this.liveSocket.getHookCallbacks(hookName);
            if (callbacks) {
                if (!el.id) {
                    logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
                }
                let hook = new ViewHook(this, el, callbacks);
                this.viewHooks[ViewHook.elementID(hook.el)] = hook;
                return hook;
            } else if (hookName !== null) {
                logError(`unknown hook found for "${hookName}"`, el);
            }
        }
        destroyHook(hook) {
            hook.__destroyed();
            hook.__cleanup__();
            delete this.viewHooks[ViewHook.elementID(hook.el)];
        }
        applyPendingUpdates() {
            this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
            this.pendingDiffs = [];
        }
        onChannel(event, cb) {
            this.liveSocket.onChannel(this.channel, event, (resp) => {
                if (this.isJoinPending()) {
                    this.root.pendingJoinOps.push([this, () => cb(resp)]);
                } else {
                    this.liveSocket.requestDOMUpdate(() => cb(resp));
                }
            });
        }
        bindChannel() {
            this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
                this.liveSocket.requestDOMUpdate(() => {
                    this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
                });
            });
            this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
            this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
            this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
            this.channel.onError((reason) => this.onError(reason));
            this.channel.onClose((reason) => this.onClose(reason));
        }
        destroyAllChildren() {
            for (let id in this.root.children[this.id]) {
                this.getChildById(id).destroy();
            }
        }
        onLiveRedirect(redir) {
            let { to, kind, flash } = redir;
            let url = this.expandURL(to);
            this.liveSocket.historyRedirect(url, kind, flash);
        }
        onLivePatch(redir) {
            let { to, kind } = redir;
            this.href = this.expandURL(to);
            this.liveSocket.historyPatch(to, kind);
        }
        expandURL(to) {
            return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
        }
        onRedirect({ to, flash }) {
            this.liveSocket.redirect(to, flash);
        }
        isDestroyed() {
            return this.destroyed;
        }
        join(callback) {
            if (this.isMain()) {
                this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
            }
            this.joinCallback = (onDone) => {
                onDone = onDone || function() {};
                callback ? callback(this.joinCount, onDone) : onDone();
            };
            this.liveSocket.wrapPush(this, { timeout: false }, () => {
                return this.channel.join().receive("ok", (data2) => {
                    if (!this.isDestroyed()) {
                        this.liveSocket.requestDOMUpdate(() => this.onJoin(data2));
                    }
                }).receive("error", (resp) => !this.isDestroyed() && this.onJoinError(resp)).receive("timeout", () => !this.isDestroyed() && this.onJoinError({ reason: "timeout" }));
            });
        }
        onJoinError(resp) {
            if (resp.reason === "unauthorized" || resp.reason === "stale") {
                this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
                return this.onRedirect({ to: this.href });
            }
            if (resp.redirect || resp.live_redirect) {
                this.joinPending = false;
                this.channel.leave();
            }
            if (resp.redirect) {
                return this.onRedirect(resp.redirect);
            }
            if (resp.live_redirect) {
                return this.onLiveRedirect(resp.live_redirect);
            }
            this.log("error", () => ["unable to join", resp]);
            return this.liveSocket.reloadWithJitter(this);
        }
        onClose(reason) {
            if (this.isDestroyed()) {
                return;
            }
            if (this.isJoinPending() && document.visibilityState !== "hidden" || this.liveSocket.hasPendingLink() && reason !== "leave") {
                return this.liveSocket.reloadWithJitter(this);
            }
            this.destroyAllChildren();
            this.liveSocket.dropActiveElement(this);
            if (document.activeElement) {
                document.activeElement.blur();
            }
            if (this.liveSocket.isUnloaded()) {
                this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
            }
        }
        onError(reason) {
            this.onClose(reason);
            this.log("error", () => ["view crashed", reason]);
            if (!this.liveSocket.isUnloaded()) {
                this.displayError();
            }
        }
        displayError() {
            if (this.isMain()) {
                dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
            }
            this.showLoader();
            this.setContainerClasses(PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
        }
        pushWithReply(refGenerator, event, payload, onReply = function() {}) {
            if (!this.isConnected()) {
                return;
            }
            let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
            let onLoadingDone = function() {};
            if (opts.page_loading || el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {
                onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
            }
            if (typeof payload.cid !== "number") {
                delete payload.cid;
            }
            return this.liveSocket.wrapPush(this, { timeout: true }, () => {
                return this.channel.push(event, payload, PUSH_TIMEOUT).receive("ok", (resp) => {
                    if (ref !== null) {
                        this.undoRefs(ref);
                    }
                    let finish = (hookReply) => {
                        if (resp.redirect) {
                            this.onRedirect(resp.redirect);
                        }
                        if (resp.live_patch) {
                            this.onLivePatch(resp.live_patch);
                        }
                        if (resp.live_redirect) {
                            this.onLiveRedirect(resp.live_redirect);
                        }
                        onLoadingDone();
                        onReply(resp, hookReply);
                    };
                    if (resp.diff) {
                        this.liveSocket.requestDOMUpdate(() => {
                            let hookReply = this.applyDiff("update", resp.diff, ({ diff, events }) => {
                                this.update(diff, events);
                            });
                            finish(hookReply);
                        });
                    } else {
                        finish(null);
                    }
                });
            });
        }
        undoRefs(ref) {
            dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}="${ref}"]`, (el) => {
                let disabledVal = el.getAttribute(PHX_DISABLED);
                el.removeAttribute(PHX_REF);
                el.removeAttribute(PHX_REF_SRC);
                if (el.getAttribute(PHX_READONLY) !== null) {
                    el.readOnly = false;
                    el.removeAttribute(PHX_READONLY);
                }
                if (disabledVal !== null) {
                    el.disabled = disabledVal === "true" ? true : false;
                    el.removeAttribute(PHX_DISABLED);
                }
                PHX_EVENT_CLASSES.forEach((className) => dom_default.removeClass(el, className));
                let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);
                if (disableRestore !== null) {
                    el.innerText = disableRestore;
                    el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
                }
                let toEl = dom_default.private(el, PHX_REF);
                if (toEl) {
                    let hook = this.triggerBeforeUpdateHook(el, toEl);
                    DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());
                    if (hook) {
                        hook.__updated();
                    }
                    dom_default.deletePrivate(el, PHX_REF);
                }
            });
        }
        putRef(elements, event, opts = {}) {
            let newRef = this.ref++;
            let disableWith = this.binding(PHX_DISABLE_WITH);
            if (opts.loading) {
                elements = elements.concat(dom_default.all(document, opts.loading));
            }
            elements.forEach((el) => {
                el.classList.add(`phx-${event}-loading`);
                el.setAttribute(PHX_REF, newRef);
                el.setAttribute(PHX_REF_SRC, this.el.id);
                let disableText = el.getAttribute(disableWith);
                if (disableText !== null) {
                    if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
                        el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
                    }
                    if (disableText !== "") {
                        el.innerText = disableText;
                    }
                    el.setAttribute("disabled", "");
                }
            });
            return [newRef, elements, opts];
        }
        componentID(el) {
            let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
            return cid ? parseInt(cid) : null;
        }
        targetComponentID(target, targetCtx, opts = {}) {
            if (isCid(targetCtx)) {
                return targetCtx;
            }
            let cidOrSelector = target.getAttribute(this.binding("target"));
            if (isCid(cidOrSelector)) {
                return parseInt(cidOrSelector);
            } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
                return this.closestComponentID(targetCtx);
            } else {
                return null;
            }
        }
        closestComponentID(targetCtx) {
            if (isCid(targetCtx)) {
                return targetCtx;
            } else if (targetCtx) {
                return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
            } else {
                return null;
            }
        }
        pushHookEvent(targetCtx, event, payload, onReply) {
            if (!this.isConnected()) {
                this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
                return false;
            }
            let [ref, els, opts] = this.putRef([], "hook");
            this.pushWithReply(() => [ref, els, opts], "event", {
                type: "hook",
                event,
                value: payload,
                cid: this.closestComponentID(targetCtx)
            }, (resp, reply) => onReply(reply, ref));
            return ref;
        }
        extractMeta(el, meta, value) {
            let prefix2 = this.binding("value-");
            for (let i = 0; i < el.attributes.length; i++) {
                if (!meta) {
                    meta = {};
                }
                let name = el.attributes[i].name;
                if (name.startsWith(prefix2)) {
                    meta[name.replace(prefix2, "")] = el.getAttribute(name);
                }
            }
            if (el.value !== void 0) {
                if (!meta) {
                    meta = {};
                }
                meta.value = el.value;
                if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
                    delete meta.value;
                }
            }
            if (value) {
                if (!meta) {
                    meta = {};
                }
                for (let key in value) {
                    meta[key] = value[key];
                }
            }
            return meta;
        }
        pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}) {
            this.pushWithReply(() => this.putRef([el], type, opts), "event", {
                type,
                event: phxEvent,
                value: this.extractMeta(el, meta, opts.value),
                cid: this.targetComponentID(el, targetCtx, opts)
            });
        }
        pushFileProgress(fileEl, entryRef, progress, onReply = function() {}) {
            this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
                view.pushWithReply(null, "progress", {
                    event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
                    ref: fileEl.getAttribute(PHX_UPLOAD_REF),
                    entry_ref: entryRef,
                    progress,
                    cid: view.targetComponentID(fileEl.form, targetCtx)
                }, onReply);
            });
        }
        pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
            let uploads;
            let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx);
            let refGenerator = () => this.putRef([inputEl, inputEl.form], "change", opts);
            let formData;
            if (inputEl.getAttribute(this.binding("change"))) {
                formData = serializeForm(inputEl.form, { _target: opts._target }, [inputEl.name]);
            } else {
                formData = serializeForm(inputEl.form, { _target: opts._target });
            }
            if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
                LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
            }
            uploads = LiveUploader.serializeUploads(inputEl);
            let event = {
                type: "form",
                event: phxEvent,
                value: formData,
                uploads,
                cid
            };
            this.pushWithReply(refGenerator, "event", event, (resp) => {
                dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));
                if (dom_default.isUploadInput(inputEl) && inputEl.getAttribute("data-phx-auto-upload") !== null) {
                    if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
                        let [ref, _els] = refGenerator();
                        this.uploadFiles(inputEl.form, targetCtx, ref, cid, (_uploads) => {
                            callback && callback(resp);
                            this.triggerAwaitingSubmit(inputEl.form);
                        });
                    }
                } else {
                    callback && callback(resp);
                }
            });
        }
        triggerAwaitingSubmit(formEl) {
            let awaitingSubmit = this.getScheduledSubmit(formEl);
            if (awaitingSubmit) {
                let [_el, _ref, _opts, callback] = awaitingSubmit;
                this.cancelSubmit(formEl);
                callback();
            }
        }
        getScheduledSubmit(formEl) {
            return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
        }
        scheduleSubmit(formEl, ref, opts, callback) {
            if (this.getScheduledSubmit(formEl)) {
                return true;
            }
            this.formSubmits.push([formEl, ref, opts, callback]);
        }
        cancelSubmit(formEl) {
            this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
                if (el.isSameNode(formEl)) {
                    this.undoRefs(ref);
                    return false;
                } else {
                    return true;
                }
            });
        }
        pushFormSubmit(formEl, targetCtx, phxEvent, opts, onReply) {
            let filterIgnored = (el) => {
                let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
                return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
            };
            let filterDisables = (el) => {
                return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
            };
            let filterButton = (el) => el.tagName == "BUTTON";
            let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
            let refGenerator = () => {
                let formElements = Array.from(formEl.elements);
                let disables = formElements.filter(filterDisables);
                let buttons = formElements.filter(filterButton).filter(filterIgnored);
                let inputs = formElements.filter(filterInput).filter(filterIgnored);
                buttons.forEach((button) => {
                    button.setAttribute(PHX_DISABLED, button.disabled);
                    button.disabled = true;
                });
                inputs.forEach((input) => {
                    input.setAttribute(PHX_READONLY, input.readOnly);
                    input.readOnly = true;
                    if (input.files) {
                        input.setAttribute(PHX_DISABLED, input.disabled);
                        input.disabled = true;
                    }
                });
                formEl.setAttribute(this.binding(PHX_PAGE_LOADING), "");
                return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), "submit", opts);
            };
            let cid = this.targetComponentID(formEl, targetCtx);
            if (LiveUploader.hasUploadsInProgress(formEl)) {
                let [ref, _els] = refGenerator();
                let push = () => this.pushFormSubmit(formEl, targetCtx, phxEvent, opts, onReply);
                return this.scheduleSubmit(formEl, ref, opts, push);
            } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
                let [ref, els] = refGenerator();
                let proxyRefGen = () => [ref, els, opts];
                this.uploadFiles(formEl, targetCtx, ref, cid, (_uploads) => {
                    let formData = serializeForm(formEl, {});
                    this.pushWithReply(proxyRefGen, "event", {
                        type: "form",
                        event: phxEvent,
                        value: formData,
                        cid
                    }, onReply);
                });
            } else {
                let formData = serializeForm(formEl, {});
                this.pushWithReply(refGenerator, "event", {
                    type: "form",
                    event: phxEvent,
                    value: formData,
                    cid
                }, onReply);
            }
        }
        uploadFiles(formEl, targetCtx, ref, cid, onComplete) {
            let joinCountAtUpload = this.joinCount;
            let inputEls = LiveUploader.activeFileInputs(formEl);
            let numFileInputsInProgress = inputEls.length;
            inputEls.forEach((inputEl) => {
                let uploader = new LiveUploader(inputEl, this, () => {
                    numFileInputsInProgress--;
                    if (numFileInputsInProgress === 0) {
                        onComplete();
                    }
                });
                this.uploaders[inputEl] = uploader;
                let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
                let payload = {
                    ref: inputEl.getAttribute(PHX_UPLOAD_REF),
                    entries,
                    cid: this.targetComponentID(inputEl.form, targetCtx)
                };
                this.log("upload", () => ["sending preflight request", payload]);
                this.pushWithReply(null, "allow_upload", payload, (resp) => {
                    this.log("upload", () => ["got preflight response", resp]);
                    if (resp.error) {
                        this.undoRefs(ref);
                        let [entry_ref, reason] = resp.error;
                        this.log("upload", () => [`error for entry ${entry_ref}`, reason]);
                    } else {
                        let onError = (callback) => {
                            this.channel.onError(() => {
                                if (this.joinCount === joinCountAtUpload) {
                                    callback();
                                }
                            });
                        };
                        uploader.initAdapterUpload(resp, onError, this.liveSocket);
                    }
                });
            });
        }
        dispatchUploads(name, filesOrBlobs) {
            let inputs = dom_default.findUploadInputs(this.el).filter((el) => el.name === name);
            if (inputs.length === 0) {
                logError(`no live file inputs found matching the name "${name}"`);
            } else if (inputs.length > 1) {
                logError(`duplicate live file inputs found matching the name "${name}"`);
            } else {
                dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
            }
        }
        pushFormRecovery(form, newCid, callback) {
            this.liveSocket.withinOwners(form, (view, targetCtx) => {
                let input = form.elements[0];
                let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding("change"));
                js_default.exec("change", phxEvent, view, input, ["push", { _target: input.name, newCid, callback }]);
            });
        }
        pushLinkPatch(href, targetEl, callback) {
            let linkRef = this.liveSocket.setPendingLink(href);
            let refGen = targetEl ? () => this.putRef([targetEl], "click") : null;
            let fallback = () => this.liveSocket.redirect(window.location.href);
            let push = this.pushWithReply(refGen, "live_patch", { url: href }, (resp) => {
                this.liveSocket.requestDOMUpdate(() => {
                    if (resp.link_redirect) {
                        this.liveSocket.replaceMain(href, null, callback, linkRef);
                    } else {
                        if (this.liveSocket.commitPendingLink(linkRef)) {
                            this.href = href;
                        }
                        this.applyPendingUpdates();
                        callback && callback(linkRef);
                    }
                });
            });
            if (push) {
                push.receive("timeout", fallback);
            } else {
                fallback();
            }
        }
        formsForRecovery(html) {
            if (this.joinCount === 0) {
                return [];
            }
            let phxChange = this.binding("change");
            let template = document.createElement("template");
            template.innerHTML = html;
            return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id && this.ownsElement(form)).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => {
                let newForm = template.content.querySelector(`form[id="${form.id}"][${phxChange}="${form.getAttribute(phxChange)}"]`);
                if (newForm) {
                    return [form, newForm, this.targetComponentID(newForm)];
                } else {
                    return [form, null, null];
                }
            }).filter(([form, newForm, newCid]) => newForm);
        }
        maybePushComponentsDestroyed(destroyedCIDs) {
            let willDestroyCIDs = destroyedCIDs.filter((cid) => {
                return dom_default.findComponentNodeList(this.el, cid).length === 0;
            });
            if (willDestroyCIDs.length > 0) {
                this.pruningCIDs.push(...willDestroyCIDs);
                this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }, () => {
                    this.pruningCIDs = this.pruningCIDs.filter((cid) => willDestroyCIDs.indexOf(cid) !== -1);
                    let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
                        return dom_default.findComponentNodeList(this.el, cid).length === 0;
                    });
                    if (completelyDestroyCIDs.length > 0) {
                        this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }, (resp) => {
                            this.rendered.pruneCIDs(resp.cids);
                        });
                    }
                });
            }
        }
        ownsElement(el) {
            return el.getAttribute(PHX_PARENT_ID) === this.id || maybe(el.closest(PHX_VIEW_SELECTOR), (node) => node.id) === this.id;
        }
        submitForm(form, targetCtx, phxEvent, opts = {}) {
            dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
            let phxFeedback = this.liveSocket.binding(PHX_FEEDBACK_FOR);
            let inputs = Array.from(form.elements);
            this.liveSocket.blurActiveElement(this);
            this.pushFormSubmit(form, targetCtx, phxEvent, opts, () => {
                inputs.forEach((input) => dom_default.showError(input, phxFeedback));
                this.liveSocket.restorePreviouslyActiveFocus();
            });
        }
        binding(kind) {
            return this.liveSocket.binding(kind);
        }
    };
    var LiveSocket = class {
        constructor(url, phxSocket, opts = {}) {
            this.unloaded = false;
            if (!phxSocket || phxSocket.constructor.name === "Object") {
                throw new Error(`
        a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:
  
            import {Socket} from "phoenix"
            import {LiveSocket} from "phoenix_live_view"
            let liveSocket = new LiveSocket("/live", Socket, {...})
        `);
            }
            this.socket = new phxSocket(url, opts);
            this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
            this.opts = opts;
            this.params = closure2(opts.params || {});
            this.viewLogger = opts.viewLogger;
            this.metadataCallbacks = opts.metadata || {};
            this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
            this.activeElement = null;
            this.prevActive = null;
            this.silenced = false;
            this.main = null;
            this.outgoingMainEl = null;
            this.clickStartedAtTarget = null;
            this.linkRef = 1;
            this.roots = {};
            this.href = window.location.href;
            this.pendingLink = null;
            this.currentLocation = clone(window.location);
            this.hooks = opts.hooks || {};
            this.uploaders = opts.uploaders || {};
            this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
            this.maxReloads = opts.maxReloads || MAX_RELOADS;
            this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
            this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
            this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
            this.localStorage = opts.localStorage || window.localStorage;
            this.sessionStorage = opts.sessionStorage || window.sessionStorage;
            this.boundTopLevelEvents = false;
            this.domCallbacks = Object.assign({ onNodeAdded: closure2(), onBeforeElUpdated: closure2() }, opts.dom || {});
            this.transitions = new TransitionSet();
            window.addEventListener("pagehide", (_e) => {
                this.unloaded = true;
            });
            this.socket.onOpen(() => {
                if (this.isUnloaded()) {
                    window.location.reload();
                }
            });
        }
        isProfileEnabled() {
            return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
        }
        isDebugEnabled() {
            return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
        }
        isDebugDisabled() {
            return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
        }
        enableDebug() {
            this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
        }
        enableProfiling() {
            this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
        }
        disableDebug() {
            this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
        }
        disableProfiling() {
            this.sessionStorage.removeItem(PHX_LV_PROFILE);
        }
        enableLatencySim(upperBoundMs) {
            this.enableDebug();
            console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
            this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
        }
        disableLatencySim() {
            this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
        }
        getLatencySim() {
            let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
            return str ? parseInt(str) : null;
        }
        getSocket() {
            return this.socket;
        }
        connect() {
            if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
                this.enableDebug();
            }
            let doConnect = () => {
                if (this.joinRootViews()) {
                    this.bindTopLevelEvents();
                    this.socket.connect();
                }
            };
            if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
                doConnect();
            } else {
                document.addEventListener("DOMContentLoaded", () => doConnect());
            }
        }
        disconnect(callback) {
            this.socket.disconnect(callback);
        }
        execJS(el, encodedJS, eventType = null) {
            this.owner(el, (view) => js_default.exec(eventType, encodedJS, view, el));
        }
        triggerDOM(kind, args) {
            this.domCallbacks[kind](...args);
        }
        time(name, func) {
            if (!this.isProfileEnabled() || !console.time) {
                return func();
            }
            console.time(name);
            let result = func();
            console.timeEnd(name);
            return result;
        }
        log(view, kind, msgCallback) {
            if (this.viewLogger) {
                let [msg, obj] = msgCallback();
                this.viewLogger(view, kind, msg, obj);
            } else if (this.isDebugEnabled()) {
                let [msg, obj] = msgCallback();
                debug(view, kind, msg, obj);
            }
        }
        requestDOMUpdate(callback) {
            this.transitions.after(callback);
        }
        transition(time, onStart, onDone = function() {}) {
            this.transitions.addTransition(time, onStart, onDone);
        }
        onChannel(channel, event, cb) {
            channel.on(event, (data2) => {
                let latency = this.getLatencySim();
                if (!latency) {
                    cb(data2);
                } else {
                    console.log(`simulating ${latency}ms of latency from server to client`);
                    setTimeout(() => cb(data2), latency);
                }
            });
        }
        wrapPush(view, opts, push) {
            let latency = this.getLatencySim();
            let oldJoinCount = view.joinCount;
            if (!latency) {
                if (this.isConnected() && opts.timeout) {
                    return push().receive("timeout", () => {
                        if (view.joinCount === oldJoinCount && !view.isDestroyed()) {
                            this.reloadWithJitter(view, () => {
                                this.log(view, "timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
                            });
                        }
                    });
                } else {
                    return push();
                }
            }
            console.log(`simulating ${latency}ms of latency from client to server`);
            let fakePush = {
                receives: [],
                receive(kind, cb) {
                    this.receives.push([kind, cb]);
                }
            };
            setTimeout(() => {
                if (view.isDestroyed()) {
                    return;
                }
                fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());
            }, latency);
            return fakePush;
        }
        reloadWithJitter(view, log) {
            view.destroy();
            this.disconnect();
            let minMs = this.reloadJitterMin;
            let maxMs = this.reloadJitterMax;
            let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
            let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);
            log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
            if (tries > this.maxReloads) {
                this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
                afterMs = this.failsafeJitter;
            }
            setTimeout(() => {
                if (this.hasPendingLink()) {
                    window.location = this.pendingLink;
                } else {
                    window.location.reload();
                }
            }, afterMs);
        }
        getHookCallbacks(name) {
            return name && name.startsWith("Phoenix.") ? hooks_default[name.split(".")[1]] : this.hooks[name];
        }
        isUnloaded() {
            return this.unloaded;
        }
        isConnected() {
            return this.socket.isConnected();
        }
        getBindingPrefix() {
            return this.bindingPrefix;
        }
        binding(kind) {
            return `${this.getBindingPrefix()}${kind}`;
        }
        channel(topic, params) {
            return this.socket.channel(topic, params);
        }
        joinRootViews() {
            let rootsFound = false;
            dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
                if (!this.getRootById(rootEl.id)) {
                    let view = this.newRootView(rootEl);
                    view.setHref(this.getHref());
                    view.join();
                    if (rootEl.getAttribute(PHX_MAIN)) {
                        this.main = view;
                    }
                }
                rootsFound = true;
            });
            return rootsFound;
        }
        redirect(to, flash) {
            this.disconnect();
            browser_default.redirect(to, flash);
        }
        replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
            this.outgoingMainEl = this.outgoingMainEl || this.main.el;
            let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
            this.main.showLoader(this.loaderTimeout);
            this.main.destroy();
            this.main = this.newRootView(newMainEl, flash);
            this.main.setRedirect(href);
            this.transitionRemoves();
            this.main.join((joinCount, onDone) => {
                if (joinCount === 1 && this.commitPendingLink(linkRef)) {
                    this.requestDOMUpdate(() => {
                        dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
                        this.outgoingMainEl.replaceWith(newMainEl);
                        this.outgoingMainEl = null;
                        callback && callback();
                        onDone();
                    });
                }
            });
        }
        transitionRemoves(elements) {
            let removeAttr = this.binding("remove");
            elements = elements || dom_default.all(document, `[${removeAttr}]`);
            elements.forEach((el) => {
                if (document.body.contains(el)) {
                    this.execJS(el, el.getAttribute(removeAttr), "remove");
                }
            });
        }
        isPhxView(el) {
            return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
        }
        newRootView(el, flash) {
            let view = new View(el, this, null, flash);
            this.roots[view.id] = view;
            return view;
        }
        owner(childEl, callback) {
            let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
            if (view) {
                callback(view);
            }
        }
        withinOwners(childEl, callback) {
            this.owner(childEl, (view) => callback(view, childEl));
        }
        getViewByEl(el) {
            let rootId = el.getAttribute(PHX_ROOT_ID);
            return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
        }
        getRootById(id) {
            return this.roots[id];
        }
        destroyAllViews() {
            for (let id in this.roots) {
                this.roots[id].destroy();
                delete this.roots[id];
            }
        }
        destroyViewByEl(el) {
            let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
            if (root && root.id === el.id) {
                root.destroy();
                delete this.roots[root.id];
            } else if (root) {
                root.destroyDescendent(el.id);
            }
        }
        setActiveElement(target) {
            if (this.activeElement === target) {
                return;
            }
            this.activeElement = target;
            let cancel = () => {
                if (target === this.activeElement) {
                    this.activeElement = null;
                }
                target.removeEventListener("mouseup", this);
                target.removeEventListener("touchend", this);
            };
            target.addEventListener("mouseup", cancel);
            target.addEventListener("touchend", cancel);
        }
        getActiveElement() {
            if (document.activeElement === document.body) {
                return this.activeElement || document.activeElement;
            } else {
                return document.activeElement || document.body;
            }
        }
        dropActiveElement(view) {
            if (this.prevActive && view.ownsElement(this.prevActive)) {
                this.prevActive = null;
            }
        }
        restorePreviouslyActiveFocus() {
            if (this.prevActive && this.prevActive !== document.body) {
                this.prevActive.focus();
            }
        }
        blurActiveElement() {
            this.prevActive = this.getActiveElement();
            if (this.prevActive !== document.body) {
                this.prevActive.blur();
            }
        }
        bindTopLevelEvents() {
            if (this.boundTopLevelEvents) {
                return;
            }
            this.boundTopLevelEvents = true;
            this.socket.onClose((event) => {
                if (event && event.code === 1e3 && this.main) {
                    this.reloadWithJitter(this.main);
                }
            });
            document.body.addEventListener("click", function() {});
            window.addEventListener("pageshow", (e) => {
                if (e.persisted) {
                    this.getSocket().disconnect();
                    this.withPageLoading({ to: window.location.href, kind: "redirect" });
                    window.location.reload();
                }
            }, true);
            this.bindNav();
            this.bindClicks();
            this.bindForms();
            this.bind({ keyup: "keyup", keydown: "keydown" }, (e, type, view, targetEl, phxEvent, eventTarget) => {
                let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
                let pressedKey = e.key && e.key.toLowerCase();
                if (matchKey && matchKey.toLowerCase() !== pressedKey) {
                    return;
                }
                let data2 = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
                js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
            });
            this.bind({ blur: "focusout", focus: "focusin" }, (e, type, view, targetEl, phxEvent, eventTarget) => {
                if (!eventTarget) {
                    let data2 = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
                    js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
                }
            });
            this.bind({ blur: "blur", focus: "focus" }, (e, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {
                if (phxTarget === "window") {
                    let data2 = this.eventMeta(type, e, targetEl);
                    js_default.exec(type, phxEvent, view, targetEl, ["push", { data: data2 }]);
                }
            });
            window.addEventListener("dragover", (e) => e.preventDefault());
            window.addEventListener("drop", (e) => {
                e.preventDefault();
                let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
                    return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
                });
                let dropTarget = dropTargetId && document.getElementById(dropTargetId);
                let files = Array.from(e.dataTransfer.files || []);
                if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
                    return;
                }
                LiveUploader.trackFiles(dropTarget, files);
                dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
            });
            this.on(PHX_TRACK_UPLOADS, (e) => {
                let uploadTarget = e.target;
                if (!dom_default.isUploadInput(uploadTarget)) {
                    return;
                }
                let files = Array.from(e.detail.files || []).filter((f) => f instanceof File || f instanceof Blob);
                LiveUploader.trackFiles(uploadTarget, files);
                uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
            });
        }
        eventMeta(eventName, e, targetEl) {
            let callback = this.metadataCallbacks[eventName];
            return callback ? callback(e, targetEl) : {};
        }
        setPendingLink(href) {
            this.linkRef++;
            this.pendingLink = href;
            return this.linkRef;
        }
        commitPendingLink(linkRef) {
            if (this.linkRef !== linkRef) {
                return false;
            } else {
                this.href = this.pendingLink;
                this.pendingLink = null;
                return true;
            }
        }
        getHref() {
            return this.href;
        }
        hasPendingLink() {
            return !!this.pendingLink;
        }
        bind(events, callback) {
            for (let event in events) {
                let browserEventName = events[event];
                this.on(browserEventName, (e) => {
                    let binding = this.binding(event);
                    let windowBinding = this.binding(`window-${event}`);
                    let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);
                    if (targetPhxEvent) {
                        this.debounce(e.target, e, () => {
                            this.withinOwners(e.target, (view) => {
                                callback(e, event, view, e.target, targetPhxEvent, null);
                            });
                        });
                    } else {
                        dom_default.all(document, `[${windowBinding}]`, (el) => {
                            let phxEvent = el.getAttribute(windowBinding);
                            this.debounce(el, e, () => {
                                this.withinOwners(el, (view) => {
                                    callback(e, event, view, el, phxEvent, "window");
                                });
                            });
                        });
                    }
                });
            }
        }
        bindClicks() {
            window.addEventListener("mousedown", (e) => this.clickStartedAtTarget = e.target);
            this.bindClick("click", "click", false);
            this.bindClick("mousedown", "capture-click", true);
        }
        bindClick(eventName, bindingName, capture) {
            let click = this.binding(bindingName);
            window.addEventListener(eventName, (e) => {
                let target = null;
                if (capture) {
                    target = e.target.matches(`[${click}]`) ? e.target : e.target.querySelector(`[${click}]`);
                } else {
                    let clickStartedAtTarget = this.clickStartedAtTarget || e.target;
                    target = closestPhxBinding(clickStartedAtTarget, click);
                    this.dispatchClickAway(e, clickStartedAtTarget);
                    this.clickStartedAtTarget = null;
                }
                let phxEvent = target && target.getAttribute(click);
                if (!phxEvent) {
                    return;
                }
                if (target.getAttribute("href") === "#") {
                    e.preventDefault();
                }
                this.debounce(target, e, () => {
                    this.withinOwners(target, (view) => {
                        js_default.exec("click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e, target) }]);
                    });
                });
            }, capture);
        }
        dispatchClickAway(e, clickStartedAt) {
            let phxClickAway = this.binding("click-away");
            dom_default.all(document, `[${phxClickAway}]`, (el) => {
                if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
                    this.withinOwners(e.target, (view) => {
                        let phxEvent = el.getAttribute(phxClickAway);
                        if (js_default.isVisible(el)) {
                            js_default.exec("click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e, e.target) }]);
                        }
                    });
                }
            });
        }
        bindNav() {
            if (!browser_default.canPushState()) {
                return;
            }
            if (history.scrollRestoration) {
                history.scrollRestoration = "manual";
            }
            let scrollTimer = null;
            window.addEventListener("scroll", (_e) => {
                clearTimeout(scrollTimer);
                scrollTimer = setTimeout(() => {
                    browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
                }, 100);
            });
            window.addEventListener("popstate", (event) => {
                if (!this.registerNewLocation(window.location)) {
                    return;
                }
                let { type, id, root, scroll } = event.state || {};
                let href = window.location.href;
                this.requestDOMUpdate(() => {
                    if (this.main.isConnected() && (type === "patch" && id === this.main.id)) {
                        this.main.pushLinkPatch(href, null);
                    } else {
                        this.replaceMain(href, null, () => {
                            if (root) {
                                this.replaceRootHistory();
                            }
                            if (typeof scroll === "number") {
                                setTimeout(() => {
                                    window.scrollTo(0, scroll);
                                }, 0);
                            }
                        });
                    }
                });
            }, false);
            window.addEventListener("click", (e) => {
                let target = closestPhxBinding(e.target, PHX_LIVE_LINK);
                let type = target && target.getAttribute(PHX_LIVE_LINK);
                let wantsNewTab = e.metaKey || e.ctrlKey || e.button === 1;
                if (!type || !this.isConnected() || !this.main || wantsNewTab) {
                    return;
                }
                let href = target.href;
                let linkState = target.getAttribute(PHX_LINK_STATE);
                e.preventDefault();
                e.stopImmediatePropagation();
                if (this.pendingLink === href) {
                    return;
                }
                this.requestDOMUpdate(() => {
                    if (type === "patch") {
                        this.pushHistoryPatch(href, linkState, target);
                    } else if (type === "redirect") {
                        this.historyRedirect(href, linkState);
                    } else {
                        throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
                    }
                });
            }, false);
        }
        dispatchEvent(event, payload = {}) {
            dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
        }
        dispatchEvents(events) {
            events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
        }
        withPageLoading(info, callback) {
            dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
            let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
            return callback ? callback(done) : done;
        }
        pushHistoryPatch(href, linkState, targetEl) {
            this.withPageLoading({ to: href, kind: "patch" }, (done) => {
                this.main.pushLinkPatch(href, targetEl, (linkRef) => {
                    this.historyPatch(href, linkState, linkRef);
                    done();
                });
            });
        }
        historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
            if (!this.commitPendingLink(linkRef)) {
                return;
            }
            browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
            this.registerNewLocation(window.location);
        }
        historyRedirect(href, linkState, flash) {
            let scroll = window.scrollY;
            this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
                this.replaceMain(href, flash, () => {
                    browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
                    this.registerNewLocation(window.location);
                    done();
                });
            });
        }
        replaceRootHistory() {
            browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
        }
        registerNewLocation(newLocation) {
            let { pathname, search } = this.currentLocation;
            if (pathname + search === newLocation.pathname + newLocation.search) {
                return false;
            } else {
                this.currentLocation = clone(newLocation);
                return true;
            }
        }
        bindForms() {
            let iterations = 0;
            this.on("submit", (e) => {
                let phxEvent = e.target.getAttribute(this.binding("submit"));
                if (!phxEvent) {
                    return;
                }
                e.preventDefault();
                e.target.disabled = true;
                this.withinOwners(e.target, (view) => {
                    js_default.exec("submit", phxEvent, view, e.target, ["push", {}]);
                });
            }, false);
            for (let type of["change", "input"]) {
                this.on(type, (e) => {
                    let phxChange = this.binding("change");
                    let input = e.target;
                    let inputEvent = input.getAttribute(phxChange);
                    let formEvent = input.form && input.form.getAttribute(phxChange);
                    let phxEvent = inputEvent || formEvent;
                    if (!phxEvent) {
                        return;
                    }
                    if (input.type === "number" && input.validity && input.validity.badInput) {
                        return;
                    }
                    let dispatcher = inputEvent ? input : input.form;
                    let currentIterations = iterations;
                    iterations++;
                    let { at, type: lastType } = dom_default.private(input, "prev-iteration") || {};
                    if (at === currentIterations - 1 && type !== lastType) {
                        return;
                    }
                    dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
                    this.debounce(input, e, () => {
                        this.withinOwners(dispatcher, (view) => {
                            dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
                            if (!dom_default.isTextualInput(input)) {
                                this.setActiveElement(input);
                            }
                            js_default.exec("change", phxEvent, view, input, ["push", { _target: e.target.name, dispatcher }]);
                        });
                    });
                }, false);
            }
        }
        debounce(el, event, callback) {
            let phxDebounce = this.binding(PHX_DEBOUNCE);
            let phxThrottle = this.binding(PHX_THROTTLE);
            let defaultDebounce = this.defaults.debounce.toString();
            let defaultThrottle = this.defaults.throttle.toString();
            dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, callback);
        }
        silenceEvents(callback) {
            this.silenced = true;
            callback();
            this.silenced = false;
        }
        on(event, callback) {
            window.addEventListener(event, (e) => {
                if (!this.silenced) {
                    callback(e);
                }
            });
        }
    };
    var TransitionSet = class {
        constructor() {
            this.transitions = /* @__PURE__ */ new Set();
            this.pendingOps = [];
            this.reset();
        }
        reset() {
            this.transitions.forEach((timer) => {
                cancelTimeout(timer);
                this.transitions.delete(timer);
            });
            this.flushPendingOps();
        }
        after(callback) {
            if (this.size() === 0) {
                callback();
            } else {
                this.pushPendingOp(callback);
            }
        }
        addTransition(time, onStart, onDone) {
            onStart();
            let timer = setTimeout(() => {
                this.transitions.delete(timer);
                onDone();
                if (this.size() === 0) {
                    this.flushPendingOps();
                }
            }, time);
            this.transitions.add(timer);
        }
        pushPendingOp(op) {
            this.pendingOps.push(op);
        }
        size() {
            return this.transitions.size;
        }
        flushPendingOps() {
            this.pendingOps.forEach((op) => op());
            this.pendingOps = [];
        }
    };

    // js/app.js
    var import_topbar = __toModule(require_topbar());

    // js/template.js
    function init_templet(DarkIcon = "theme-toggle-dark-icon", LightIcon = "theme-toggle-light-icon", Btn = "theme-toggle") {
        if (localStorage.getItem("color-theme") === "dark" || !("color-theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches) {
            document.documentElement.classList.add("dark");
            document.documentElement.setAttribute("data-color-scheme", "dark");
        } else {
            document.documentElement.setAttribute("data-color-scheme", "light");
            document.documentElement.classList.remove("dark");
        }
        var themeToggleDarkIcon = document.getElementById(DarkIcon);
        var themeToggleLightIcon = document.getElementById(LightIcon);
        if (localStorage.getItem("color-theme") === "dark" || !("color-theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches) {
            themeToggleLightIcon.classList.remove("hidden");
        } else {
            themeToggleDarkIcon.classList.remove("hidden");
        }
        var themeToggleBtn = document.getElementById(Btn);
        themeToggleBtn.addEventListener("click", function() {
            themeToggleDarkIcon.classList.toggle("hidden");
            themeToggleLightIcon.classList.toggle("hidden");
            if (localStorage.getItem("color-theme")) {
                if (localStorage.getItem("color-theme") === "light") {
                    document.documentElement.classList.add("dark");
                    localStorage.setItem("color-theme", "dark");
                    document.documentElement.setAttribute("data-color-scheme", "dark");
                } else {
                    document.documentElement.classList.remove("dark");
                    localStorage.setItem("color-theme", "light");
                    document.documentElement.setAttribute("data-color-scheme", "light");
                }
            } else {
                if (document.documentElement.classList.contains("dark")) {
                    document.documentElement.classList.remove("dark");
                    localStorage.setItem("color-theme", "light");
                } else {
                    document.documentElement.classList.add("dark");
                    localStorage.setItem("color-theme", "dark");
                }
            }
        });
    }

    // node_modules/alpinejs/dist/module.esm.js
    var flushPending = false;
    var flushing = false;
    var queue = [];

    function scheduler(callback) {
        queueJob(callback);
    }

    function queueJob(job) {
        if (!queue.includes(job))
            queue.push(job);
        queueFlush();
    }

    function dequeueJob(job) {
        let index = queue.indexOf(job);
        if (index !== -1)
            queue.splice(index, 1);
    }

    function queueFlush() {
        if (!flushing && !flushPending) {
            flushPending = true;
            queueMicrotask(flushJobs);
        }
    }

    function flushJobs() {
        flushPending = false;
        flushing = true;
        for (let i = 0; i < queue.length; i++) {
            queue[i]();
        }
        queue.length = 0;
        flushing = false;
    }
    var reactive;
    var effect;
    var release;
    var raw;
    var shouldSchedule = true;

    function disableEffectScheduling(callback) {
        shouldSchedule = false;
        callback();
        shouldSchedule = true;
    }

    function setReactivityEngine(engine) {
        reactive = engine.reactive;
        release = engine.release;
        effect = (callback) => engine.effect(callback, {
            scheduler: (task) => {
                if (shouldSchedule) {
                    scheduler(task);
                } else {
                    task();
                }
            }
        });
        raw = engine.raw;
    }

    function overrideEffect(override) {
        effect = override;
    }

    function elementBoundEffect(el) {
        let cleanup2 = () => {};
        let wrappedEffect = (callback) => {
            let effectReference = effect(callback);
            if (!el._x_effects) {
                el._x_effects = /* @__PURE__ */ new Set();
                el._x_runEffects = () => {
                    el._x_effects.forEach((i) => i());
                };
            }
            el._x_effects.add(effectReference);
            cleanup2 = () => {
                if (effectReference === void 0)
                    return;
                el._x_effects.delete(effectReference);
                release(effectReference);
            };
            return effectReference;
        };
        return [wrappedEffect, () => {
            cleanup2();
        }];
    }
    var onAttributeAddeds = [];
    var onElRemoveds = [];
    var onElAddeds = [];

    function onElAdded(callback) {
        onElAddeds.push(callback);
    }

    function onElRemoved(el, callback) {
        if (typeof callback === "function") {
            if (!el._x_cleanups)
                el._x_cleanups = [];
            el._x_cleanups.push(callback);
        } else {
            callback = el;
            onElRemoveds.push(callback);
        }
    }

    function onAttributesAdded(callback) {
        onAttributeAddeds.push(callback);
    }

    function onAttributeRemoved(el, name, callback) {
        if (!el._x_attributeCleanups)
            el._x_attributeCleanups = {};
        if (!el._x_attributeCleanups[name])
            el._x_attributeCleanups[name] = [];
        el._x_attributeCleanups[name].push(callback);
    }

    function cleanupAttributes(el, names) {
        if (!el._x_attributeCleanups)
            return;
        Object.entries(el._x_attributeCleanups).forEach(([name, value]) => {
            if (names === void 0 || names.includes(name)) {
                value.forEach((i) => i());
                delete el._x_attributeCleanups[name];
            }
        });
    }
    var observer = new MutationObserver(onMutate);
    var currentlyObserving = false;

    function startObservingMutations() {
        observer.observe(document, { subtree: true, childList: true, attributes: true, attributeOldValue: true });
        currentlyObserving = true;
    }

    function stopObservingMutations() {
        flushObserver();
        observer.disconnect();
        currentlyObserving = false;
    }
    var recordQueue = [];
    var willProcessRecordQueue = false;

    function flushObserver() {
        recordQueue = recordQueue.concat(observer.takeRecords());
        if (recordQueue.length && !willProcessRecordQueue) {
            willProcessRecordQueue = true;
            queueMicrotask(() => {
                processRecordQueue();
                willProcessRecordQueue = false;
            });
        }
    }

    function processRecordQueue() {
        onMutate(recordQueue);
        recordQueue.length = 0;
    }

    function mutateDom(callback) {
        if (!currentlyObserving)
            return callback();
        stopObservingMutations();
        let result = callback();
        startObservingMutations();
        return result;
    }
    var isCollecting = false;
    var deferredMutations = [];

    function deferMutations() {
        isCollecting = true;
    }

    function flushAndStopDeferringMutations() {
        isCollecting = false;
        onMutate(deferredMutations);
        deferredMutations = [];
    }

    function onMutate(mutations) {
        if (isCollecting) {
            deferredMutations = deferredMutations.concat(mutations);
            return;
        }
        let addedNodes = [];
        let removedNodes = [];
        let addedAttributes = /* @__PURE__ */ new Map();
        let removedAttributes = /* @__PURE__ */ new Map();
        for (let i = 0; i < mutations.length; i++) {
            if (mutations[i].target._x_ignoreMutationObserver)
                continue;
            if (mutations[i].type === "childList") {
                mutations[i].addedNodes.forEach((node) => node.nodeType === 1 && addedNodes.push(node));
                mutations[i].removedNodes.forEach((node) => node.nodeType === 1 && removedNodes.push(node));
            }
            if (mutations[i].type === "attributes") {
                let el = mutations[i].target;
                let name = mutations[i].attributeName;
                let oldValue = mutations[i].oldValue;
                let add2 = () => {
                    if (!addedAttributes.has(el))
                        addedAttributes.set(el, []);
                    addedAttributes.get(el).push({ name, value: el.getAttribute(name) });
                };
                let remove = () => {
                    if (!removedAttributes.has(el))
                        removedAttributes.set(el, []);
                    removedAttributes.get(el).push(name);
                };
                if (el.hasAttribute(name) && oldValue === null) {
                    add2();
                } else if (el.hasAttribute(name)) {
                    remove();
                    add2();
                } else {
                    remove();
                }
            }
        }
        removedAttributes.forEach((attrs, el) => {
            cleanupAttributes(el, attrs);
        });
        addedAttributes.forEach((attrs, el) => {
            onAttributeAddeds.forEach((i) => i(el, attrs));
        });
        for (let node of removedNodes) {
            if (addedNodes.includes(node))
                continue;
            onElRemoveds.forEach((i) => i(node));
            if (node._x_cleanups) {
                while (node._x_cleanups.length)
                    node._x_cleanups.pop()();
            }
        }
        addedNodes.forEach((node) => {
            node._x_ignoreSelf = true;
            node._x_ignore = true;
        });
        for (let node of addedNodes) {
            if (removedNodes.includes(node))
                continue;
            if (!node.isConnected)
                continue;
            delete node._x_ignoreSelf;
            delete node._x_ignore;
            onElAddeds.forEach((i) => i(node));
            node._x_ignore = true;
            node._x_ignoreSelf = true;
        }
        addedNodes.forEach((node) => {
            delete node._x_ignoreSelf;
            delete node._x_ignore;
        });
        addedNodes = null;
        removedNodes = null;
        addedAttributes = null;
        removedAttributes = null;
    }

    function scope(node) {
        return mergeProxies(closestDataStack(node));
    }

    function addScopeToNode(node, data2, referenceNode) {
        node._x_dataStack = [data2, ...closestDataStack(referenceNode || node)];
        return () => {
            node._x_dataStack = node._x_dataStack.filter((i) => i !== data2);
        };
    }

    function refreshScope(element, scope2) {
        let existingScope = element._x_dataStack[0];
        Object.entries(scope2).forEach(([key, value]) => {
            existingScope[key] = value;
        });
    }

    function closestDataStack(node) {
        if (node._x_dataStack)
            return node._x_dataStack;
        if (typeof ShadowRoot === "function" && node instanceof ShadowRoot) {
            return closestDataStack(node.host);
        }
        if (!node.parentNode) {
            return [];
        }
        return closestDataStack(node.parentNode);
    }

    function mergeProxies(objects) {
        let thisProxy = new Proxy({}, {
            ownKeys: () => {
                return Array.from(new Set(objects.flatMap((i) => Object.keys(i))));
            },
            has: (target, name) => {
                return objects.some((obj) => obj.hasOwnProperty(name));
            },
            get: (target, name) => {
                return (objects.find((obj) => {
                    if (obj.hasOwnProperty(name)) {
                        let descriptor = Object.getOwnPropertyDescriptor(obj, name);
                        if (descriptor.get && descriptor.get._x_alreadyBound || descriptor.set && descriptor.set._x_alreadyBound) {
                            return true;
                        }
                        if ((descriptor.get || descriptor.set) && descriptor.enumerable) {
                            let getter = descriptor.get;
                            let setter = descriptor.set;
                            let property = descriptor;
                            getter = getter && getter.bind(thisProxy);
                            setter = setter && setter.bind(thisProxy);
                            if (getter)
                                getter._x_alreadyBound = true;
                            if (setter)
                                setter._x_alreadyBound = true;
                            Object.defineProperty(obj, name, __spreadProps(__spreadValues({}, property), {
                                get: getter,
                                set: setter
                            }));
                        }
                        return true;
                    }
                    return false;
                }) || {})[name];
            },
            set: (target, name, value) => {
                let closestObjectWithKey = objects.find((obj) => obj.hasOwnProperty(name));
                if (closestObjectWithKey) {
                    closestObjectWithKey[name] = value;
                } else {
                    objects[objects.length - 1][name] = value;
                }
                return true;
            }
        });
        return thisProxy;
    }

    function initInterceptors(data2) {
        let isObject22 = (val) => typeof val === "object" && !Array.isArray(val) && val !== null;
        let recurse = (obj, basePath = "") => {
            Object.entries(Object.getOwnPropertyDescriptors(obj)).forEach(([key, { value, enumerable }]) => {
                if (enumerable === false || value === void 0)
                    return;
                let path = basePath === "" ? key : `${basePath}.${key}`;
                if (typeof value === "object" && value !== null && value._x_interceptor) {
                    obj[key] = value.initialize(data2, path, key);
                } else {
                    if (isObject22(value) && value !== obj && !(value instanceof Element)) {
                        recurse(value, path);
                    }
                }
            });
        };
        return recurse(data2);
    }

    function interceptor(callback, mutateObj = () => {}) {
        let obj = {
            initialValue: void 0,
            _x_interceptor: true,
            initialize(data2, path, key) {
                return callback(this.initialValue, () => get(data2, path), (value) => set(data2, path, value), path, key);
            }
        };
        mutateObj(obj);
        return (initialValue) => {
            if (typeof initialValue === "object" && initialValue !== null && initialValue._x_interceptor) {
                let initialize = obj.initialize.bind(obj);
                obj.initialize = (data2, path, key) => {
                    let innerValue = initialValue.initialize(data2, path, key);
                    obj.initialValue = innerValue;
                    return initialize(data2, path, key);
                };
            } else {
                obj.initialValue = initialValue;
            }
            return obj;
        };
    }

    function get(obj, path) {
        return path.split(".").reduce((carry, segment) => carry[segment], obj);
    }

    function set(obj, path, value) {
        if (typeof path === "string")
            path = path.split(".");
        if (path.length === 1)
            obj[path[0]] = value;
        else if (path.length === 0)
            throw error;
        else {
            if (obj[path[0]])
                return set(obj[path[0]], path.slice(1), value);
            else {
                obj[path[0]] = {};
                return set(obj[path[0]], path.slice(1), value);
            }
        }
    }
    var magics = {};

    function magic(name, callback) {
        magics[name] = callback;
    }

    function injectMagics(obj, el) {
        Object.entries(magics).forEach(([name, callback]) => {
            Object.defineProperty(obj, `$${name}`, {
                get() {
                    let [utilities, cleanup2] = getElementBoundUtilities(el);
                    utilities = __spreadValues({ interceptor }, utilities);
                    onElRemoved(el, cleanup2);
                    return callback(el, utilities);
                },
                enumerable: false
            });
        });
        return obj;
    }

    function tryCatch(el, expression, callback, ...args) {
        try {
            return callback(...args);
        } catch (e) {
            handleError(e, el, expression);
        }
    }

    function handleError(error2, el, expression = void 0) {
        Object.assign(error2, { el, expression });
        console.warn(`Alpine Expression Error: ${error2.message}
  
  ${expression ? 'Expression: "' + expression + '"\n\n' : ""}`, el);
        setTimeout(() => {
            throw error2;
        }, 0);
    }
    var shouldAutoEvaluateFunctions = true;

    function dontAutoEvaluateFunctions(callback) {
        let cache = shouldAutoEvaluateFunctions;
        shouldAutoEvaluateFunctions = false;
        callback();
        shouldAutoEvaluateFunctions = cache;
    }

    function evaluate(el, expression, extras = {}) {
        let result;
        evaluateLater(el, expression)((value) => result = value, extras);
        return result;
    }

    function evaluateLater(...args) {
        return theEvaluatorFunction(...args);
    }
    var theEvaluatorFunction = normalEvaluator;

    function setEvaluator(newEvaluator) {
        theEvaluatorFunction = newEvaluator;
    }

    function normalEvaluator(el, expression) {
        let overriddenMagics = {};
        injectMagics(overriddenMagics, el);
        let dataStack = [overriddenMagics, ...closestDataStack(el)];
        if (typeof expression === "function") {
            return generateEvaluatorFromFunction(dataStack, expression);
        }
        let evaluator = generateEvaluatorFromString(dataStack, expression, el);
        return tryCatch.bind(null, el, expression, evaluator);
    }

    function generateEvaluatorFromFunction(dataStack, func) {
        return (receiver = () => {}, { scope: scope2 = {}, params = [] } = {}) => {
            let result = func.apply(mergeProxies([scope2, ...dataStack]), params);
            runIfTypeOfFunction(receiver, result);
        };
    }
    var evaluatorMemo = {};

    function generateFunctionFromString(expression, el) {
        if (evaluatorMemo[expression]) {
            return evaluatorMemo[expression];
        }
        let AsyncFunction = Object.getPrototypeOf(async function() {}).constructor;
        let rightSideSafeExpression = /^[\n\s]*if.*\(.*\)/.test(expression) || /^(let|const)\s/.test(expression) ? `(() => { ${expression} })()` : expression;
        const safeAsyncFunction = () => {
            try {
                return new AsyncFunction(["__self", "scope"], `with (scope) { __self.result = ${rightSideSafeExpression} }; __self.finished = true; return __self.result;`);
            } catch (error2) {
                handleError(error2, el, expression);
                return Promise.resolve();
            }
        };
        let func = safeAsyncFunction();
        evaluatorMemo[expression] = func;
        return func;
    }

    function generateEvaluatorFromString(dataStack, expression, el) {
        let func = generateFunctionFromString(expression, el);
        return (receiver = () => {}, { scope: scope2 = {}, params = [] } = {}) => {
            func.result = void 0;
            func.finished = false;
            let completeScope = mergeProxies([scope2, ...dataStack]);
            if (typeof func === "function") {
                let promise = func(func, completeScope).catch((error2) => handleError(error2, el, expression));
                if (func.finished) {
                    runIfTypeOfFunction(receiver, func.result, completeScope, params, el);
                    func.result = void 0;
                } else {
                    promise.then((result) => {
                        runIfTypeOfFunction(receiver, result, completeScope, params, el);
                    }).catch((error2) => handleError(error2, el, expression)).finally(() => func.result = void 0);
                }
            }
        };
    }

    function runIfTypeOfFunction(receiver, value, scope2, params, el) {
        if (shouldAutoEvaluateFunctions && typeof value === "function") {
            let result = value.apply(scope2, params);
            if (result instanceof Promise) {
                result.then((i) => runIfTypeOfFunction(receiver, i, scope2, params)).catch((error2) => handleError(error2, el, value));
            } else {
                receiver(result);
            }
        } else {
            receiver(value);
        }
    }
    var prefixAsString = "x-";

    function prefix(subject = "") {
        return prefixAsString + subject;
    }

    function setPrefix(newPrefix) {
        prefixAsString = newPrefix;
    }
    var directiveHandlers = {};

    function directive(name, callback) {
        directiveHandlers[name] = callback;
    }

    function directives(el, attributes, originalAttributeOverride) {
        let transformedAttributeMap = {};
        let directives2 = Array.from(attributes).map(toTransformedAttributes((newName, oldName) => transformedAttributeMap[newName] = oldName)).filter(outNonAlpineAttributes).map(toParsedDirectives(transformedAttributeMap, originalAttributeOverride)).sort(byPriority);
        return directives2.map((directive2) => {
            return getDirectiveHandler(el, directive2);
        });
    }

    function attributesOnly(attributes) {
        return Array.from(attributes).map(toTransformedAttributes()).filter((attr) => !outNonAlpineAttributes(attr));
    }
    var isDeferringHandlers = false;
    var directiveHandlerStacks = /* @__PURE__ */ new Map();
    var currentHandlerStackKey = Symbol();

    function deferHandlingDirectives(callback) {
        isDeferringHandlers = true;
        let key = Symbol();
        currentHandlerStackKey = key;
        directiveHandlerStacks.set(key, []);
        let flushHandlers = () => {
            while (directiveHandlerStacks.get(key).length)
                directiveHandlerStacks.get(key).shift()();
            directiveHandlerStacks.delete(key);
        };
        let stopDeferring = () => {
            isDeferringHandlers = false;
            flushHandlers();
        };
        callback(flushHandlers);
        stopDeferring();
    }

    function getElementBoundUtilities(el) {
        let cleanups = [];
        let cleanup2 = (callback) => cleanups.push(callback);
        let [effect3, cleanupEffect] = elementBoundEffect(el);
        cleanups.push(cleanupEffect);
        let utilities = {
            Alpine: alpine_default,
            effect: effect3,
            cleanup: cleanup2,
            evaluateLater: evaluateLater.bind(evaluateLater, el),
            evaluate: evaluate.bind(evaluate, el)
        };
        let doCleanup = () => cleanups.forEach((i) => i());
        return [utilities, doCleanup];
    }

    function getDirectiveHandler(el, directive2) {
        let noop2 = () => {};
        let handler3 = directiveHandlers[directive2.type] || noop2;
        let [utilities, cleanup2] = getElementBoundUtilities(el);
        onAttributeRemoved(el, directive2.original, cleanup2);
        let fullHandler = () => {
            if (el._x_ignore || el._x_ignoreSelf)
                return;
            handler3.inline && handler3.inline(el, directive2, utilities);
            handler3 = handler3.bind(handler3, el, directive2, utilities);
            isDeferringHandlers ? directiveHandlerStacks.get(currentHandlerStackKey).push(handler3) : handler3();
        };
        fullHandler.runCleanups = cleanup2;
        return fullHandler;
    }
    var startingWith = (subject, replacement) => ({ name, value }) => {
        if (name.startsWith(subject))
            name = name.replace(subject, replacement);
        return { name, value };
    };
    var into = (i) => i;

    function toTransformedAttributes(callback = () => {}) {
        return ({ name, value }) => {
            let { name: newName, value: newValue } = attributeTransformers.reduce((carry, transform) => {
                return transform(carry);
            }, { name, value });
            if (newName !== name)
                callback(newName, name);
            return { name: newName, value: newValue };
        };
    }
    var attributeTransformers = [];

    function mapAttributes(callback) {
        attributeTransformers.push(callback);
    }

    function outNonAlpineAttributes({ name }) {
        return alpineAttributeRegex().test(name);
    }
    var alpineAttributeRegex = () => new RegExp(`^${prefixAsString}([^:^.]+)\\b`);

    function toParsedDirectives(transformedAttributeMap, originalAttributeOverride) {
        return ({ name, value }) => {
            let typeMatch = name.match(alpineAttributeRegex());
            let valueMatch = name.match(/:([a-zA-Z0-9\-:]+)/);
            let modifiers = name.match(/\.[^.\]]+(?=[^\]]*$)/g) || [];
            let original = originalAttributeOverride || transformedAttributeMap[name] || name;
            return {
                type: typeMatch ? typeMatch[1] : null,
                value: valueMatch ? valueMatch[1] : null,
                modifiers: modifiers.map((i) => i.replace(".", "")),
                expression: value,
                original
            };
        };
    }
    var DEFAULT = "DEFAULT";
    var directiveOrder = [
        "ignore",
        "ref",
        "data",
        "id",
        "bind",
        "init",
        "for",
        "mask",
        "model",
        "modelable",
        "transition",
        "show",
        "if",
        DEFAULT,
        "teleport",
        "element"
    ];

    function byPriority(a, b) {
        let typeA = directiveOrder.indexOf(a.type) === -1 ? DEFAULT : a.type;
        let typeB = directiveOrder.indexOf(b.type) === -1 ? DEFAULT : b.type;
        return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);
    }

    function dispatch(el, name, detail = {}) {
        el.dispatchEvent(new CustomEvent(name, {
            detail,
            bubbles: true,
            composed: true,
            cancelable: true
        }));
    }
    var tickStack = [];
    var isHolding = false;

    function nextTick(callback = () => {}) {
        queueMicrotask(() => {
            isHolding || setTimeout(() => {
                releaseNextTicks();
            });
        });
        return new Promise((res) => {
            tickStack.push(() => {
                callback();
                res();
            });
        });
    }

    function releaseNextTicks() {
        isHolding = false;
        while (tickStack.length)
            tickStack.shift()();
    }

    function holdNextTicks() {
        isHolding = true;
    }

    function walk(el, callback) {
        if (typeof ShadowRoot === "function" && el instanceof ShadowRoot) {
            Array.from(el.children).forEach((el2) => walk(el2, callback));
            return;
        }
        let skip = false;
        callback(el, () => skip = true);
        if (skip)
            return;
        let node = el.firstElementChild;
        while (node) {
            walk(node, callback, false);
            node = node.nextElementSibling;
        }
    }

    function warn(message, ...args) {
        console.warn(`Alpine Warning: ${message}`, ...args);
    }

    function start() {
        if (!document.body)
            warn("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?");
        dispatch(document, "alpine:init");
        dispatch(document, "alpine:initializing");
        startObservingMutations();
        onElAdded((el) => initTree(el, walk));
        onElRemoved((el) => destroyTree(el));
        onAttributesAdded((el, attrs) => {
            directives(el, attrs).forEach((handle) => handle());
        });
        let outNestedComponents = (el) => !closestRoot(el.parentElement, true);
        Array.from(document.querySelectorAll(allSelectors())).filter(outNestedComponents).forEach((el) => {
            initTree(el);
        });
        dispatch(document, "alpine:initialized");
    }
    var rootSelectorCallbacks = [];
    var initSelectorCallbacks = [];

    function rootSelectors() {
        return rootSelectorCallbacks.map((fn) => fn());
    }

    function allSelectors() {
        return rootSelectorCallbacks.concat(initSelectorCallbacks).map((fn) => fn());
    }

    function addRootSelector(selectorCallback) {
        rootSelectorCallbacks.push(selectorCallback);
    }

    function addInitSelector(selectorCallback) {
        initSelectorCallbacks.push(selectorCallback);
    }

    function closestRoot(el, includeInitSelectors = false) {
        return findClosest(el, (element) => {
            const selectors = includeInitSelectors ? allSelectors() : rootSelectors();
            if (selectors.some((selector) => element.matches(selector)))
                return true;
        });
    }

    function findClosest(el, callback) {
        if (!el)
            return;
        if (callback(el))
            return el;
        if (el._x_teleportBack)
            el = el._x_teleportBack;
        if (!el.parentElement)
            return;
        return findClosest(el.parentElement, callback);
    }

    function isRoot(el) {
        return rootSelectors().some((selector) => el.matches(selector));
    }

    function initTree(el, walker = walk) {
        deferHandlingDirectives(() => {
            walker(el, (el2, skip) => {
                directives(el2, el2.attributes).forEach((handle) => handle());
                el2._x_ignore && skip();
            });
        });
    }

    function destroyTree(root) {
        walk(root, (el) => cleanupAttributes(el));
    }

    function setClasses(el, value) {
        if (Array.isArray(value)) {
            return setClassesFromString(el, value.join(" "));
        } else if (typeof value === "object" && value !== null) {
            return setClassesFromObject(el, value);
        } else if (typeof value === "function") {
            return setClasses(el, value());
        }
        return setClassesFromString(el, value);
    }

    function setClassesFromString(el, classString) {
        let split = (classString2) => classString2.split(" ").filter(Boolean);
        let missingClasses = (classString2) => classString2.split(" ").filter((i) => !el.classList.contains(i)).filter(Boolean);
        let addClassesAndReturnUndo = (classes) => {
            el.classList.add(...classes);
            return () => {
                el.classList.remove(...classes);
            };
        };
        classString = classString === true ? classString = "" : classString || "";
        return addClassesAndReturnUndo(missingClasses(classString));
    }

    function setClassesFromObject(el, classObject) {
        let split = (classString) => classString.split(" ").filter(Boolean);
        let forAdd = Object.entries(classObject).flatMap(([classString, bool]) => bool ? split(classString) : false).filter(Boolean);
        let forRemove = Object.entries(classObject).flatMap(([classString, bool]) => !bool ? split(classString) : false).filter(Boolean);
        let added = [];
        let removed = [];
        forRemove.forEach((i) => {
            if (el.classList.contains(i)) {
                el.classList.remove(i);
                removed.push(i);
            }
        });
        forAdd.forEach((i) => {
            if (!el.classList.contains(i)) {
                el.classList.add(i);
                added.push(i);
            }
        });
        return () => {
            removed.forEach((i) => el.classList.add(i));
            added.forEach((i) => el.classList.remove(i));
        };
    }

    function setStyles(el, value) {
        if (typeof value === "object" && value !== null) {
            return setStylesFromObject(el, value);
        }
        return setStylesFromString(el, value);
    }

    function setStylesFromObject(el, value) {
        let previousStyles = {};
        Object.entries(value).forEach(([key, value2]) => {
            previousStyles[key] = el.style[key];
            if (!key.startsWith("--")) {
                key = kebabCase(key);
            }
            el.style.setProperty(key, value2);
        });
        setTimeout(() => {
            if (el.style.length === 0) {
                el.removeAttribute("style");
            }
        });
        return () => {
            setStyles(el, previousStyles);
        };
    }

    function setStylesFromString(el, value) {
        let cache = el.getAttribute("style", value);
        el.setAttribute("style", value);
        return () => {
            el.setAttribute("style", cache || "");
        };
    }

    function kebabCase(subject) {
        return subject.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
    }

    function once(callback, fallback = () => {}) {
        let called = false;
        return function() {
            if (!called) {
                called = true;
                callback.apply(this, arguments);
            } else {
                fallback.apply(this, arguments);
            }
        };
    }
    directive("transition", (el, { value, modifiers, expression }, { evaluate: evaluate2 }) => {
        if (typeof expression === "function")
            expression = evaluate2(expression);
        if (!expression) {
            registerTransitionsFromHelper(el, modifiers, value);
        } else {
            registerTransitionsFromClassString(el, expression, value);
        }
    });

    function registerTransitionsFromClassString(el, classString, stage) {
        registerTransitionObject(el, setClasses, "");
        let directiveStorageMap = {
            enter: (classes) => {
                el._x_transition.enter.during = classes;
            },
            "enter-start": (classes) => {
                el._x_transition.enter.start = classes;
            },
            "enter-end": (classes) => {
                el._x_transition.enter.end = classes;
            },
            leave: (classes) => {
                el._x_transition.leave.during = classes;
            },
            "leave-start": (classes) => {
                el._x_transition.leave.start = classes;
            },
            "leave-end": (classes) => {
                el._x_transition.leave.end = classes;
            }
        };
        directiveStorageMap[stage](classString);
    }

    function registerTransitionsFromHelper(el, modifiers, stage) {
        registerTransitionObject(el, setStyles);
        let doesntSpecify = !modifiers.includes("in") && !modifiers.includes("out") && !stage;
        let transitioningIn = doesntSpecify || modifiers.includes("in") || ["enter"].includes(stage);
        let transitioningOut = doesntSpecify || modifiers.includes("out") || ["leave"].includes(stage);
        if (modifiers.includes("in") && !doesntSpecify) {
            modifiers = modifiers.filter((i, index) => index < modifiers.indexOf("out"));
        }
        if (modifiers.includes("out") && !doesntSpecify) {
            modifiers = modifiers.filter((i, index) => index > modifiers.indexOf("out"));
        }
        let wantsAll = !modifiers.includes("opacity") && !modifiers.includes("scale");
        let wantsOpacity = wantsAll || modifiers.includes("opacity");
        let wantsScale = wantsAll || modifiers.includes("scale");
        let opacityValue = wantsOpacity ? 0 : 1;
        let scaleValue = wantsScale ? modifierValue(modifiers, "scale", 95) / 100 : 1;
        let delay = modifierValue(modifiers, "delay", 0);
        let origin = modifierValue(modifiers, "origin", "center");
        let property = "opacity, transform";
        let durationIn = modifierValue(modifiers, "duration", 150) / 1e3;
        let durationOut = modifierValue(modifiers, "duration", 75) / 1e3;
        let easing = `cubic-bezier(0.4, 0.0, 0.2, 1)`;
        if (transitioningIn) {
            el._x_transition.enter.during = {
                transformOrigin: origin,
                transitionDelay: delay,
                transitionProperty: property,
                transitionDuration: `${durationIn}s`,
                transitionTimingFunction: easing
            };
            el._x_transition.enter.start = {
                opacity: opacityValue,
                transform: `scale(${scaleValue})`
            };
            el._x_transition.enter.end = {
                opacity: 1,
                transform: `scale(1)`
            };
        }
        if (transitioningOut) {
            el._x_transition.leave.during = {
                transformOrigin: origin,
                transitionDelay: delay,
                transitionProperty: property,
                transitionDuration: `${durationOut}s`,
                transitionTimingFunction: easing
            };
            el._x_transition.leave.start = {
                opacity: 1,
                transform: `scale(1)`
            };
            el._x_transition.leave.end = {
                opacity: opacityValue,
                transform: `scale(${scaleValue})`
            };
        }
    }

    function registerTransitionObject(el, setFunction, defaultValue = {}) {
        if (!el._x_transition)
            el._x_transition = {
                enter: { during: defaultValue, start: defaultValue, end: defaultValue },
                leave: { during: defaultValue, start: defaultValue, end: defaultValue },
                in (before = () => {}, after = () => {}) {
                    transition(el, setFunction, {
                        during: this.enter.during,
                        start: this.enter.start,
                        end: this.enter.end
                    }, before, after);
                },
                out(before = () => {}, after = () => {}) {
                    transition(el, setFunction, {
                        during: this.leave.during,
                        start: this.leave.start,
                        end: this.leave.end
                    }, before, after);
                }
            };
    }
    window.Element.prototype._x_toggleAndCascadeWithTransitions = function(el, value, show, hide) {
        let clickAwayCompatibleShow = () => {
            document.visibilityState === "visible" ? requestAnimationFrame(show) : setTimeout(show);
        };
        if (value) {
            if (el._x_transition && (el._x_transition.enter || el._x_transition.leave)) {
                el._x_transition.enter && (Object.entries(el._x_transition.enter.during).length || Object.entries(el._x_transition.enter.start).length || Object.entries(el._x_transition.enter.end).length) ? el._x_transition.in(show) : clickAwayCompatibleShow();
            } else {
                el._x_transition ? el._x_transition.in(show) : clickAwayCompatibleShow();
            }
            return;
        }
        el._x_hidePromise = el._x_transition ? new Promise((resolve, reject) => {
            el._x_transition.out(() => {}, () => resolve(hide));
            el._x_transitioning.beforeCancel(() => reject({ isFromCancelledTransition: true }));
        }) : Promise.resolve(hide);
        queueMicrotask(() => {
            let closest = closestHide(el);
            if (closest) {
                if (!closest._x_hideChildren)
                    closest._x_hideChildren = [];
                closest._x_hideChildren.push(el);
            } else {
                queueMicrotask(() => {
                    let hideAfterChildren = (el2) => {
                        let carry = Promise.all([
                            el2._x_hidePromise,
                            ...(el2._x_hideChildren || []).map(hideAfterChildren)
                        ]).then(([i]) => i());
                        delete el2._x_hidePromise;
                        delete el2._x_hideChildren;
                        return carry;
                    };
                    hideAfterChildren(el).catch((e) => {
                        if (!e.isFromCancelledTransition)
                            throw e;
                    });
                });
            }
        });
    };

    function closestHide(el) {
        let parent = el.parentNode;
        if (!parent)
            return;
        return parent._x_hidePromise ? parent : closestHide(parent);
    }

    function transition(el, setFunction, { during, start: start2, end } = {}, before = () => {}, after = () => {}) {
        if (el._x_transitioning)
            el._x_transitioning.cancel();
        if (Object.keys(during).length === 0 && Object.keys(start2).length === 0 && Object.keys(end).length === 0) {
            before();
            after();
            return;
        }
        let undoStart, undoDuring, undoEnd;
        performTransition(el, {
            start() {
                undoStart = setFunction(el, start2);
            },
            during() {
                undoDuring = setFunction(el, during);
            },
            before,
            end() {
                undoStart();
                undoEnd = setFunction(el, end);
            },
            after,
            cleanup() {
                undoDuring();
                undoEnd();
            }
        });
    }

    function performTransition(el, stages) {
        let interrupted, reachedBefore, reachedEnd;
        let finish = once(() => {
            mutateDom(() => {
                interrupted = true;
                if (!reachedBefore)
                    stages.before();
                if (!reachedEnd) {
                    stages.end();
                    releaseNextTicks();
                }
                stages.after();
                if (el.isConnected)
                    stages.cleanup();
                delete el._x_transitioning;
            });
        });
        el._x_transitioning = {
            beforeCancels: [],
            beforeCancel(callback) {
                this.beforeCancels.push(callback);
            },
            cancel: once(function() {
                while (this.beforeCancels.length) {
                    this.beforeCancels.shift()();
                };
                finish();
            }),
            finish
        };
        mutateDom(() => {
            stages.start();
            stages.during();
        });
        holdNextTicks();
        requestAnimationFrame(() => {
            if (interrupted)
                return;
            let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, "").replace("s", "")) * 1e3;
            let delay = Number(getComputedStyle(el).transitionDelay.replace(/,.*/, "").replace("s", "")) * 1e3;
            if (duration === 0)
                duration = Number(getComputedStyle(el).animationDuration.replace("s", "")) * 1e3;
            mutateDom(() => {
                stages.before();
            });
            reachedBefore = true;
            requestAnimationFrame(() => {
                if (interrupted)
                    return;
                mutateDom(() => {
                    stages.end();
                });
                releaseNextTicks();
                setTimeout(el._x_transitioning.finish, duration + delay);
                reachedEnd = true;
            });
        });
    }

    function modifierValue(modifiers, key, fallback) {
        if (modifiers.indexOf(key) === -1)
            return fallback;
        const rawValue = modifiers[modifiers.indexOf(key) + 1];
        if (!rawValue)
            return fallback;
        if (key === "scale") {
            if (isNaN(rawValue))
                return fallback;
        }
        if (key === "duration") {
            let match3 = rawValue.match(/([0-9]+)ms/);
            if (match3)
                return match3[1];
        }
        if (key === "origin") {
            if (["top", "right", "left", "center", "bottom"].includes(modifiers[modifiers.indexOf(key) + 2])) {
                return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(" ");
            }
        }
        return rawValue;
    }
    var isCloning = false;

    function skipDuringClone(callback, fallback = () => {}) {
        return (...args) => isCloning ? fallback(...args) : callback(...args);
    }

    function clone2(oldEl, newEl) {
        if (!newEl._x_dataStack)
            newEl._x_dataStack = oldEl._x_dataStack;
        isCloning = true;
        dontRegisterReactiveSideEffects(() => {
            cloneTree(newEl);
        });
        isCloning = false;
    }

    function cloneTree(el) {
        let hasRunThroughFirstEl = false;
        let shallowWalker = (el2, callback) => {
            walk(el2, (el3, skip) => {
                if (hasRunThroughFirstEl && isRoot(el3))
                    return skip();
                hasRunThroughFirstEl = true;
                callback(el3, skip);
            });
        };
        initTree(el, shallowWalker);
    }

    function dontRegisterReactiveSideEffects(callback) {
        let cache = effect;
        overrideEffect((callback2, el) => {
            let storedEffect = cache(callback2);
            release(storedEffect);
            return () => {};
        });
        callback();
        overrideEffect(cache);
    }

    function bind(el, name, value, modifiers = []) {
        if (!el._x_bindings)
            el._x_bindings = reactive({});
        el._x_bindings[name] = value;
        name = modifiers.includes("camel") ? camelCase(name) : name;
        switch (name) {
            case "value":
                bindInputValue(el, value);
                break;
            case "style":
                bindStyles(el, value);
                break;
            case "class":
                bindClasses(el, value);
                break;
            default:
                bindAttribute(el, name, value);
                break;
        }
    }

    function bindInputValue(el, value) {
        if (el.type === "radio") {
            if (el.attributes.value === void 0) {
                el.value = value;
            }
            if (window.fromModel) {
                el.checked = checkedAttrLooseCompare(el.value, value);
            }
        } else if (el.type === "checkbox") {
            if (Number.isInteger(value)) {
                el.value = value;
            } else if (!Number.isInteger(value) && !Array.isArray(value) && typeof value !== "boolean" && ![null, void 0].includes(value)) {
                el.value = String(value);
            } else {
                if (Array.isArray(value)) {
                    el.checked = value.some((val) => checkedAttrLooseCompare(val, el.value));
                } else {
                    el.checked = !!value;
                }
            }
        } else if (el.tagName === "SELECT") {
            updateSelect(el, value);
        } else {
            if (el.value === value)
                return;
            el.value = value;
        }
    }

    function bindClasses(el, value) {
        if (el._x_undoAddedClasses)
            el._x_undoAddedClasses();
        el._x_undoAddedClasses = setClasses(el, value);
    }

    function bindStyles(el, value) {
        if (el._x_undoAddedStyles)
            el._x_undoAddedStyles();
        el._x_undoAddedStyles = setStyles(el, value);
    }

    function bindAttribute(el, name, value) {
        if ([null, void 0, false].includes(value) && attributeShouldntBePreservedIfFalsy(name)) {
            el.removeAttribute(name);
        } else {
            if (isBooleanAttr(name))
                value = name;
            setIfChanged(el, name, value);
        }
    }

    function setIfChanged(el, attrName, value) {
        if (el.getAttribute(attrName) != value) {
            el.setAttribute(attrName, value);
        }
    }

    function updateSelect(el, value) {
        const arrayWrappedValue = [].concat(value).map((value2) => {
            return value2 + "";
        });
        Array.from(el.options).forEach((option) => {
            option.selected = arrayWrappedValue.includes(option.value);
        });
    }

    function camelCase(subject) {
        return subject.toLowerCase().replace(/-(\w)/g, (match3, char) => char.toUpperCase());
    }

    function checkedAttrLooseCompare(valueA, valueB) {
        return valueA == valueB;
    }

    function isBooleanAttr(attrName) {
        const booleanAttributes = [
            "disabled",
            "checked",
            "required",
            "readonly",
            "hidden",
            "open",
            "selected",
            "autofocus",
            "itemscope",
            "multiple",
            "novalidate",
            "allowfullscreen",
            "allowpaymentrequest",
            "formnovalidate",
            "autoplay",
            "controls",
            "loop",
            "muted",
            "playsinline",
            "default",
            "ismap",
            "reversed",
            "async",
            "defer",
            "nomodule"
        ];
        return booleanAttributes.includes(attrName);
    }

    function attributeShouldntBePreservedIfFalsy(name) {
        return !["aria-pressed", "aria-checked", "aria-expanded", "aria-selected"].includes(name);
    }

    function getBinding(el, name, fallback) {
        if (el._x_bindings && el._x_bindings[name] !== void 0)
            return el._x_bindings[name];
        let attr = el.getAttribute(name);
        if (attr === null)
            return typeof fallback === "function" ? fallback() : fallback;
        if (isBooleanAttr(name)) {
            return !![name, "true"].includes(attr);
        }
        if (attr === "")
            return true;
        return attr;
    }

    function debounce(func, wait) {
        var timeout;
        return function() {
            var context = this,
                args = arguments;
            var later = function() {
                timeout = null;
                func.apply(context, args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    function throttle(func, limit) {
        let inThrottle;
        return function() {
            let context = this,
                args = arguments;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }

    function plugin(callback) {
        callback(alpine_default);
    }
    var stores = {};
    var isReactive = false;

    function store(name, value) {
        if (!isReactive) {
            stores = reactive(stores);
            isReactive = true;
        }
        if (value === void 0) {
            return stores[name];
        }
        stores[name] = value;
        if (typeof value === "object" && value !== null && value.hasOwnProperty("init") && typeof value.init === "function") {
            stores[name].init();
        }
        initInterceptors(stores[name]);
    }

    function getStores() {
        return stores;
    }
    var binds = {};

    function bind2(name, object) {
        binds[name] = typeof object !== "function" ? () => object : object;
    }

    function injectBindingProviders(obj) {
        Object.entries(binds).forEach(([name, callback]) => {
            Object.defineProperty(obj, name, {
                get() {
                    return (...args) => {
                        return callback(...args);
                    };
                }
            });
        });
        return obj;
    }
    var datas = {};

    function data(name, callback) {
        datas[name] = callback;
    }

    function injectDataProviders(obj, context) {
        Object.entries(datas).forEach(([name, callback]) => {
            Object.defineProperty(obj, name, {
                get() {
                    return (...args) => {
                        return callback.bind(context)(...args);
                    };
                },
                enumerable: false
            });
        });
        return obj;
    }
    var Alpine = {
        get reactive() {
            return reactive;
        },
        get release() {
            return release;
        },
        get effect() {
            return effect;
        },
        get raw() {
            return raw;
        },
        version: "3.10.0",
        flushAndStopDeferringMutations,
        dontAutoEvaluateFunctions,
        disableEffectScheduling,
        setReactivityEngine,
        closestDataStack,
        skipDuringClone,
        addRootSelector,
        addInitSelector,
        addScopeToNode,
        deferMutations,
        mapAttributes,
        evaluateLater,
        setEvaluator,
        mergeProxies,
        findClosest,
        closestRoot,
        interceptor,
        transition,
        setStyles,
        mutateDom,
        directive,
        throttle,
        debounce,
        evaluate,
        initTree,
        nextTick,
        prefixed: prefix,
        prefix: setPrefix,
        plugin,
        magic,
        store,
        start,
        clone: clone2,
        bound: getBinding,
        $data: scope,
        data,
        bind: bind2
    };
    var alpine_default = Alpine;

    function makeMap(str, expectsLowerCase) {
        const map = Object.create(null);
        const list = str.split(",");
        for (let i = 0; i < list.length; i++) {
            map[list[i]] = true;
        }
        return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];
    }
    var PatchFlagNames = {
        [1]: `TEXT`,
        [2]: `CLASS`,
        [4]: `STYLE`,
        [8]: `PROPS`,
        [16]: `FULL_PROPS`,
        [32]: `HYDRATE_EVENTS`,
        [64]: `STABLE_FRAGMENT`,
        [128]: `KEYED_FRAGMENT`,
        [256]: `UNKEYED_FRAGMENT`,
        [512]: `NEED_PATCH`,
        [1024]: `DYNAMIC_SLOTS`,
        [2048]: `DEV_ROOT_FRAGMENT`,
        [-1]: `HOISTED`,
        [-2]: `BAIL`
    };
    var slotFlagsText = {
        [1]: "STABLE",
        [2]: "DYNAMIC",
        [3]: "FORWARDED"
    };
    var specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
    var isBooleanAttr2 = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
    var EMPTY_OBJ = false ? Object.freeze({}) : {};
    var EMPTY_ARR = false ? Object.freeze([]) : [];
    var extend = Object.assign;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var hasOwn = (val, key) => hasOwnProperty.call(val, key);
    var isArray = Array.isArray;
    var isMap = (val) => toTypeString(val) === "[object Map]";
    var isString = (val) => typeof val === "string";
    var isSymbol = (val) => typeof val === "symbol";
    var isObject2 = (val) => val !== null && typeof val === "object";
    var objectToString = Object.prototype.toString;
    var toTypeString = (value) => objectToString.call(value);
    var toRawType = (value) => {
        return toTypeString(value).slice(8, -1);
    };
    var isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
    var cacheStringFunction = (fn) => {
        const cache = Object.create(null);
        return (str) => {
            const hit = cache[str];
            return hit || (cache[str] = fn(str));
        };
    };
    var camelizeRE = /-(\w)/g;
    var camelize = cacheStringFunction((str) => {
        return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
    });
    var hyphenateRE = /\B([A-Z])/g;
    var hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
    var capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
    var toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
    var hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);
    var targetMap = new WeakMap();
    var effectStack = [];
    var activeEffect;
    var ITERATE_KEY = Symbol(false ? "iterate" : "");
    var MAP_KEY_ITERATE_KEY = Symbol(false ? "Map key iterate" : "");

    function isEffect(fn) {
        return fn && fn._isEffect === true;
    }

    function effect2(fn, options = EMPTY_OBJ) {
        if (isEffect(fn)) {
            fn = fn.raw;
        }
        const effect3 = createReactiveEffect(fn, options);
        if (!options.lazy) {
            effect3();
        }
        return effect3;
    }

    function stop(effect3) {
        if (effect3.active) {
            cleanup(effect3);
            if (effect3.options.onStop) {
                effect3.options.onStop();
            }
            effect3.active = false;
        }
    }
    var uid = 0;

    function createReactiveEffect(fn, options) {
        const effect3 = function reactiveEffect() {
            if (!effect3.active) {
                return fn();
            }
            if (!effectStack.includes(effect3)) {
                cleanup(effect3);
                try {
                    enableTracking();
                    effectStack.push(effect3);
                    activeEffect = effect3;
                    return fn();
                } finally {
                    effectStack.pop();
                    resetTracking();
                    activeEffect = effectStack[effectStack.length - 1];
                }
            }
        };
        effect3.id = uid++;
        effect3.allowRecurse = !!options.allowRecurse;
        effect3._isEffect = true;
        effect3.active = true;
        effect3.raw = fn;
        effect3.deps = [];
        effect3.options = options;
        return effect3;
    }

    function cleanup(effect3) {
        const { deps } = effect3;
        if (deps.length) {
            for (let i = 0; i < deps.length; i++) {
                deps[i].delete(effect3);
            }
            deps.length = 0;
        }
    }
    var shouldTrack = true;
    var trackStack = [];

    function pauseTracking() {
        trackStack.push(shouldTrack);
        shouldTrack = false;
    }

    function enableTracking() {
        trackStack.push(shouldTrack);
        shouldTrack = true;
    }

    function resetTracking() {
        const last = trackStack.pop();
        shouldTrack = last === void 0 ? true : last;
    }

    function track(target, type, key) {
        if (!shouldTrack || activeEffect === void 0) {
            return;
        }
        let depsMap = targetMap.get(target);
        if (!depsMap) {
            targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
        }
        let dep = depsMap.get(key);
        if (!dep) {
            depsMap.set(key, dep = /* @__PURE__ */ new Set());
        }
        if (!dep.has(activeEffect)) {
            dep.add(activeEffect);
            activeEffect.deps.push(dep);
            if (false) {
                activeEffect.options.onTrack({
                    effect: activeEffect,
                    target,
                    type,
                    key
                });
            }
        }
    }

    function trigger(target, type, key, newValue, oldValue, oldTarget) {
        const depsMap = targetMap.get(target);
        if (!depsMap) {
            return;
        }
        const effects = /* @__PURE__ */ new Set();
        const add2 = (effectsToAdd) => {
            if (effectsToAdd) {
                effectsToAdd.forEach((effect3) => {
                    if (effect3 !== activeEffect || effect3.allowRecurse) {
                        effects.add(effect3);
                    }
                });
            }
        };
        if (type === "clear") {
            depsMap.forEach(add2);
        } else if (key === "length" && isArray(target)) {
            depsMap.forEach((dep, key2) => {
                if (key2 === "length" || key2 >= newValue) {
                    add2(dep);
                }
            });
        } else {
            if (key !== void 0) {
                add2(depsMap.get(key));
            }
            switch (type) {
                case "add":
                    if (!isArray(target)) {
                        add2(depsMap.get(ITERATE_KEY));
                        if (isMap(target)) {
                            add2(depsMap.get(MAP_KEY_ITERATE_KEY));
                        }
                    } else if (isIntegerKey(key)) {
                        add2(depsMap.get("length"));
                    }
                    break;
                case "delete":
                    if (!isArray(target)) {
                        add2(depsMap.get(ITERATE_KEY));
                        if (isMap(target)) {
                            add2(depsMap.get(MAP_KEY_ITERATE_KEY));
                        }
                    }
                    break;
                case "set":
                    if (isMap(target)) {
                        add2(depsMap.get(ITERATE_KEY));
                    }
                    break;
            }
        }
        const run = (effect3) => {
            if (false) {
                effect3.options.onTrigger({
                    effect: effect3,
                    target,
                    key,
                    type,
                    newValue,
                    oldValue,
                    oldTarget
                });
            }
            if (effect3.options.scheduler) {
                effect3.options.scheduler(effect3);
            } else {
                effect3();
            }
        };
        effects.forEach(run);
    }
    var isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
    var builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));
    var get2 = /* @__PURE__ */ createGetter();
    var shallowGet = /* @__PURE__ */ createGetter(false, true);
    var readonlyGet = /* @__PURE__ */ createGetter(true);
    var shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
    var arrayInstrumentations = {};
    ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
        const method = Array.prototype[key];
        arrayInstrumentations[key] = function(...args) {
            const arr = toRaw(this);
            for (let i = 0, l = this.length; i < l; i++) {
                track(arr, "get", i + "");
            }
            const res = method.apply(arr, args);
            if (res === -1 || res === false) {
                return method.apply(arr, args.map(toRaw));
            } else {
                return res;
            }
        };
    });
    ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
        const method = Array.prototype[key];
        arrayInstrumentations[key] = function(...args) {
            pauseTracking();
            const res = method.apply(this, args);
            resetTracking();
            return res;
        };
    });

    function createGetter(isReadonly = false, shallow = false) {
        return function get3(target, key, receiver) {
            if (key === "__v_isReactive") {
                return !isReadonly;
            } else if (key === "__v_isReadonly") {
                return isReadonly;
            } else if (key === "__v_raw" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
                return target;
            }
            const targetIsArray = isArray(target);
            if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {
                return Reflect.get(arrayInstrumentations, key, receiver);
            }
            const res = Reflect.get(target, key, receiver);
            if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
                return res;
            }
            if (!isReadonly) {
                track(target, "get", key);
            }
            if (shallow) {
                return res;
            }
            if (isRef(res)) {
                const shouldUnwrap = !targetIsArray || !isIntegerKey(key);
                return shouldUnwrap ? res.value : res;
            }
            if (isObject2(res)) {
                return isReadonly ? readonly(res) : reactive2(res);
            }
            return res;
        };
    }
    var set2 = /* @__PURE__ */ createSetter();
    var shallowSet = /* @__PURE__ */ createSetter(true);

    function createSetter(shallow = false) {
        return function set3(target, key, value, receiver) {
            let oldValue = target[key];
            if (!shallow) {
                value = toRaw(value);
                oldValue = toRaw(oldValue);
                if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
                    oldValue.value = value;
                    return true;
                }
            }
            const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
            const result = Reflect.set(target, key, value, receiver);
            if (target === toRaw(receiver)) {
                if (!hadKey) {
                    trigger(target, "add", key, value);
                } else if (hasChanged(value, oldValue)) {
                    trigger(target, "set", key, value, oldValue);
                }
            }
            return result;
        };
    }

    function deleteProperty(target, key) {
        const hadKey = hasOwn(target, key);
        const oldValue = target[key];
        const result = Reflect.deleteProperty(target, key);
        if (result && hadKey) {
            trigger(target, "delete", key, void 0, oldValue);
        }
        return result;
    }

    function has(target, key) {
        const result = Reflect.has(target, key);
        if (!isSymbol(key) || !builtInSymbols.has(key)) {
            track(target, "has", key);
        }
        return result;
    }

    function ownKeys(target) {
        track(target, "iterate", isArray(target) ? "length" : ITERATE_KEY);
        return Reflect.ownKeys(target);
    }
    var mutableHandlers = {
        get: get2,
        set: set2,
        deleteProperty,
        has,
        ownKeys
    };
    var readonlyHandlers = {
        get: readonlyGet,
        set(target, key) {
            if (false) {
                console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
            }
            return true;
        },
        deleteProperty(target, key) {
            if (false) {
                console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
            }
            return true;
        }
    };
    var shallowReactiveHandlers = extend({}, mutableHandlers, {
        get: shallowGet,
        set: shallowSet
    });
    var shallowReadonlyHandlers = extend({}, readonlyHandlers, {
        get: shallowReadonlyGet
    });
    var toReactive = (value) => isObject2(value) ? reactive2(value) : value;
    var toReadonly = (value) => isObject2(value) ? readonly(value) : value;
    var toShallow = (value) => value;
    var getProto = (v) => Reflect.getPrototypeOf(v);

    function get$1(target, key, isReadonly = false, isShallow = false) {
        target = target["__v_raw"];
        const rawTarget = toRaw(target);
        const rawKey = toRaw(key);
        if (key !== rawKey) {
            !isReadonly && track(rawTarget, "get", key);
        }!isReadonly && track(rawTarget, "get", rawKey);
        const { has: has2 } = getProto(rawTarget);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        if (has2.call(rawTarget, key)) {
            return wrap(target.get(key));
        } else if (has2.call(rawTarget, rawKey)) {
            return wrap(target.get(rawKey));
        } else if (target !== rawTarget) {
            target.get(key);
        }
    }

    function has$1(key, isReadonly = false) {
        const target = this["__v_raw"];
        const rawTarget = toRaw(target);
        const rawKey = toRaw(key);
        if (key !== rawKey) {
            !isReadonly && track(rawTarget, "has", key);
        }!isReadonly && track(rawTarget, "has", rawKey);
        return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
    }

    function size(target, isReadonly = false) {
        target = target["__v_raw"];
        !isReadonly && track(toRaw(target), "iterate", ITERATE_KEY);
        return Reflect.get(target, "size", target);
    }

    function add(value) {
        value = toRaw(value);
        const target = toRaw(this);
        const proto = getProto(target);
        const hadKey = proto.has.call(target, value);
        if (!hadKey) {
            target.add(value);
            trigger(target, "add", value, value);
        }
        return this;
    }

    function set$1(key, value) {
        value = toRaw(value);
        const target = toRaw(this);
        const { has: has2, get: get3 } = getProto(target);
        let hadKey = has2.call(target, key);
        if (!hadKey) {
            key = toRaw(key);
            hadKey = has2.call(target, key);
        } else if (false) {
            checkIdentityKeys(target, has2, key);
        }
        const oldValue = get3.call(target, key);
        target.set(key, value);
        if (!hadKey) {
            trigger(target, "add", key, value);
        } else if (hasChanged(value, oldValue)) {
            trigger(target, "set", key, value, oldValue);
        }
        return this;
    }

    function deleteEntry(key) {
        const target = toRaw(this);
        const { has: has2, get: get3 } = getProto(target);
        let hadKey = has2.call(target, key);
        if (!hadKey) {
            key = toRaw(key);
            hadKey = has2.call(target, key);
        } else if (false) {
            checkIdentityKeys(target, has2, key);
        }
        const oldValue = get3 ? get3.call(target, key) : void 0;
        const result = target.delete(key);
        if (hadKey) {
            trigger(target, "delete", key, void 0, oldValue);
        }
        return result;
    }

    function clear() {
        const target = toRaw(this);
        const hadItems = target.size !== 0;
        const oldTarget = false ? isMap(target) ? new Map(target) : new Set(target) : void 0;
        const result = target.clear();
        if (hadItems) {
            trigger(target, "clear", void 0, void 0, oldTarget);
        }
        return result;
    }

    function createForEach(isReadonly, isShallow) {
        return function forEach(callback, thisArg) {
            const observed = this;
            const target = observed["__v_raw"];
            const rawTarget = toRaw(target);
            const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
            !isReadonly && track(rawTarget, "iterate", ITERATE_KEY);
            return target.forEach((value, key) => {
                return callback.call(thisArg, wrap(value), wrap(key), observed);
            });
        };
    }

    function createIterableMethod(method, isReadonly, isShallow) {
        return function(...args) {
            const target = this["__v_raw"];
            const rawTarget = toRaw(target);
            const targetIsMap = isMap(rawTarget);
            const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
            const isKeyOnly = method === "keys" && targetIsMap;
            const innerIterator = target[method](...args);
            const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
            !isReadonly && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
            return {
                next() {
                    const { value, done } = innerIterator.next();
                    return done ? { value, done } : {
                        value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
                        done
                    };
                },
                [Symbol.iterator]() {
                    return this;
                }
            };
        };
    }

    function createReadonlyMethod(type) {
        return function(...args) {
            if (false) {
                const key = args[0] ? `on key "${args[0]}" ` : ``;
                console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
            }
            return type === "delete" ? false : this;
        };
    }
    var mutableInstrumentations = {
        get(key) {
            return get$1(this, key);
        },
        get size() {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
    };
    var shallowInstrumentations = {
        get(key) {
            return get$1(this, key, false, true);
        },
        get size() {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
    };
    var readonlyInstrumentations = {
        get(key) {
            return get$1(this, key, true);
        },
        get size() {
            return size(this, true);
        },
        has(key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear"),
        forEach: createForEach(true, false)
    };
    var shallowReadonlyInstrumentations = {
        get(key) {
            return get$1(this, key, true, true);
        },
        get size() {
            return size(this, true);
        },
        has(key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear"),
        forEach: createForEach(true, true)
    };
    var iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
    iteratorMethods.forEach((method) => {
        mutableInstrumentations[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations[method] = createIterableMethod(method, true, false);
        shallowInstrumentations[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);
    });

    function createInstrumentationGetter(isReadonly, shallow) {
        const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;
        return (target, key, receiver) => {
            if (key === "__v_isReactive") {
                return !isReadonly;
            } else if (key === "__v_isReadonly") {
                return isReadonly;
            } else if (key === "__v_raw") {
                return target;
            }
            return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
        };
    }
    var mutableCollectionHandlers = {
        get: createInstrumentationGetter(false, false)
    };
    var shallowCollectionHandlers = {
        get: createInstrumentationGetter(false, true)
    };
    var readonlyCollectionHandlers = {
        get: createInstrumentationGetter(true, false)
    };
    var shallowReadonlyCollectionHandlers = {
        get: createInstrumentationGetter(true, true)
    };
    var reactiveMap = new WeakMap();
    var shallowReactiveMap = new WeakMap();
    var readonlyMap = new WeakMap();
    var shallowReadonlyMap = new WeakMap();

    function targetTypeMap(rawType) {
        switch (rawType) {
            case "Object":
            case "Array":
                return 1;
            case "Map":
            case "Set":
            case "WeakMap":
            case "WeakSet":
                return 2;
            default:
                return 0;
        }
    }

    function getTargetType(value) {
        return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
    }

    function reactive2(target) {
        if (target && target["__v_isReadonly"]) {
            return target;
        }
        return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
    }

    function readonly(target) {
        return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
    }

    function createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {
        if (!isObject2(target)) {
            if (false) {
                console.warn(`value cannot be made reactive: ${String(target)}`);
            }
            return target;
        }
        if (target["__v_raw"] && !(isReadonly && target["__v_isReactive"])) {
            return target;
        }
        const existingProxy = proxyMap.get(target);
        if (existingProxy) {
            return existingProxy;
        }
        const targetType = getTargetType(target);
        if (targetType === 0) {
            return target;
        }
        const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
        proxyMap.set(target, proxy);
        return proxy;
    }

    function toRaw(observed) {
        return observed && toRaw(observed["__v_raw"]) || observed;
    }

    function isRef(r) {
        return Boolean(r && r.__v_isRef === true);
    }
    magic("nextTick", () => nextTick);
    magic("dispatch", (el) => dispatch.bind(dispatch, el));
    magic("watch", (el, { evaluateLater: evaluateLater2, effect: effect3 }) => (key, callback) => {
        let evaluate2 = evaluateLater2(key);
        let firstTime = true;
        let oldValue;
        let effectReference = effect3(() => evaluate2((value) => {
            JSON.stringify(value);
            if (!firstTime) {
                queueMicrotask(() => {
                    callback(value, oldValue);
                    oldValue = value;
                });
            } else {
                oldValue = value;
            }
            firstTime = false;
        }));
        el._x_effects.delete(effectReference);
    });
    magic("store", getStores);
    magic("data", (el) => scope(el));
    magic("root", (el) => closestRoot(el));
    magic("refs", (el) => {
        if (el._x_refs_proxy)
            return el._x_refs_proxy;
        el._x_refs_proxy = mergeProxies(getArrayOfRefObject(el));
        return el._x_refs_proxy;
    });

    function getArrayOfRefObject(el) {
        let refObjects = [];
        let currentEl = el;
        while (currentEl) {
            if (currentEl._x_refs)
                refObjects.push(currentEl._x_refs);
            currentEl = currentEl.parentNode;
        }
        return refObjects;
    }
    var globalIdMemo = {};

    function findAndIncrementId(name) {
        if (!globalIdMemo[name])
            globalIdMemo[name] = 0;
        return ++globalIdMemo[name];
    }

    function closestIdRoot(el, name) {
        return findClosest(el, (element) => {
            if (element._x_ids && element._x_ids[name])
                return true;
        });
    }

    function setIdRoot(el, name) {
        if (!el._x_ids)
            el._x_ids = {};
        if (!el._x_ids[name])
            el._x_ids[name] = findAndIncrementId(name);
    }
    magic("id", (el) => (name, key = null) => {
        let root = closestIdRoot(el, name);
        let id = root ? root._x_ids[name] : findAndIncrementId(name);
        return key ? `${name}-${id}-${key}` : `${name}-${id}`;
    });
    magic("el", (el) => el);
    warnMissingPluginMagic("Focus", "focus", "focus");
    warnMissingPluginMagic("Persist", "persist", "persist");

    function warnMissingPluginMagic(name, magicName, slug) {
        magic(magicName, (el) => warn(`You can't use [$${directiveName}] without first installing the "${name}" plugin here: https://alpinejs.dev/plugins/${slug}`, el));
    }
    directive("modelable", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {
        let func = evaluateLater2(expression);
        let innerGet = () => {
            let result;
            func((i) => result = i);
            return result;
        };
        let evaluateInnerSet = evaluateLater2(`${expression} = __placeholder`);
        let innerSet = (val) => evaluateInnerSet(() => {}, { scope: { __placeholder: val } });
        let initialValue = innerGet();
        innerSet(initialValue);
        queueMicrotask(() => {
            if (!el._x_model)
                return;
            el._x_removeModelListeners["default"]();
            let outerGet = el._x_model.get;
            let outerSet = el._x_model.set;
            effect3(() => innerSet(outerGet()));
            effect3(() => outerSet(innerGet()));
        });
    });
    directive("teleport", (el, { expression }, { cleanup: cleanup2 }) => {
        if (el.tagName.toLowerCase() !== "template")
            warn("x-teleport can only be used on a <template> tag", el);
        let target = document.querySelector(expression);
        if (!target)
            warn(`Cannot find x-teleport element for selector: "${expression}"`);
        let clone22 = el.content.cloneNode(true).firstElementChild;
        el._x_teleport = clone22;
        clone22._x_teleportBack = el;
        if (el._x_forwardEvents) {
            el._x_forwardEvents.forEach((eventName) => {
                clone22.addEventListener(eventName, (e) => {
                    e.stopPropagation();
                    el.dispatchEvent(new e.constructor(e.type, e));
                });
            });
        }
        addScopeToNode(clone22, {}, el);
        mutateDom(() => {
            target.appendChild(clone22);
            initTree(clone22);
            clone22._x_ignore = true;
        });
        cleanup2(() => clone22.remove());
    });
    var handler = () => {};
    handler.inline = (el, { modifiers }, { cleanup: cleanup2 }) => {
        modifiers.includes("self") ? el._x_ignoreSelf = true : el._x_ignore = true;
        cleanup2(() => {
            modifiers.includes("self") ? delete el._x_ignoreSelf : delete el._x_ignore;
        });
    };
    directive("ignore", handler);
    directive("effect", (el, { expression }, { effect: effect3 }) => effect3(evaluateLater(el, expression)));

    function on(el, event, modifiers, callback) {
        let listenerTarget = el;
        let handler3 = (e) => callback(e);
        let options = {};
        let wrapHandler = (callback2, wrapper) => (e) => wrapper(callback2, e);
        if (modifiers.includes("dot"))
            event = dotSyntax(event);
        if (modifiers.includes("camel"))
            event = camelCase2(event);
        if (modifiers.includes("passive"))
            options.passive = true;
        if (modifiers.includes("capture"))
            options.capture = true;
        if (modifiers.includes("window"))
            listenerTarget = window;
        if (modifiers.includes("document"))
            listenerTarget = document;
        if (modifiers.includes("prevent"))
            handler3 = wrapHandler(handler3, (next, e) => {
                e.preventDefault();
                next(e);
            });
        if (modifiers.includes("stop"))
            handler3 = wrapHandler(handler3, (next, e) => {
                e.stopPropagation();
                next(e);
            });
        if (modifiers.includes("self"))
            handler3 = wrapHandler(handler3, (next, e) => {
                e.target === el && next(e);
            });
        if (modifiers.includes("away") || modifiers.includes("outside")) {
            listenerTarget = document;
            handler3 = wrapHandler(handler3, (next, e) => {
                if (el.contains(e.target))
                    return;
                if (e.target.isConnected === false)
                    return;
                if (el.offsetWidth < 1 && el.offsetHeight < 1)
                    return;
                if (el._x_isShown === false)
                    return;
                next(e);
            });
        }
        if (modifiers.includes("once")) {
            handler3 = wrapHandler(handler3, (next, e) => {
                next(e);
                listenerTarget.removeEventListener(event, handler3, options);
            });
        }
        handler3 = wrapHandler(handler3, (next, e) => {
            if (isKeyEvent(event)) {
                if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {
                    return;
                }
            }
            next(e);
        });
        if (modifiers.includes("debounce")) {
            let nextModifier = modifiers[modifiers.indexOf("debounce") + 1] || "invalid-wait";
            let wait = isNumeric(nextModifier.split("ms")[0]) ? Number(nextModifier.split("ms")[0]) : 250;
            handler3 = debounce(handler3, wait);
        }
        if (modifiers.includes("throttle")) {
            let nextModifier = modifiers[modifiers.indexOf("throttle") + 1] || "invalid-wait";
            let wait = isNumeric(nextModifier.split("ms")[0]) ? Number(nextModifier.split("ms")[0]) : 250;
            handler3 = throttle(handler3, wait);
        }
        listenerTarget.addEventListener(event, handler3, options);
        return () => {
            listenerTarget.removeEventListener(event, handler3, options);
        };
    }

    function dotSyntax(subject) {
        return subject.replace(/-/g, ".");
    }

    function camelCase2(subject) {
        return subject.toLowerCase().replace(/-(\w)/g, (match3, char) => char.toUpperCase());
    }

    function isNumeric(subject) {
        return !Array.isArray(subject) && !isNaN(subject);
    }

    function kebabCase2(subject) {
        return subject.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[_\s]/, "-").toLowerCase();
    }

    function isKeyEvent(event) {
        return ["keydown", "keyup"].includes(event);
    }

    function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {
        let keyModifiers = modifiers.filter((i) => {
            return !["window", "document", "prevent", "stop", "once"].includes(i);
        });
        if (keyModifiers.includes("debounce")) {
            let debounceIndex = keyModifiers.indexOf("debounce");
            keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1);
        }
        if (keyModifiers.length === 0)
            return false;
        if (keyModifiers.length === 1 && keyToModifiers(e.key).includes(keyModifiers[0]))
            return false;
        const systemKeyModifiers = ["ctrl", "shift", "alt", "meta", "cmd", "super"];
        const selectedSystemKeyModifiers = systemKeyModifiers.filter((modifier) => keyModifiers.includes(modifier));
        keyModifiers = keyModifiers.filter((i) => !selectedSystemKeyModifiers.includes(i));
        if (selectedSystemKeyModifiers.length > 0) {
            const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter((modifier) => {
                if (modifier === "cmd" || modifier === "super")
                    modifier = "meta";
                return e[`${modifier}Key`];
            });
            if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {
                if (keyToModifiers(e.key).includes(keyModifiers[0]))
                    return false;
            }
        }
        return true;
    }

    function keyToModifiers(key) {
        if (!key)
            return [];
        key = kebabCase2(key);
        let modifierToKeyMap = {
            ctrl: "control",
            slash: "/",
            space: "-",
            spacebar: "-",
            cmd: "meta",
            esc: "escape",
            up: "arrow-up",
            down: "arrow-down",
            left: "arrow-left",
            right: "arrow-right",
            period: ".",
            equal: "="
        };
        modifierToKeyMap[key] = key;
        return Object.keys(modifierToKeyMap).map((modifier) => {
            if (modifierToKeyMap[modifier] === key)
                return modifier;
        }).filter((modifier) => modifier);
    }
    directive("model", (el, { modifiers, expression }, { effect: effect3, cleanup: cleanup2 }) => {
        let evaluate2 = evaluateLater(el, expression);
        let assignmentExpression = `${expression} = rightSideOfExpression($event, ${expression})`;
        let evaluateAssignment = evaluateLater(el, assignmentExpression);
        var event = el.tagName.toLowerCase() === "select" || ["checkbox", "radio"].includes(el.type) || modifiers.includes("lazy") ? "change" : "input";
        let assigmentFunction = generateAssignmentFunction(el, modifiers, expression);
        let removeListener = on(el, event, modifiers, (e) => {
            evaluateAssignment(() => {}, {
                scope: {
                    $event: e,
                    rightSideOfExpression: assigmentFunction
                }
            });
        });
        if (!el._x_removeModelListeners)
            el._x_removeModelListeners = {};
        el._x_removeModelListeners["default"] = removeListener;
        cleanup2(() => el._x_removeModelListeners["default"]());
        let evaluateSetModel = evaluateLater(el, `${expression} = __placeholder`);
        el._x_model = {
            get() {
                let result;
                evaluate2((value) => result = value);
                return result;
            },
            set(value) {
                evaluateSetModel(() => {}, { scope: { __placeholder: value } });
            }
        };
        el._x_forceModelUpdate = () => {
            evaluate2((value) => {
                if (value === void 0 && expression.match(/\./))
                    value = "";
                window.fromModel = true;
                mutateDom(() => bind(el, "value", value));
                delete window.fromModel;
            });
        };
        effect3(() => {
            if (modifiers.includes("unintrusive") && document.activeElement.isSameNode(el))
                return;
            el._x_forceModelUpdate();
        });
    });

    function generateAssignmentFunction(el, modifiers, expression) {
        if (el.type === "radio") {
            mutateDom(() => {
                if (!el.hasAttribute("name"))
                    el.setAttribute("name", expression);
            });
        }
        return (event, currentValue) => {
            return mutateDom(() => {
                if (event instanceof CustomEvent && event.detail !== void 0) {
                    return event.detail || event.target.value;
                } else if (el.type === "checkbox") {
                    if (Array.isArray(currentValue)) {
                        let newValue = modifiers.includes("number") ? safeParseNumber(event.target.value) : event.target.value;
                        return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter((el2) => !checkedAttrLooseCompare2(el2, newValue));
                    } else {
                        return event.target.checked;
                    }
                } else if (el.tagName.toLowerCase() === "select" && el.multiple) {
                    return modifiers.includes("number") ? Array.from(event.target.selectedOptions).map((option) => {
                        let rawValue = option.value || option.text;
                        return safeParseNumber(rawValue);
                    }) : Array.from(event.target.selectedOptions).map((option) => {
                        return option.value || option.text;
                    });
                } else {
                    let rawValue = event.target.value;
                    return modifiers.includes("number") ? safeParseNumber(rawValue) : modifiers.includes("trim") ? rawValue.trim() : rawValue;
                }
            });
        };
    }

    function safeParseNumber(rawValue) {
        let number = rawValue ? parseFloat(rawValue) : null;
        return isNumeric2(number) ? number : rawValue;
    }

    function checkedAttrLooseCompare2(valueA, valueB) {
        return valueA == valueB;
    }

    function isNumeric2(subject) {
        return !Array.isArray(subject) && !isNaN(subject);
    }
    directive("cloak", (el) => queueMicrotask(() => mutateDom(() => el.removeAttribute(prefix("cloak")))));
    addInitSelector(() => `[${prefix("init")}]`);
    directive("init", skipDuringClone((el, { expression }, { evaluate: evaluate2 }) => {
        if (typeof expression === "string") {
            return !!expression.trim() && evaluate2(expression, {}, false);
        }
        return evaluate2(expression, {}, false);
    }));
    directive("text", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {
        let evaluate2 = evaluateLater2(expression);
        effect3(() => {
            evaluate2((value) => {
                mutateDom(() => {
                    el.textContent = value;
                });
            });
        });
    });
    directive("html", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {
        let evaluate2 = evaluateLater2(expression);
        effect3(() => {
            evaluate2((value) => {
                mutateDom(() => {
                    el.innerHTML = value;
                    el._x_ignoreSelf = true;
                    initTree(el);
                    delete el._x_ignoreSelf;
                });
            });
        });
    });
    mapAttributes(startingWith(":", into(prefix("bind:"))));
    directive("bind", (el, { value, modifiers, expression, original }, { effect: effect3 }) => {
        if (!value) {
            return applyBindingsObject(el, expression, original, effect3);
        }
        if (value === "key")
            return storeKeyForXFor(el, expression);
        let evaluate2 = evaluateLater(el, expression);
        effect3(() => evaluate2((result) => {
            if (result === void 0 && expression.match(/\./))
                result = "";
            mutateDom(() => bind(el, value, result, modifiers));
        }));
    });

    function applyBindingsObject(el, expression, original, effect3) {
        let bindingProviders = {};
        injectBindingProviders(bindingProviders);
        let getBindings = evaluateLater(el, expression);
        let cleanupRunners = [];
        while (cleanupRunners.length)
            cleanupRunners.pop()();
        getBindings((bindings) => {
            let attributes = Object.entries(bindings).map(([name, value]) => ({ name, value }));
            let staticAttributes = attributesOnly(attributes);
            attributes = attributes.map((attribute) => {
                if (staticAttributes.find((attr) => attr.name === attribute.name)) {
                    return {
                        name: `x-bind:${attribute.name}`,
                        value: `"${attribute.value}"`
                    };
                }
                return attribute;
            });
            directives(el, attributes, original).map((handle) => {
                cleanupRunners.push(handle.runCleanups);
                handle();
            });
        }, { scope: bindingProviders });
    }

    function storeKeyForXFor(el, expression) {
        el._x_keyExpression = expression;
    }
    addRootSelector(() => `[${prefix("data")}]`);
    directive("data", skipDuringClone((el, { expression }, { cleanup: cleanup2 }) => {
        expression = expression === "" ? "{}" : expression;
        let magicContext = {};
        injectMagics(magicContext, el);
        let dataProviderContext = {};
        injectDataProviders(dataProviderContext, magicContext);
        let data2 = evaluate(el, expression, { scope: dataProviderContext });
        if (data2 === void 0)
            data2 = {};
        injectMagics(data2, el);
        let reactiveData = reactive(data2);
        initInterceptors(reactiveData);
        let undo = addScopeToNode(el, reactiveData);
        reactiveData["init"] && evaluate(el, reactiveData["init"]);
        cleanup2(() => {
            reactiveData["destroy"] && evaluate(el, reactiveData["destroy"]);
            undo();
        });
    }));
    directive("show", (el, { modifiers, expression }, { effect: effect3 }) => {
        let evaluate2 = evaluateLater(el, expression);
        if (!el._x_doHide)
            el._x_doHide = () => {
                mutateDom(() => el.style.display = "none");
            };
        if (!el._x_doShow)
            el._x_doShow = () => {
                mutateDom(() => {
                    if (el.style.length === 1 && el.style.display === "none") {
                        el.removeAttribute("style");
                    } else {
                        el.style.removeProperty("display");
                    }
                });
            };
        let hide = () => {
            el._x_doHide();
            el._x_isShown = false;
        };
        let show = () => {
            el._x_doShow();
            el._x_isShown = true;
        };
        let clickAwayCompatibleShow = () => setTimeout(show);
        let toggle = once((value) => value ? show() : hide(), (value) => {
            if (typeof el._x_toggleAndCascadeWithTransitions === "function") {
                el._x_toggleAndCascadeWithTransitions(el, value, show, hide);
            } else {
                value ? clickAwayCompatibleShow() : hide();
            }
        });
        let oldValue;
        let firstTime = true;
        effect3(() => evaluate2((value) => {
            if (!firstTime && value === oldValue)
                return;
            if (modifiers.includes("immediate"))
                value ? clickAwayCompatibleShow() : hide();
            toggle(value);
            oldValue = value;
            firstTime = false;
        }));
    });
    directive("for", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {
        let iteratorNames = parseForExpression(expression);
        let evaluateItems = evaluateLater(el, iteratorNames.items);
        let evaluateKey = evaluateLater(el, el._x_keyExpression || "index");
        el._x_prevKeys = [];
        el._x_lookup = {};
        effect3(() => loop(el, iteratorNames, evaluateItems, evaluateKey));
        cleanup2(() => {
            Object.values(el._x_lookup).forEach((el2) => el2.remove());
            delete el._x_prevKeys;
            delete el._x_lookup;
        });
    });

    function loop(el, iteratorNames, evaluateItems, evaluateKey) {
        let isObject22 = (i) => typeof i === "object" && !Array.isArray(i);
        let templateEl = el;
        evaluateItems((items) => {
            if (isNumeric3(items) && items >= 0) {
                items = Array.from(Array(items).keys(), (i) => i + 1);
            }
            if (items === void 0)
                items = [];
            let lookup = el._x_lookup;
            let prevKeys = el._x_prevKeys;
            let scopes = [];
            let keys = [];
            if (isObject22(items)) {
                items = Object.entries(items).map(([key, value]) => {
                    let scope2 = getIterationScopeVariables(iteratorNames, value, key, items);
                    evaluateKey((value2) => keys.push(value2), { scope: __spreadValues({ index: key }, scope2) });
                    scopes.push(scope2);
                });
            } else {
                for (let i = 0; i < items.length; i++) {
                    let scope2 = getIterationScopeVariables(iteratorNames, items[i], i, items);
                    evaluateKey((value) => keys.push(value), { scope: __spreadValues({ index: i }, scope2) });
                    scopes.push(scope2);
                }
            }
            let adds = [];
            let moves = [];
            let removes = [];
            let sames = [];
            for (let i = 0; i < prevKeys.length; i++) {
                let key = prevKeys[i];
                if (keys.indexOf(key) === -1)
                    removes.push(key);
            }
            prevKeys = prevKeys.filter((key) => !removes.includes(key));
            let lastKey = "template";
            for (let i = 0; i < keys.length; i++) {
                let key = keys[i];
                let prevIndex = prevKeys.indexOf(key);
                if (prevIndex === -1) {
                    prevKeys.splice(i, 0, key);
                    adds.push([lastKey, i]);
                } else if (prevIndex !== i) {
                    let keyInSpot = prevKeys.splice(i, 1)[0];
                    let keyForSpot = prevKeys.splice(prevIndex - 1, 1)[0];
                    prevKeys.splice(i, 0, keyForSpot);
                    prevKeys.splice(prevIndex, 0, keyInSpot);
                    moves.push([keyInSpot, keyForSpot]);
                } else {
                    sames.push(key);
                }
                lastKey = key;
            }
            for (let i = 0; i < removes.length; i++) {
                let key = removes[i];
                if (!!lookup[key]._x_effects) {
                    lookup[key]._x_effects.forEach(dequeueJob);
                }
                lookup[key].remove();
                lookup[key] = null;
                delete lookup[key];
            }
            for (let i = 0; i < moves.length; i++) {
                let [keyInSpot, keyForSpot] = moves[i];
                let elInSpot = lookup[keyInSpot];
                let elForSpot = lookup[keyForSpot];
                let marker = document.createElement("div");
                mutateDom(() => {
                    elForSpot.after(marker);
                    elInSpot.after(elForSpot);
                    elForSpot._x_currentIfEl && elForSpot.after(elForSpot._x_currentIfEl);
                    marker.before(elInSpot);
                    elInSpot._x_currentIfEl && elInSpot.after(elInSpot._x_currentIfEl);
                    marker.remove();
                });
                refreshScope(elForSpot, scopes[keys.indexOf(keyForSpot)]);
            }
            for (let i = 0; i < adds.length; i++) {
                let [lastKey2, index] = adds[i];
                let lastEl = lastKey2 === "template" ? templateEl : lookup[lastKey2];
                if (lastEl._x_currentIfEl)
                    lastEl = lastEl._x_currentIfEl;
                let scope2 = scopes[index];
                let key = keys[index];
                let clone22 = document.importNode(templateEl.content, true).firstElementChild;
                addScopeToNode(clone22, reactive(scope2), templateEl);
                mutateDom(() => {
                    lastEl.after(clone22);
                    initTree(clone22);
                });
                if (typeof key === "object") {
                    warn("x-for key cannot be an object, it must be a string or an integer", templateEl);
                }
                lookup[key] = clone22;
            }
            for (let i = 0; i < sames.length; i++) {
                refreshScope(lookup[sames[i]], scopes[keys.indexOf(sames[i])]);
            }
            templateEl._x_prevKeys = keys;
        });
    }

    function parseForExpression(expression) {
        let forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
        let stripParensRE = /^\s*\(|\)\s*$/g;
        let forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
        let inMatch = expression.match(forAliasRE);
        if (!inMatch)
            return;
        let res = {};
        res.items = inMatch[2].trim();
        let item = inMatch[1].replace(stripParensRE, "").trim();
        let iteratorMatch = item.match(forIteratorRE);
        if (iteratorMatch) {
            res.item = item.replace(forIteratorRE, "").trim();
            res.index = iteratorMatch[1].trim();
            if (iteratorMatch[2]) {
                res.collection = iteratorMatch[2].trim();
            }
        } else {
            res.item = item;
        }
        return res;
    }

    function getIterationScopeVariables(iteratorNames, item, index, items) {
        let scopeVariables = {};
        if (/^\[.*\]$/.test(iteratorNames.item) && Array.isArray(item)) {
            let names = iteratorNames.item.replace("[", "").replace("]", "").split(",").map((i) => i.trim());
            names.forEach((name, i) => {
                scopeVariables[name] = item[i];
            });
        } else if (/^\{.*\}$/.test(iteratorNames.item) && !Array.isArray(item) && typeof item === "object") {
            let names = iteratorNames.item.replace("{", "").replace("}", "").split(",").map((i) => i.trim());
            names.forEach((name) => {
                scopeVariables[name] = item[name];
            });
        } else {
            scopeVariables[iteratorNames.item] = item;
        }
        if (iteratorNames.index)
            scopeVariables[iteratorNames.index] = index;
        if (iteratorNames.collection)
            scopeVariables[iteratorNames.collection] = items;
        return scopeVariables;
    }

    function isNumeric3(subject) {
        return !Array.isArray(subject) && !isNaN(subject);
    }

    function handler2() {}
    handler2.inline = (el, { expression }, { cleanup: cleanup2 }) => {
        let root = closestRoot(el);
        if (!root._x_refs)
            root._x_refs = {};
        root._x_refs[expression] = el;
        cleanup2(() => delete root._x_refs[expression]);
    };
    directive("ref", handler2);
    directive("if", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {
        let evaluate2 = evaluateLater(el, expression);
        let show = () => {
            if (el._x_currentIfEl)
                return el._x_currentIfEl;
            let clone22 = el.content.cloneNode(true).firstElementChild;
            addScopeToNode(clone22, {}, el);
            mutateDom(() => {
                el.after(clone22);
                initTree(clone22);
            });
            el._x_currentIfEl = clone22;
            el._x_undoIf = () => {
                walk(clone22, (node) => {
                    if (!!node._x_effects) {
                        node._x_effects.forEach(dequeueJob);
                    }
                });
                clone22.remove();
                delete el._x_currentIfEl;
            };
            return clone22;
        };
        let hide = () => {
            if (!el._x_undoIf)
                return;
            el._x_undoIf();
            delete el._x_undoIf;
        };
        effect3(() => evaluate2((value) => {
            value ? show() : hide();
        }));
        cleanup2(() => el._x_undoIf && el._x_undoIf());
    });
    directive("id", (el, { expression }, { evaluate: evaluate2 }) => {
        let names = evaluate2(expression);
        names.forEach((name) => setIdRoot(el, name));
    });
    mapAttributes(startingWith("@", into(prefix("on:"))));
    directive("on", skipDuringClone((el, { value, modifiers, expression }, { cleanup: cleanup2 }) => {
        let evaluate2 = expression ? evaluateLater(el, expression) : () => {};
        if (el.tagName.toLowerCase() === "template") {
            if (!el._x_forwardEvents)
                el._x_forwardEvents = [];
            if (!el._x_forwardEvents.includes(value))
                el._x_forwardEvents.push(value);
        }
        let removeListener = on(el, value, modifiers, (e) => {
            evaluate2(() => {}, { scope: { $event: e }, params: [e] });
        });
        cleanup2(() => removeListener());
    }));
    warnMissingPluginDirective("Collapse", "collapse", "collapse");
    warnMissingPluginDirective("Intersect", "intersect", "intersect");
    warnMissingPluginDirective("Focus", "trap", "focus");
    warnMissingPluginDirective("Mask", "mask", "mask");

    function warnMissingPluginDirective(name, directiveName2, slug) {
        directive(directiveName2, (el) => warn(`You can't use [x-${directiveName2}] without first installing the "${name}" plugin here: https://alpinejs.dev/plugins/${slug}`, el));
    }
    alpine_default.setEvaluator(normalEvaluator);
    alpine_default.setReactivityEngine({ reactive: reactive2, effect: effect2, release: stop, raw: toRaw });
    var src_default = alpine_default;
    var module_default = src_default;

    // node_modules/@alpinejs/persist/dist/module.esm.js
    function src_default2(Alpine2) {
        let persist = () => {
            let alias;
            let storage = localStorage;
            return Alpine2.interceptor((initialValue, getter, setter, path, key) => {
                let lookup = alias || `_x_${path}`;
                let initial = storageHas(lookup, storage) ? storageGet(lookup, storage) : initialValue;
                setter(initial);
                Alpine2.effect(() => {
                    let value = getter();
                    storageSet(lookup, value, storage);
                    setter(value);
                });
                return initial;
            }, (func) => {
                func.as = (key) => {
                    alias = key;
                    return func;
                }, func.using = (target) => {
                    storage = target;
                    return func;
                };
            });
        };
        Object.defineProperty(Alpine2, "$persist", { get: () => persist() });
        Alpine2.magic("persist", persist);
    }

    function storageHas(key, storage) {
        return storage.getItem(key) !== null;
    }

    function storageGet(key, storage) {
        return JSON.parse(storage.getItem(key, storage));
    }

    function storageSet(key, value, storage) {
        storage.setItem(key, JSON.stringify(value));
    }
    var module_default2 = src_default2;

    // node_modules/date-fns/esm/_lib/toInteger/index.js
    function toInteger(dirtyNumber) {
        if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
            return NaN;
        }
        var number = Number(dirtyNumber);
        if (isNaN(number)) {
            return number;
        }
        return number < 0 ? Math.ceil(number) : Math.floor(number);
    }

    // node_modules/date-fns/esm/_lib/requiredArgs/index.js
    function requiredArgs(required, args) {
        if (args.length < required) {
            throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
        }
    }

    // node_modules/date-fns/esm/toDate/index.js
    function toDate(argument) {
        requiredArgs(1, arguments);
        var argStr = Object.prototype.toString.call(argument);
        if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
            return new Date(argument.getTime());
        } else if (typeof argument === "number" || argStr === "[object Number]") {
            return new Date(argument);
        } else {
            if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
                console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");
                console.warn(new Error().stack);
            }
            return new Date(NaN);
        }
    }

    // node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
    function getTimezoneOffsetInMilliseconds(date) {
        var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
        utcDate.setUTCFullYear(date.getFullYear());
        return date.getTime() - utcDate.getTime();
    }

    // node_modules/date-fns/esm/compareAsc/index.js
    function compareAsc(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var dateLeft = toDate(dirtyDateLeft);
        var dateRight = toDate(dirtyDateRight);
        var diff = dateLeft.getTime() - dateRight.getTime();
        if (diff < 0) {
            return -1;
        } else if (diff > 0) {
            return 1;
        } else {
            return diff;
        }
    }

    // node_modules/date-fns/esm/constants/index.js
    var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
    var millisecondsInMinute = 6e4;
    var millisecondsInHour = 36e5;
    var minTime = -maxTime;

    // node_modules/date-fns/esm/differenceInCalendarMonths/index.js
    function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var dateLeft = toDate(dirtyDateLeft);
        var dateRight = toDate(dirtyDateRight);
        var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
        var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
        return yearDiff * 12 + monthDiff;
    }

    // node_modules/date-fns/esm/differenceInMilliseconds/index.js
    function differenceInMilliseconds(dateLeft, dateRight) {
        requiredArgs(2, arguments);
        return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
    }

    // node_modules/date-fns/esm/_lib/roundingMethods/index.js
    var roundingMap = {
        ceil: Math.ceil,
        round: Math.round,
        floor: Math.floor,
        trunc: function(value) {
            return value < 0 ? Math.ceil(value) : Math.floor(value);
        }
    };
    var defaultRoundingMethod = "trunc";

    function getRoundingMethod(method) {
        return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
    }

    // node_modules/date-fns/esm/endOfDay/index.js
    function endOfDay(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setHours(23, 59, 59, 999);
        return date;
    }

    // node_modules/date-fns/esm/endOfMonth/index.js
    function endOfMonth(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var month = date.getMonth();
        date.setFullYear(date.getFullYear(), month + 1, 0);
        date.setHours(23, 59, 59, 999);
        return date;
    }

    // node_modules/date-fns/esm/isLastDayOfMonth/index.js
    function isLastDayOfMonth(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        return endOfDay(date).getTime() === endOfMonth(date).getTime();
    }

    // node_modules/date-fns/esm/differenceInMonths/index.js
    function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var dateLeft = toDate(dirtyDateLeft);
        var dateRight = toDate(dirtyDateRight);
        var sign = compareAsc(dateLeft, dateRight);
        var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
        var result;
        if (difference < 1) {
            result = 0;
        } else {
            if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
                dateLeft.setDate(30);
            }
            dateLeft.setMonth(dateLeft.getMonth() - sign * difference);
            var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;
            if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
                isLastMonthNotFull = false;
            }
            result = sign * (difference - Number(isLastMonthNotFull));
        }
        return result === 0 ? 0 : result;
    }

    // node_modules/date-fns/esm/differenceInSeconds/index.js
    function differenceInSeconds(dateLeft, dateRight, options) {
        requiredArgs(2, arguments);
        var diff = differenceInMilliseconds(dateLeft, dateRight) / 1e3;
        return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
    }

    // node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
    var formatDistanceLocale = {
        lessThanXSeconds: {
            one: "less than a second",
            other: "less than {{count}} seconds"
        },
        xSeconds: {
            one: "1 second",
            other: "{{count}} seconds"
        },
        halfAMinute: "half a minute",
        lessThanXMinutes: {
            one: "less than a minute",
            other: "less than {{count}} minutes"
        },
        xMinutes: {
            one: "1 minute",
            other: "{{count}} minutes"
        },
        aboutXHours: {
            one: "about 1 hour",
            other: "about {{count}} hours"
        },
        xHours: {
            one: "1 hour",
            other: "{{count}} hours"
        },
        xDays: {
            one: "1 day",
            other: "{{count}} days"
        },
        aboutXWeeks: {
            one: "about 1 week",
            other: "about {{count}} weeks"
        },
        xWeeks: {
            one: "1 week",
            other: "{{count}} weeks"
        },
        aboutXMonths: {
            one: "about 1 month",
            other: "about {{count}} months"
        },
        xMonths: {
            one: "1 month",
            other: "{{count}} months"
        },
        aboutXYears: {
            one: "about 1 year",
            other: "about {{count}} years"
        },
        xYears: {
            one: "1 year",
            other: "{{count}} years"
        },
        overXYears: {
            one: "over 1 year",
            other: "over {{count}} years"
        },
        almostXYears: {
            one: "almost 1 year",
            other: "almost {{count}} years"
        }
    };
    var formatDistance = function(token, count, options) {
        var result;
        var tokenValue = formatDistanceLocale[token];
        if (typeof tokenValue === "string") {
            result = tokenValue;
        } else if (count === 1) {
            result = tokenValue.one;
        } else {
            result = tokenValue.other.replace("{{count}}", count.toString());
        }
        if (options !== null && options !== void 0 && options.addSuffix) {
            if (options.comparison && options.comparison > 0) {
                return "in " + result;
            } else {
                return result + " ago";
            }
        }
        return result;
    };
    var formatDistance_default = formatDistance;

    // node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
    function buildFormatLongFn(args) {
        return function() {
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var width = options.width ? String(options.width) : args.defaultWidth;
            var format = args.formats[width] || args.formats[args.defaultWidth];
            return format;
        };
    }

    // node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
    var dateFormats = {
        full: "EEEE, MMMM do, y",
        long: "MMMM do, y",
        medium: "MMM d, y",
        short: "MM/dd/yyyy"
    };
    var timeFormats = {
        full: "h:mm:ss a zzzz",
        long: "h:mm:ss a z",
        medium: "h:mm:ss a",
        short: "h:mm a"
    };
    var dateTimeFormats = {
        full: "{{date}} 'at' {{time}}",
        long: "{{date}} 'at' {{time}}",
        medium: "{{date}}, {{time}}",
        short: "{{date}}, {{time}}"
    };
    var formatLong = {
        date: buildFormatLongFn({
            formats: dateFormats,
            defaultWidth: "full"
        }),
        time: buildFormatLongFn({
            formats: timeFormats,
            defaultWidth: "full"
        }),
        dateTime: buildFormatLongFn({
            formats: dateTimeFormats,
            defaultWidth: "full"
        })
    };
    var formatLong_default = formatLong;

    // node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
    var formatRelativeLocale = {
        lastWeek: "'last' eeee 'at' p",
        yesterday: "'yesterday at' p",
        today: "'today at' p",
        tomorrow: "'tomorrow at' p",
        nextWeek: "eeee 'at' p",
        other: "P"
    };
    var formatRelative = function(token, _date, _baseDate, _options) {
        return formatRelativeLocale[token];
    };
    var formatRelative_default = formatRelative;

    // node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
    function buildLocalizeFn(args) {
        return function(dirtyIndex, dirtyOptions) {
            var options = dirtyOptions || {};
            var context = options.context ? String(options.context) : "standalone";
            var valuesArray;
            if (context === "formatting" && args.formattingValues) {
                var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
                var width = options.width ? String(options.width) : defaultWidth;
                valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
            } else {
                var _defaultWidth = args.defaultWidth;
                var _width = options.width ? String(options.width) : args.defaultWidth;
                valuesArray = args.values[_width] || args.values[_defaultWidth];
            }
            var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
            return valuesArray[index];
        };
    }

    // node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
    var eraValues = {
        narrow: ["B", "A"],
        abbreviated: ["BC", "AD"],
        wide: ["Before Christ", "Anno Domini"]
    };
    var quarterValues = {
        narrow: ["1", "2", "3", "4"],
        abbreviated: ["Q1", "Q2", "Q3", "Q4"],
        wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
    };
    var monthValues = {
        narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
        abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    };
    var dayValues = {
        narrow: ["S", "M", "T", "W", "T", "F", "S"],
        short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    };
    var dayPeriodValues = {
        narrow: {
            am: "a",
            pm: "p",
            midnight: "mi",
            noon: "n",
            morning: "morning",
            afternoon: "afternoon",
            evening: "evening",
            night: "night"
        },
        abbreviated: {
            am: "AM",
            pm: "PM",
            midnight: "midnight",
            noon: "noon",
            morning: "morning",
            afternoon: "afternoon",
            evening: "evening",
            night: "night"
        },
        wide: {
            am: "a.m.",
            pm: "p.m.",
            midnight: "midnight",
            noon: "noon",
            morning: "morning",
            afternoon: "afternoon",
            evening: "evening",
            night: "night"
        }
    };
    var formattingDayPeriodValues = {
        narrow: {
            am: "a",
            pm: "p",
            midnight: "mi",
            noon: "n",
            morning: "in the morning",
            afternoon: "in the afternoon",
            evening: "in the evening",
            night: "at night"
        },
        abbreviated: {
            am: "AM",
            pm: "PM",
            midnight: "midnight",
            noon: "noon",
            morning: "in the morning",
            afternoon: "in the afternoon",
            evening: "in the evening",
            night: "at night"
        },
        wide: {
            am: "a.m.",
            pm: "p.m.",
            midnight: "midnight",
            noon: "noon",
            morning: "in the morning",
            afternoon: "in the afternoon",
            evening: "in the evening",
            night: "at night"
        }
    };
    var ordinalNumber = function(dirtyNumber, _options) {
        var number = Number(dirtyNumber);
        var rem100 = number % 100;
        if (rem100 > 20 || rem100 < 10) {
            switch (rem100 % 10) {
                case 1:
                    return number + "st";
                case 2:
                    return number + "nd";
                case 3:
                    return number + "rd";
            }
        }
        return number + "th";
    };
    var localize = {
        ordinalNumber,
        era: buildLocalizeFn({
            values: eraValues,
            defaultWidth: "wide"
        }),
        quarter: buildLocalizeFn({
            values: quarterValues,
            defaultWidth: "wide",
            argumentCallback: function(quarter) {
                return quarter - 1;
            }
        }),
        month: buildLocalizeFn({
            values: monthValues,
            defaultWidth: "wide"
        }),
        day: buildLocalizeFn({
            values: dayValues,
            defaultWidth: "wide"
        }),
        dayPeriod: buildLocalizeFn({
            values: dayPeriodValues,
            defaultWidth: "wide",
            formattingValues: formattingDayPeriodValues,
            defaultFormattingWidth: "wide"
        })
    };
    var localize_default = localize;

    // node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
    function buildMatchFn(args) {
        return function(string) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            var width = options.width;
            var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
            var matchResult = string.match(matchPattern);
            if (!matchResult) {
                return null;
            }
            var matchedString = matchResult[0];
            var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
            var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
                return pattern.test(matchedString);
            }) : findKey(parsePatterns, function(pattern) {
                return pattern.test(matchedString);
            });
            var value;
            value = args.valueCallback ? args.valueCallback(key) : key;
            value = options.valueCallback ? options.valueCallback(value) : value;
            var rest = string.slice(matchedString.length);
            return {
                value,
                rest
            };
        };
    }

    function findKey(object, predicate) {
        for (var key in object) {
            if (object.hasOwnProperty(key) && predicate(object[key])) {
                return key;
            }
        }
        return void 0;
    }

    function findIndex(array, predicate) {
        for (var key = 0; key < array.length; key++) {
            if (predicate(array[key])) {
                return key;
            }
        }
        return void 0;
    }

    // node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
    function buildMatchPatternFn(args) {
        return function(string) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            var matchResult = string.match(args.matchPattern);
            if (!matchResult)
                return null;
            var matchedString = matchResult[0];
            var parseResult = string.match(args.parsePattern);
            if (!parseResult)
                return null;
            var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
            value = options.valueCallback ? options.valueCallback(value) : value;
            var rest = string.slice(matchedString.length);
            return {
                value,
                rest
            };
        };
    }

    // node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
        narrow: /^(b|a)/i,
        abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
        wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
        any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
        narrow: /^[1234]/i,
        abbreviated: /^q[1234]/i,
        wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
        any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
        narrow: /^[jfmasond]/i,
        abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
        wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
        narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
        any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
        narrow: /^[smtwf]/i,
        short: /^(su|mo|tu|we|th|fr|sa)/i,
        abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
        wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
        narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
        any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
        narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
        any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
        any: {
            am: /^a/i,
            pm: /^p/i,
            midnight: /^mi/i,
            noon: /^no/i,
            morning: /morning/i,
            afternoon: /afternoon/i,
            evening: /evening/i,
            night: /night/i
        }
    };
    var match = {
        ordinalNumber: buildMatchPatternFn({
            matchPattern: matchOrdinalNumberPattern,
            parsePattern: parseOrdinalNumberPattern,
            valueCallback: function(value) {
                return parseInt(value, 10);
            }
        }),
        era: buildMatchFn({
            matchPatterns: matchEraPatterns,
            defaultMatchWidth: "wide",
            parsePatterns: parseEraPatterns,
            defaultParseWidth: "any"
        }),
        quarter: buildMatchFn({
            matchPatterns: matchQuarterPatterns,
            defaultMatchWidth: "wide",
            parsePatterns: parseQuarterPatterns,
            defaultParseWidth: "any",
            valueCallback: function(index) {
                return index + 1;
            }
        }),
        month: buildMatchFn({
            matchPatterns: matchMonthPatterns,
            defaultMatchWidth: "wide",
            parsePatterns: parseMonthPatterns,
            defaultParseWidth: "any"
        }),
        day: buildMatchFn({
            matchPatterns: matchDayPatterns,
            defaultMatchWidth: "wide",
            parsePatterns: parseDayPatterns,
            defaultParseWidth: "any"
        }),
        dayPeriod: buildMatchFn({
            matchPatterns: matchDayPeriodPatterns,
            defaultMatchWidth: "any",
            parsePatterns: parseDayPeriodPatterns,
            defaultParseWidth: "any"
        })
    };
    var match_default = match;

    // node_modules/date-fns/esm/locale/en-US/index.js
    var locale = {
        code: "en-US",
        formatDistance: formatDistance_default,
        formatLong: formatLong_default,
        formatRelative: formatRelative_default,
        localize: localize_default,
        match: match_default,
        options: {
            weekStartsOn: 0,
            firstWeekContainsDate: 1
        }
    };
    var en_US_default = locale;

    // node_modules/date-fns/esm/_lib/assign/index.js
    function assign(target, dirtyObject) {
        if (target == null) {
            throw new TypeError("assign requires that input parameter not be null or undefined");
        }
        dirtyObject = dirtyObject || {};
        for (var property in dirtyObject) {
            if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
                target[property] = dirtyObject[property];
            }
        }
        return target;
    }

    // node_modules/date-fns/esm/_lib/cloneObject/index.js
    function cloneObject(dirtyObject) {
        return assign({}, dirtyObject);
    }

    // node_modules/date-fns/esm/formatDistance/index.js
    var MINUTES_IN_DAY = 1440;
    var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
    var MINUTES_IN_MONTH = 43200;
    var MINUTES_IN_TWO_MONTHS = 86400;

    function formatDistance2(dirtyDate, dirtyBaseDate) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        requiredArgs(2, arguments);
        var locale4 = options.locale || en_US_default;
        if (!locale4.formatDistance) {
            throw new RangeError("locale must contain formatDistance property");
        }
        var comparison = compareAsc(dirtyDate, dirtyBaseDate);
        if (isNaN(comparison)) {
            throw new RangeError("Invalid time value");
        }
        var localizeOptions = cloneObject(options);
        localizeOptions.addSuffix = Boolean(options.addSuffix);
        localizeOptions.comparison = comparison;
        var dateLeft;
        var dateRight;
        if (comparison > 0) {
            dateLeft = toDate(dirtyBaseDate);
            dateRight = toDate(dirtyDate);
        } else {
            dateLeft = toDate(dirtyDate);
            dateRight = toDate(dirtyBaseDate);
        }
        var seconds = differenceInSeconds(dateRight, dateLeft);
        var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1e3;
        var minutes = Math.round((seconds - offsetInSeconds) / 60);
        var months;
        if (minutes < 2) {
            if (options.includeSeconds) {
                if (seconds < 5) {
                    return locale4.formatDistance("lessThanXSeconds", 5, localizeOptions);
                } else if (seconds < 10) {
                    return locale4.formatDistance("lessThanXSeconds", 10, localizeOptions);
                } else if (seconds < 20) {
                    return locale4.formatDistance("lessThanXSeconds", 20, localizeOptions);
                } else if (seconds < 40) {
                    return locale4.formatDistance("halfAMinute", null, localizeOptions);
                } else if (seconds < 60) {
                    return locale4.formatDistance("lessThanXMinutes", 1, localizeOptions);
                } else {
                    return locale4.formatDistance("xMinutes", 1, localizeOptions);
                }
            } else {
                if (minutes === 0) {
                    return locale4.formatDistance("lessThanXMinutes", 1, localizeOptions);
                } else {
                    return locale4.formatDistance("xMinutes", minutes, localizeOptions);
                }
            }
        } else if (minutes < 45) {
            return locale4.formatDistance("xMinutes", minutes, localizeOptions);
        } else if (minutes < 90) {
            return locale4.formatDistance("aboutXHours", 1, localizeOptions);
        } else if (minutes < MINUTES_IN_DAY) {
            var hours = Math.round(minutes / 60);
            return locale4.formatDistance("aboutXHours", hours, localizeOptions);
        } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
            return locale4.formatDistance("xDays", 1, localizeOptions);
        } else if (minutes < MINUTES_IN_MONTH) {
            var days = Math.round(minutes / MINUTES_IN_DAY);
            return locale4.formatDistance("xDays", days, localizeOptions);
        } else if (minutes < MINUTES_IN_TWO_MONTHS) {
            months = Math.round(minutes / MINUTES_IN_MONTH);
            return locale4.formatDistance("aboutXMonths", months, localizeOptions);
        }
        months = differenceInMonths(dateRight, dateLeft);
        if (months < 12) {
            var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
            return locale4.formatDistance("xMonths", nearestMonth, localizeOptions);
        } else {
            var monthsSinceStartOfYear = months % 12;
            var years = Math.floor(months / 12);
            if (monthsSinceStartOfYear < 3) {
                return locale4.formatDistance("aboutXYears", years, localizeOptions);
            } else if (monthsSinceStartOfYear < 9) {
                return locale4.formatDistance("overXYears", years, localizeOptions);
            } else {
                return locale4.formatDistance("almostXYears", years + 1, localizeOptions);
            }
        }
    }

    // node_modules/date-fns/esm/formatDistanceToNow/index.js
    function formatDistanceToNow(dirtyDate, dirtyOptions) {
        requiredArgs(1, arguments);
        return formatDistance2(dirtyDate, Date.now(), dirtyOptions);
    }

    // node_modules/date-fns/esm/parseISO/index.js
    function parseISO(argument, dirtyOptions) {
        requiredArgs(1, arguments);
        var options = dirtyOptions || {};
        var additionalDigits = options.additionalDigits == null ? 2 : toInteger(options.additionalDigits);
        if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
            throw new RangeError("additionalDigits must be 0, 1 or 2");
        }
        if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
            return new Date(NaN);
        }
        var dateStrings = splitDateString(argument);
        var date;
        if (dateStrings.date) {
            var parseYearResult = parseYear(dateStrings.date, additionalDigits);
            date = parseDate(parseYearResult.restDateString, parseYearResult.year);
        }
        if (!date || isNaN(date.getTime())) {
            return new Date(NaN);
        }
        var timestamp = date.getTime();
        var time = 0;
        var offset;
        if (dateStrings.time) {
            time = parseTime(dateStrings.time);
            if (isNaN(time)) {
                return new Date(NaN);
            }
        }
        if (dateStrings.timezone) {
            offset = parseTimezone(dateStrings.timezone);
            if (isNaN(offset)) {
                return new Date(NaN);
            }
        } else {
            var dirtyDate = new Date(timestamp + time);
            var result = new Date(0);
            result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
            result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
            return result;
        }
        return new Date(timestamp + time + offset);
    }
    var patterns = {
        dateTimeDelimiter: /[T ]/,
        timeZoneDelimiter: /[Z ]/i,
        timezone: /([Z+-].*)$/
    };
    var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
    var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
    var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;

    function splitDateString(dateString) {
        var dateStrings = {};
        var array = dateString.split(patterns.dateTimeDelimiter);
        var timeString;
        if (array.length > 2) {
            return dateStrings;
        }
        if (/:/.test(array[0])) {
            timeString = array[0];
        } else {
            dateStrings.date = array[0];
            timeString = array[1];
            if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
                dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
                timeString = dateString.substr(dateStrings.date.length, dateString.length);
            }
        }
        if (timeString) {
            var token = patterns.timezone.exec(timeString);
            if (token) {
                dateStrings.time = timeString.replace(token[1], "");
                dateStrings.timezone = token[1];
            } else {
                dateStrings.time = timeString;
            }
        }
        return dateStrings;
    }

    function parseYear(dateString, additionalDigits) {
        var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
        var captures = dateString.match(regex);
        if (!captures)
            return {
                year: NaN,
                restDateString: ""
            };
        var year = captures[1] ? parseInt(captures[1]) : null;
        var century = captures[2] ? parseInt(captures[2]) : null;
        return {
            year: century === null ? year : century * 100,
            restDateString: dateString.slice((captures[1] || captures[2]).length)
        };
    }

    function parseDate(dateString, year) {
        if (year === null)
            return new Date(NaN);
        var captures = dateString.match(dateRegex);
        if (!captures)
            return new Date(NaN);
        var isWeekDate = !!captures[4];
        var dayOfYear = parseDateUnit(captures[1]);
        var month = parseDateUnit(captures[2]) - 1;
        var day = parseDateUnit(captures[3]);
        var week = parseDateUnit(captures[4]);
        var dayOfWeek = parseDateUnit(captures[5]) - 1;
        if (isWeekDate) {
            if (!validateWeekDate(year, week, dayOfWeek)) {
                return new Date(NaN);
            }
            return dayOfISOWeekYear(year, week, dayOfWeek);
        } else {
            var date = new Date(0);
            if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
                return new Date(NaN);
            }
            date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
            return date;
        }
    }

    function parseDateUnit(value) {
        return value ? parseInt(value) : 1;
    }

    function parseTime(timeString) {
        var captures = timeString.match(timeRegex);
        if (!captures)
            return NaN;
        var hours = parseTimeUnit(captures[1]);
        var minutes = parseTimeUnit(captures[2]);
        var seconds = parseTimeUnit(captures[3]);
        if (!validateTime(hours, minutes, seconds)) {
            return NaN;
        }
        return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
    }

    function parseTimeUnit(value) {
        return value && parseFloat(value.replace(",", ".")) || 0;
    }

    function parseTimezone(timezoneString) {
        if (timezoneString === "Z")
            return 0;
        var captures = timezoneString.match(timezoneRegex);
        if (!captures)
            return 0;
        var sign = captures[1] === "+" ? -1 : 1;
        var hours = parseInt(captures[2]);
        var minutes = captures[3] && parseInt(captures[3]) || 0;
        if (!validateTimezone(hours, minutes)) {
            return NaN;
        }
        return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
    }

    function dayOfISOWeekYear(isoWeekYear, week, day) {
        var date = new Date(0);
        date.setUTCFullYear(isoWeekYear, 0, 4);
        var fourthOfJanuaryDay = date.getUTCDay() || 7;
        var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
    }
    var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    function isLeapYearIndex(year) {
        return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
    }

    function validateDate(year, month, date) {
        return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
    }

    function validateDayOfYearDate(year, dayOfYear) {
        return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
    }

    function validateWeekDate(_year, week, day) {
        return week >= 1 && week <= 53 && day >= 0 && day <= 6;
    }

    function validateTime(hours, minutes, seconds) {
        if (hours === 24) {
            return minutes === 0 && seconds === 0;
        }
        return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
    }

    function validateTimezone(_hours, minutes) {
        return minutes >= 0 && minutes <= 59;
    }

    // js/timeago.js
    var locale2 = null;

    function TimeAgo(Alpine2) {
        Alpine2.directive("timeago", (el, { expression, modifiers }, { evaluateLater: evaluateLater2, effect: effect3, cleanup: cleanup2 }) => {
            let evaluateDate = evaluateLater2(expression);
            const render = (date) => {
                try {
                    if (typeof date === "string") {
                        date = parseISO(date);
                    }
                    el.textContent = formatDistanceToNow(date, {
                        addSuffix: !modifiers.includes("pure"),
                        locale: locale2
                    });
                } catch (e) {
                    console.error(e);
                }
            };
            let interval;
            effect3(() => {
                evaluateDate((date) => {
                    if (interval) {
                        clearInterval(interval);
                    }
                    render(date);
                    interval = setInterval(() => {
                        render(date);
                    }, 3e4);
                });
            });
            cleanup2(() => clearInterval(interval));
        });
    }
    TimeAgo.configure = (config) => {
        if (config.hasOwnProperty("locale") && typeof config.locale === "object") {
            if (config.locale.hasOwnProperty("formatDistance")) {
                locale2 = config.locale;
            }
        }
        return TimeAgo;
    };
    var timeago_default = TimeAgo;

    // node_modules/date-fns/esm/locale/es/_lib/formatDistance/index.js
    var formatDistanceLocale2 = {
        lessThanXSeconds: {
            one: "menos de un segundo",
            other: "menos de {{count}} segundos"
        },
        xSeconds: {
            one: "1 segundo",
            other: "{{count}} segundos"
        },
        halfAMinute: "medio minuto",
        lessThanXMinutes: {
            one: "menos de un minuto",
            other: "menos de {{count}} minutos"
        },
        xMinutes: {
            one: "1 minuto",
            other: "{{count}} minutos"
        },
        aboutXHours: {
            one: "alrededor de 1 hora",
            other: "alrededor de {{count}} horas"
        },
        xHours: {
            one: "1 hora",
            other: "{{count}} horas"
        },
        xDays: {
            one: "1 d\xEDa",
            other: "{{count}} d\xEDas"
        },
        aboutXWeeks: {
            one: "alrededor de 1 semana",
            other: "alrededor de {{count}} semanas"
        },
        xWeeks: {
            one: "1 semana",
            other: "{{count}} semanas"
        },
        aboutXMonths: {
            one: "alrededor de 1 mes",
            other: "alrededor de {{count}} meses"
        },
        xMonths: {
            one: "1 mes",
            other: "{{count}} meses"
        },
        aboutXYears: {
            one: "alrededor de 1 a\xF1o",
            other: "alrededor de {{count}} a\xF1os"
        },
        xYears: {
            one: "1 a\xF1o",
            other: "{{count}} a\xF1os"
        },
        overXYears: {
            one: "m\xE1s de 1 a\xF1o",
            other: "m\xE1s de {{count}} a\xF1os"
        },
        almostXYears: {
            one: "casi 1 a\xF1o",
            other: "casi {{count}} a\xF1os"
        }
    };
    var formatDistance3 = function(token, count, options) {
        var result;
        var tokenValue = formatDistanceLocale2[token];
        if (typeof tokenValue === "string") {
            result = tokenValue;
        } else if (count === 1) {
            result = tokenValue.one;
        } else {
            result = tokenValue.other.replace("{{count}}", count.toString());
        }
        if (options !== null && options !== void 0 && options.addSuffix) {
            if (options.comparison && options.comparison > 0) {
                return "en " + result;
            } else {
                return "hace " + result;
            }
        }
        return result;
    };
    var formatDistance_default2 = formatDistance3;

    // node_modules/date-fns/esm/locale/es/_lib/formatLong/index.js
    var dateFormats2 = {
        full: "EEEE, d 'de' MMMM 'de' y",
        long: "d 'de' MMMM 'de' y",
        medium: "d MMM y",
        short: "dd/MM/y"
    };
    var timeFormats2 = {
        full: "HH:mm:ss zzzz",
        long: "HH:mm:ss z",
        medium: "HH:mm:ss",
        short: "HH:mm"
    };
    var dateTimeFormats2 = {
        full: "{{date}} 'a las' {{time}}",
        long: "{{date}} 'a las' {{time}}",
        medium: "{{date}}, {{time}}",
        short: "{{date}}, {{time}}"
    };
    var formatLong2 = {
        date: buildFormatLongFn({
            formats: dateFormats2,
            defaultWidth: "full"
        }),
        time: buildFormatLongFn({
            formats: timeFormats2,
            defaultWidth: "full"
        }),
        dateTime: buildFormatLongFn({
            formats: dateTimeFormats2,
            defaultWidth: "full"
        })
    };
    var formatLong_default2 = formatLong2;

    // node_modules/date-fns/esm/locale/es/_lib/formatRelative/index.js
    var formatRelativeLocale2 = {
        lastWeek: "'el' eeee 'pasado a la' p",
        yesterday: "'ayer a la' p",
        today: "'hoy a la' p",
        tomorrow: "'ma\xF1ana a la' p",
        nextWeek: "eeee 'a la' p",
        other: "P"
    };
    var formatRelativeLocalePlural = {
        lastWeek: "'el' eeee 'pasado a las' p",
        yesterday: "'ayer a las' p",
        today: "'hoy a las' p",
        tomorrow: "'ma\xF1ana a las' p",
        nextWeek: "eeee 'a las' p",
        other: "P"
    };
    var formatRelative2 = function(token, date, _baseDate, _options) {
        if (date.getUTCHours() !== 1) {
            return formatRelativeLocalePlural[token];
        } else {
            return formatRelativeLocale2[token];
        }
    };
    var formatRelative_default2 = formatRelative2;

    // node_modules/date-fns/esm/locale/es/_lib/localize/index.js
    var eraValues2 = {
        narrow: ["AC", "DC"],
        abbreviated: ["AC", "DC"],
        wide: ["antes de cristo", "despu\xE9s de cristo"]
    };
    var quarterValues2 = {
        narrow: ["1", "2", "3", "4"],
        abbreviated: ["T1", "T2", "T3", "T4"],
        wide: ["1\xBA trimestre", "2\xBA trimestre", "3\xBA trimestre", "4\xBA trimestre"]
    };
    var monthValues2 = {
        narrow: ["e", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
        abbreviated: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
        wide: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]
    };
    var dayValues2 = {
        narrow: ["d", "l", "m", "m", "j", "v", "s"],
        short: ["do", "lu", "ma", "mi", "ju", "vi", "s\xE1"],
        abbreviated: ["dom", "lun", "mar", "mi\xE9", "jue", "vie", "s\xE1b"],
        wide: ["domingo", "lunes", "martes", "mi\xE9rcoles", "jueves", "viernes", "s\xE1bado"]
    };
    var dayPeriodValues2 = {
        narrow: {
            am: "a",
            pm: "p",
            midnight: "mn",
            noon: "md",
            morning: "ma\xF1ana",
            afternoon: "tarde",
            evening: "tarde",
            night: "noche"
        },
        abbreviated: {
            am: "AM",
            pm: "PM",
            midnight: "medianoche",
            noon: "mediodia",
            morning: "ma\xF1ana",
            afternoon: "tarde",
            evening: "tarde",
            night: "noche"
        },
        wide: {
            am: "a.m.",
            pm: "p.m.",
            midnight: "medianoche",
            noon: "mediodia",
            morning: "ma\xF1ana",
            afternoon: "tarde",
            evening: "tarde",
            night: "noche"
        }
    };
    var formattingDayPeriodValues2 = {
        narrow: {
            am: "a",
            pm: "p",
            midnight: "mn",
            noon: "md",
            morning: "de la ma\xF1ana",
            afternoon: "de la tarde",
            evening: "de la tarde",
            night: "de la noche"
        },
        abbreviated: {
            am: "AM",
            pm: "PM",
            midnight: "medianoche",
            noon: "mediodia",
            morning: "de la ma\xF1ana",
            afternoon: "de la tarde",
            evening: "de la tarde",
            night: "de la noche"
        },
        wide: {
            am: "a.m.",
            pm: "p.m.",
            midnight: "medianoche",
            noon: "mediodia",
            morning: "de la ma\xF1ana",
            afternoon: "de la tarde",
            evening: "de la tarde",
            night: "de la noche"
        }
    };
    var ordinalNumber2 = function(dirtyNumber, _options) {
        var number = Number(dirtyNumber);
        return number + "\xBA";
    };
    var localize2 = {
        ordinalNumber: ordinalNumber2,
        era: buildLocalizeFn({
            values: eraValues2,
            defaultWidth: "wide"
        }),
        quarter: buildLocalizeFn({
            values: quarterValues2,
            defaultWidth: "wide",
            argumentCallback: function(quarter) {
                return Number(quarter) - 1;
            }
        }),
        month: buildLocalizeFn({
            values: monthValues2,
            defaultWidth: "wide"
        }),
        day: buildLocalizeFn({
            values: dayValues2,
            defaultWidth: "wide"
        }),
        dayPeriod: buildLocalizeFn({
            values: dayPeriodValues2,
            defaultWidth: "wide",
            formattingValues: formattingDayPeriodValues2,
            defaultFormattingWidth: "wide"
        })
    };
    var localize_default2 = localize2;

    // node_modules/date-fns/esm/locale/es/_lib/match/index.js
    var matchOrdinalNumberPattern2 = /^(\d+)(º)?/i;
    var parseOrdinalNumberPattern2 = /\d+/i;
    var matchEraPatterns2 = {
        narrow: /^(ac|dc|a|d)/i,
        abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
        wide: /^(antes de cristo|antes de la era com[uú]n|despu[eé]s de cristo|era com[uú]n)/i
    };
    var parseEraPatterns2 = {
        any: [/^ac/i, /^dc/i],
        wide: [/^(antes de cristo|antes de la era com[uú]n)/i, /^(despu[eé]s de cristo|era com[uú]n)/i]
    };
    var matchQuarterPatterns2 = {
        narrow: /^[1234]/i,
        abbreviated: /^T[1234]/i,
        wide: /^[1234](º)? trimestre/i
    };
    var parseQuarterPatterns2 = {
        any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns2 = {
        narrow: /^[efmajsond]/i,
        abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
        wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i
    };
    var parseMonthPatterns2 = {
        narrow: [/^e/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
        any: [/^en/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i]
    };
    var matchDayPatterns2 = {
        narrow: /^[dlmjvs]/i,
        short: /^(do|lu|ma|mi|ju|vi|s[áa])/i,
        abbreviated: /^(dom|lun|mar|mi[ée]|jue|vie|s[áa]b)/i,
        wide: /^(domingo|lunes|martes|mi[ée]rcoles|jueves|viernes|s[áa]bado)/i
    };
    var parseDayPatterns2 = {
        narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
        any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i]
    };
    var matchDayPeriodPatterns2 = {
        narrow: /^(a|p|mn|md|(de la|a las) (mañana|tarde|noche))/i,
        any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (mañana|tarde|noche))/i
    };
    var parseDayPeriodPatterns2 = {
        any: {
            am: /^a/i,
            pm: /^p/i,
            midnight: /^mn/i,
            noon: /^md/i,
            morning: /mañana/i,
            afternoon: /tarde/i,
            evening: /tarde/i,
            night: /noche/i
        }
    };
    var match2 = {
        ordinalNumber: buildMatchPatternFn({
            matchPattern: matchOrdinalNumberPattern2,
            parsePattern: parseOrdinalNumberPattern2,
            valueCallback: function(value) {
                return parseInt(value, 10);
            }
        }),
        era: buildMatchFn({
            matchPatterns: matchEraPatterns2,
            defaultMatchWidth: "wide",
            parsePatterns: parseEraPatterns2,
            defaultParseWidth: "any"
        }),
        quarter: buildMatchFn({
            matchPatterns: matchQuarterPatterns2,
            defaultMatchWidth: "wide",
            parsePatterns: parseQuarterPatterns2,
            defaultParseWidth: "any",
            valueCallback: function(index) {
                return index + 1;
            }
        }),
        month: buildMatchFn({
            matchPatterns: matchMonthPatterns2,
            defaultMatchWidth: "wide",
            parsePatterns: parseMonthPatterns2,
            defaultParseWidth: "any"
        }),
        day: buildMatchFn({
            matchPatterns: matchDayPatterns2,
            defaultMatchWidth: "wide",
            parsePatterns: parseDayPatterns2,
            defaultParseWidth: "any"
        }),
        dayPeriod: buildMatchFn({
            matchPatterns: matchDayPeriodPatterns2,
            defaultMatchWidth: "any",
            parsePatterns: parseDayPeriodPatterns2,
            defaultParseWidth: "any"
        })
    };
    var match_default2 = match2;

    // node_modules/date-fns/esm/locale/es/index.js
    var locale3 = {
        code: "es",
        formatDistance: formatDistance_default2,
        formatLong: formatLong_default2,
        formatRelative: formatRelative_default2,
        localize: localize_default2,
        match: match_default2,
        options: {
            weekStartsOn: 1,
            firstWeekContainsDate: 1
        }
    };
    var es_default = locale3;

    // js/app.js
    var import_embla_carousel = __toModule(require_embla_carousel_umd());
    window.Alpine = module_default;
    module_default.plugin(module_default2);
    module_default.plugin(timeago_default.configure({
        locale: es_default
    }));
    module_default.start();
    window.EmblaCarousel = import_embla_carousel.default;
    var csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
    var liveSocket = new LiveSocket("/live", Socket, {
        params: { _csrf_token: csrfToken },
        dom: {
            onBeforeElUpdated(from, to) {
                if (from._x_dataStack) {
                    window.Alpine.clone(from, to);
                }
            }
        }
    });
    import_topbar.default.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
    window.addEventListener("phx:page-loading-start", (info) => import_topbar.default.show());
    window.addEventListener("phx:page-loading-stop", (info) => import_topbar.default.hide());
    liveSocket.connect();
    window.liveSocket = liveSocket;
    init_templet();
    init_templet("theme-toggle-dark-icon-2", "theme-toggle-light-icon-2", "theme-toggle-2");
})();
/**
 * @license MIT
 * topbar 1.0.0, 2021-01-06
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,